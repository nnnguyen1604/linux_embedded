
DOAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098d8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08009ac8  08009ac8  00019ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a03c  0800a03c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a03c  0800a03c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a03c  0800a03c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a03c  0800a03c  0001a03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001058  200001e4  0800a228  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  0800a228  0002123c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e34b  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ac  00000000  00000000  0002e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00030e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00031b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb5b  00000000  00000000  00032750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f598  00000000  00000000  0004e2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f8ad  00000000  00000000  0005d843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd0f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a0  00000000  00000000  000fd140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001e4 	.word	0x200001e4
 800020c:	00000000 	.word	0x00000000
 8000210:	08009ab0 	.word	0x08009ab0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001e8 	.word	0x200001e8
 800022c:	08009ab0 	.word	0x08009ab0

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_f2uiz>:
 8000c48:	0042      	lsls	r2, r0, #1
 8000c4a:	d20e      	bcs.n	8000c6a <__aeabi_f2uiz+0x22>
 8000c4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c50:	d30b      	bcc.n	8000c6a <__aeabi_f2uiz+0x22>
 8000c52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c5a:	d409      	bmi.n	8000c70 <__aeabi_f2uiz+0x28>
 8000c5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c64:	fa23 f002 	lsr.w	r0, r3, r2
 8000c68:	4770      	bx	lr
 8000c6a:	f04f 0000 	mov.w	r0, #0
 8000c6e:	4770      	bx	lr
 8000c70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c74:	d101      	bne.n	8000c7a <__aeabi_f2uiz+0x32>
 8000c76:	0242      	lsls	r2, r0, #9
 8000c78:	d102      	bne.n	8000c80 <__aeabi_f2uiz+0x38>
 8000c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2300      	movs	r3, #0
 8000c92:	4628      	mov	r0, r5
 8000c94:	4621      	mov	r1, r4
 8000c96:	f7ff ff01 	bl	8000a9c <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x20>
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fc77 	bl	80005b8 <__aeabi_dmul>
 8000cca:	f7ff ff4d 	bl	8000b68 <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fbf8 	bl	80004c4 <__aeabi_ui2d>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd8:	f7ff fc6e 	bl	80005b8 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff fab0 	bl	8000248 <__aeabi_dsub>
 8000ce8:	f7ff ff3e 	bl	8000b68 <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <vApplicationGetIdleTaskMemory+0x28>)
 8000d08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	20000200 	.word	0x20000200
 8000d24:	20000254 	.word	0x20000254

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b096      	sub	sp, #88	; 0x58
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f000 fc09 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d32:	f000 f84d 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d36:	f000 f911 	bl	8000f5c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d3a:	f000 f8a7 	bl	8000e8c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d3e:	f000 f8e3 	bl	8000f08 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <main+0x90>)
 8000d44:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000d48:	461d      	mov	r5, r3
 8000d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 f86d 	bl	8003e3c <osThreadCreate>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <main+0x94>)
 8000d66:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 256);
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <main+0x98>)
 8000d6a:	f107 0420 	add.w	r4, r7, #32
 8000d6e:	461d      	mov	r5, r3
 8000d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 f85a 	bl	8003e3c <osThreadCreate>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <main+0x9c>)
 8000d8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <main+0xa0>)
 8000d90:	1d3c      	adds	r4, r7, #4
 8000d92:	461d      	mov	r5, r3
 8000d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 f849 	bl	8003e3c <osThreadCreate>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <main+0xa4>)
 8000dae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000db0:	f003 f83d 	bl	8003e2e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000db4:	e7fe      	b.n	8000db4 <main+0x8c>
 8000db6:	bf00      	nop
 8000db8:	08009aec 	.word	0x08009aec
 8000dbc:	200004cc 	.word	0x200004cc
 8000dc0:	08009b08 	.word	0x08009b08
 8000dc4:	200004d0 	.word	0x200004d0
 8000dc8:	08009b24 	.word	0x08009b24
 8000dcc:	200004d4 	.word	0x200004d4

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b096      	sub	sp, #88	; 0x58
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dda:	2228      	movs	r2, #40	; 0x28
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 fa3e 	bl	8005260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e04:	2301      	movs	r3, #1
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e12:	2301      	movs	r3, #1
 8000e14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e20:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fc26 	bl	800267c <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e36:	f000 f991 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2102      	movs	r1, #2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fe92 	bl	8002b80 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e62:	f000 f97b 	bl	800115c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e66:	2302      	movs	r3, #2
 8000e68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 f812 	bl	8002e9c <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e7e:	f000 f96d 	bl	800115c <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3758      	adds	r7, #88	; 0x58
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <MX_ADC1_Init+0x78>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eb6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000eba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eca:	f000 fb9d 	bl	8001608 <HAL_ADC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ed4:	f000 f942 	bl	800115c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eea:	f000 fe37 	bl	8001b5c <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ef4:	f000 f932 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000454 	.word	0x20000454
 8000f04:	40012400 	.word	0x40012400

08000f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <MX_USART1_UART_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_USART1_UART_Init+0x4c>)
 8000f40:	f002 f93a 	bl	80031b8 <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f4a:	f000 f907 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000484 	.word	0x20000484
 8000f58:	40013800 	.word	0x40013800

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_GPIO_Init+0x74>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <MX_GPIO_Init+0x74>)
 8000f76:	f043 0320 	orr.w	r3, r3, #32
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_GPIO_Init+0x74>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0320 	and.w	r3, r3, #32
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_GPIO_Init+0x74>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <MX_GPIO_Init+0x74>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_GPIO_Init+0x74>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2130      	movs	r1, #48	; 0x30
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <MX_GPIO_Init+0x78>)
 8000fa6:	f001 fb51 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000faa:	2330      	movs	r3, #48	; 0x30
 8000fac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_GPIO_Init+0x78>)
 8000fc2:	f001 f9af 	bl	8002324 <HAL_GPIO_Init>

}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010800 	.word	0x40010800

08000fd8 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */


void StartDefaultTask(void const *argument) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint32_t adc_value[1];
	float v[1];
	/* Infinite loop */
	for (;;) {
		HAL_ADC_Start(&hadc1);
 8000fe0:	4823      	ldr	r0, [pc, #140]	; (8001070 <StartDefaultTask+0x98>)
 8000fe2:	f000 fbfb 	bl	80017dc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000fe6:	2164      	movs	r1, #100	; 0x64
 8000fe8:	4821      	ldr	r0, [pc, #132]	; (8001070 <StartDefaultTask+0x98>)
 8000fea:	f000 fca5 	bl	8001938 <HAL_ADC_PollForConversion>

		adc_value[0] = HAL_ADC_GetValue(&hadc1);
 8000fee:	4820      	ldr	r0, [pc, #128]	; (8001070 <StartDefaultTask+0x98>)
 8000ff0:	f000 fda8 	bl	8001b44 <HAL_ADC_GetValue>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	613b      	str	r3, [r7, #16]

		v[0] = adc_value[0] * 3.37 / 4096;
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa62 	bl	80004c4 <__aeabi_ui2d>
 8001000:	a319      	add	r3, pc, #100	; (adr r3, 8001068 <StartDefaultTask+0x90>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff fad7 	bl	80005b8 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <StartDefaultTask+0x9c>)
 8001018:	f7ff fbf8 	bl	800080c <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fdc0 	bl	8000ba8 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	60fb      	str	r3, [r7, #12]


		uint32_t delay_ms = (uint32_t)v[0] * 1000; // Chuyển đổi thời gian thành giá trị nguyên
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fe0a 	bl	8000c48 <__aeabi_f2uiz>
 8001034:	4603      	mov	r3, r0
 8001036:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	617b      	str	r3, [r7, #20]

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2120      	movs	r1, #32
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <StartDefaultTask+0xa0>)
 8001046:	f001 fb01 	bl	800264c <HAL_GPIO_WritePin>
		osDelay(delay_ms);
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f002 ff42 	bl	8003ed4 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <StartDefaultTask+0xa0>)
 8001056:	f001 faf9 	bl	800264c <HAL_GPIO_WritePin>
		osDelay(delay_ms);
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f002 ff3a 	bl	8003ed4 <osDelay>
	for (;;) {
 8001060:	e7be      	b.n	8000fe0 <StartDefaultTask+0x8>
 8001062:	bf00      	nop
 8001064:	f3af 8000 	nop.w
 8001068:	8f5c28f6 	.word	0x8f5c28f6
 800106c:	400af5c2 	.word	0x400af5c2
 8001070:	20000454 	.word	0x20000454
 8001074:	40b00000 	.word	0x40b00000
 8001078:	40010800 	.word	0x40010800
 800107c:	00000000 	.word	0x00000000

08001080 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */

void StartTask02(void const * argument) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    uint32_t adc_value[1];
    float v[1];
    uint8_t data_send[6];

    for (;;) {
        HAL_ADC_Start(&hadc1);
 8001088:	4823      	ldr	r0, [pc, #140]	; (8001118 <StartTask02+0x98>)
 800108a:	f000 fba7 	bl	80017dc <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 100); // Wait for the ADC conversion to complete
 800108e:	2164      	movs	r1, #100	; 0x64
 8001090:	4821      	ldr	r0, [pc, #132]	; (8001118 <StartTask02+0x98>)
 8001092:	f000 fc51 	bl	8001938 <HAL_ADC_PollForConversion>

        adc_value[0] = HAL_ADC_GetValue(&hadc1);
 8001096:	4820      	ldr	r0, [pc, #128]	; (8001118 <StartTask02+0x98>)
 8001098:	f000 fd54 	bl	8001b44 <HAL_ADC_GetValue>
 800109c:	4603      	mov	r3, r0
 800109e:	617b      	str	r3, [r7, #20]

        v[0] = adc_value[0] * 3.37 / 4096;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa0e 	bl	80004c4 <__aeabi_ui2d>
 80010a8:	a319      	add	r3, pc, #100	; (adr r3, 8001110 <StartTask02+0x90>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fa83 	bl	80005b8 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <StartTask02+0x9c>)
 80010c0:	f7ff fba4 	bl	800080c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd6c 	bl	8000ba8 <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	613b      	str	r3, [r7, #16]


        sprintf((char*)data_send, "%6.2f \r\n", v[0]);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa16 	bl	8000508 <__aeabi_f2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	f107 0008 	add.w	r0, r7, #8
 80010e4:	490e      	ldr	r1, [pc, #56]	; (8001120 <StartTask02+0xa0>)
 80010e6:	f004 ff35 	bl	8005f54 <siprintf>

        HAL_UART_Transmit(&huart1, data_send, strlen((char*)data_send), 100);
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f89e 	bl	8000230 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f107 0108 	add.w	r1, r7, #8
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	4809      	ldr	r0, [pc, #36]	; (8001124 <StartTask02+0xa4>)
 8001100:	f002 f8aa 	bl	8003258 <HAL_UART_Transmit>
        osDelay(1000); // Add a delay after each transmission to avoid rapid ADC reads
 8001104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001108:	f002 fee4 	bl	8003ed4 <osDelay>
    for (;;) {
 800110c:	e7bc      	b.n	8001088 <StartTask02+0x8>
 800110e:	bf00      	nop
 8001110:	8f5c28f6 	.word	0x8f5c28f6
 8001114:	400af5c2 	.word	0x400af5c2
 8001118:	20000454 	.word	0x20000454
 800111c:	40b00000 	.word	0x40b00000
 8001120:	08009b40 	.word	0x08009b40
 8001124:	20000484 	.word	0x20000484

08001128 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2110      	movs	r1, #16
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <StartTask03+0x30>)
 8001136:	f001 fa89 	bl	800264c <HAL_GPIO_WritePin>
		osDelay(1000);
 800113a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800113e:	f002 fec9 	bl	8003ed4 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2110      	movs	r1, #16
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <StartTask03+0x30>)
 8001148:	f001 fa80 	bl	800264c <HAL_GPIO_WritePin>
		osDelay(1000);
 800114c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001150:	f002 fec0 	bl	8003ed4 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001154:	e7ec      	b.n	8001130 <StartTask03+0x8>
 8001156:	bf00      	nop
 8001158:	40010800 	.word	0x40010800

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_MspInit+0x78>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_MspInit+0x78>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6193      	str	r3, [r2, #24]
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_MspInit+0x78>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_MspInit+0x78>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <HAL_MspInit+0x78>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_MspInit+0x78>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	210f      	movs	r1, #15
 80011a2:	f06f 0001 	mvn.w	r0, #1
 80011a6:	f000 ff44 	bl	8002032 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2105      	movs	r1, #5
 80011ae:	2005      	movs	r0, #5
 80011b0:	f000 ff3f 	bl	8002032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011b4:	2005      	movs	r0, #5
 80011b6:	f000 ff58 	bl	800206a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_MspInit+0x7c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_MspInit+0x7c>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000

080011e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_ADC_MspInit+0x6c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d121      	bne.n	800124c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_ADC_MspInit+0x70>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_ADC_MspInit+0x70>)
 800120e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_ADC_MspInit+0x70>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_ADC_MspInit+0x70>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <HAL_ADC_MspInit+0x70>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_ADC_MspInit+0x70>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001238:	2301      	movs	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123c:	2303      	movs	r3, #3
 800123e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_ADC_MspInit+0x74>)
 8001248:	f001 f86c 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40012400 	.word	0x40012400
 8001258:	40021000 	.word	0x40021000
 800125c:	40010800 	.word	0x40010800

08001260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a20      	ldr	r2, [pc, #128]	; (80012fc <HAL_UART_MspInit+0x9c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d139      	bne.n	80012f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <HAL_UART_MspInit+0xa0>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <HAL_UART_MspInit+0xa0>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_UART_MspInit+0xa0>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_UART_MspInit+0xa0>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a18      	ldr	r2, [pc, #96]	; (8001300 <HAL_UART_MspInit+0xa0>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_UART_MspInit+0xa0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	480f      	ldr	r0, [pc, #60]	; (8001304 <HAL_UART_MspInit+0xa4>)
 80012c6:	f001 f82d 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4619      	mov	r1, r3
 80012de:	4809      	ldr	r0, [pc, #36]	; (8001304 <HAL_UART_MspInit+0xa4>)
 80012e0:	f001 f820 	bl	8002324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2105      	movs	r1, #5
 80012e8:	2025      	movs	r0, #37	; 0x25
 80012ea:	f000 fea2 	bl	8002032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012ee:	2025      	movs	r0, #37	; 0x25
 80012f0:	f000 febb 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40013800 	.word	0x40013800
 8001300:	40021000 	.word	0x40021000
 8001304:	40010800 	.word	0x40010800

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f94b 	bl	80015d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800133a:	f003 fb49 	bl	80049d0 <xTaskGetSchedulerState>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d001      	beq.n	8001348 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001344:	f003 fd38 	bl	8004db8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <USART1_IRQHandler+0x10>)
 800135e:	f001 ffff 	bl	8003360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000484 	.word	0x20000484

0800136c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return 1;
 8001370:	2301      	movs	r3, #1
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <_kill>:

int _kill(int pid, int sig)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001384:	f003 ff34 	bl	80051f0 <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	2216      	movs	r2, #22
 800138c:	601a      	str	r2, [r3, #0]
  return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_exit>:

void _exit (int status)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a2:	f04f 31ff 	mov.w	r1, #4294967295
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffe7 	bl	800137a <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ac:	e7fe      	b.n	80013ac <_exit+0x12>

080013ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e00a      	b.n	80013d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c0:	f3af 8000 	nop.w
 80013c4:	4601      	mov	r1, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	60ba      	str	r2, [r7, #8]
 80013cc:	b2ca      	uxtb	r2, r1
 80013ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dbf0      	blt.n	80013c0 <_read+0x12>
  }

  return len;
 80013de:	687b      	ldr	r3, [r7, #4]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e009      	b.n	800140e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	60ba      	str	r2, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	dbf1      	blt.n	80013fa <_write+0x12>
  }
  return len;
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_close>:

int _close(int file)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001446:	605a      	str	r2, [r3, #4]
  return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <_isatty>:

int _isatty(int file)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f003 fe9e 	bl	80051f0 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000c000 	.word	0x2000c000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	200004d8 	.word	0x200004d8
 80014e8:	20001240 	.word	0x20001240

080014ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f8:	f7ff fff8 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014fe:	490c      	ldr	r1, [pc, #48]	; (8001530 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001500:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001514:	4c09      	ldr	r4, [pc, #36]	; (800153c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f003 fe6b 	bl	80051fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001526:	f7ff fbff 	bl	8000d28 <main>
  bx lr
 800152a:	4770      	bx	lr
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001534:	0800a044 	.word	0x0800a044
  ldr r2, =_sbss
 8001538:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800153c:	2000123c 	.word	0x2000123c

08001540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC1_2_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_Init+0x28>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_Init+0x28>)
 800154e:	f043 0310 	orr.w	r3, r3, #16
 8001552:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 fd61 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155a:	200f      	movs	r0, #15
 800155c:	f000 f808 	bl	8001570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001560:	f7ff fe02 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40022000 	.word	0x40022000

08001570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x54>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x58>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	fbb3 f3f1 	udiv	r3, r3, r1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fd79 	bl	8002086 <HAL_SYSTICK_Config>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e00e      	b.n	80015bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d80a      	bhi.n	80015ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f000 fd41 	bl	8002032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <HAL_InitTick+0x5c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_IncTick+0x1c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x20>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <HAL_IncTick+0x20>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	20000008 	.word	0x20000008
 80015f0:	200004dc 	.word	0x200004dc

080015f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <HAL_GetTick+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	200004dc 	.word	0x200004dc

08001608 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0ce      	b.n	80017c8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	2b00      	cmp	r3, #0
 8001636:	d109      	bne.n	800164c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fdce 	bl	80011e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fbd7 	bl	8001e00 <ADC_ConversionStop_Disable>
 8001652:	4603      	mov	r3, r0
 8001654:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80a9 	bne.w	80017b6 <HAL_ADC_Init+0x1ae>
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 80a5 	bne.w	80017b6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001674:	f023 0302 	bic.w	r3, r3, #2
 8001678:	f043 0202 	orr.w	r2, r3, #2
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4951      	ldr	r1, [pc, #324]	; (80017d0 <HAL_ADC_Init+0x1c8>)
 800168a:	428b      	cmp	r3, r1
 800168c:	d10a      	bne.n	80016a4 <HAL_ADC_Init+0x9c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001696:	d002      	beq.n	800169e <HAL_ADC_Init+0x96>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	e004      	b.n	80016a8 <HAL_ADC_Init+0xa0>
 800169e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016a2:	e001      	b.n	80016a8 <HAL_ADC_Init+0xa0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7b1b      	ldrb	r3, [r3, #12]
 80016ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c0:	d003      	beq.n	80016ca <HAL_ADC_Init+0xc2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d102      	bne.n	80016d0 <HAL_ADC_Init+0xc8>
 80016ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ce:	e000      	b.n	80016d2 <HAL_ADC_Init+0xca>
 80016d0:	2300      	movs	r3, #0
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7d1b      	ldrb	r3, [r3, #20]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d119      	bne.n	8001714 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7b1b      	ldrb	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d109      	bne.n	80016fc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	035a      	lsls	r2, r3, #13
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	e00b      	b.n	8001714 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f043 0220 	orr.w	r2, r3, #32
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_ADC_Init+0x1cc>)
 8001730:	4013      	ands	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	430b      	orrs	r3, r1
 800173a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001744:	d003      	beq.n	800174e <HAL_ADC_Init+0x146>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d104      	bne.n	8001758 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	3b01      	subs	r3, #1
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	430a      	orrs	r2, r1
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_ADC_Init+0x1d0>)
 8001774:	4013      	ands	r3, r2
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	429a      	cmp	r2, r3
 800177a:	d10b      	bne.n	8001794 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	f023 0303 	bic.w	r3, r3, #3
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001792:	e018      	b.n	80017c6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f023 0312 	bic.w	r3, r3, #18
 800179c:	f043 0210 	orr.w	r2, r3, #16
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017b4:	e007      	b.n	80017c6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	f043 0210 	orr.w	r2, r3, #16
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40013c00 	.word	0x40013c00
 80017d4:	ffe1f7fd 	.word	0xffe1f7fd
 80017d8:	ff1f0efe 	.word	0xff1f0efe

080017dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_Start+0x1a>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e098      	b.n	8001928 <HAL_ADC_Start+0x14c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 faa4 	bl	8001d4c <ADC_Enable>
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 8087 	bne.w	800191e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a41      	ldr	r2, [pc, #260]	; (8001930 <HAL_ADC_Start+0x154>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d105      	bne.n	800183a <HAL_ADC_Start+0x5e>
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_ADC_Start+0x158>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d115      	bne.n	8001866 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d026      	beq.n	80018a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800185c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001864:	e01d      	b.n	80018a2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a2f      	ldr	r2, [pc, #188]	; (8001934 <HAL_ADC_Start+0x158>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d004      	beq.n	8001886 <HAL_ADC_Start+0xaa>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <HAL_ADC_Start+0x154>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10d      	bne.n	80018a2 <HAL_ADC_Start+0xc6>
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_ADC_Start+0x158>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800189a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	f023 0206 	bic.w	r2, r3, #6
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ba:	e002      	b.n	80018c2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f06f 0202 	mvn.w	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018e2:	d113      	bne.n	800190c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018e8:	4a11      	ldr	r2, [pc, #68]	; (8001930 <HAL_ADC_Start+0x154>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d105      	bne.n	80018fa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_ADC_Start+0x158>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	e00c      	b.n	8001926 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	e003      	b.n	8001926 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40012800 	.word	0x40012800
 8001934:	40012400 	.word	0x40012400

08001938 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800194e:	f7ff fe51 	bl	80015f4 <HAL_GetTick>
 8001952:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f043 0220 	orr.w	r2, r3, #32
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0d3      	b.n	8001b22 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d131      	bne.n	80019ec <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001992:	2b00      	cmp	r3, #0
 8001994:	d12a      	bne.n	80019ec <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001996:	e021      	b.n	80019dc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199e:	d01d      	beq.n	80019dc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <HAL_ADC_PollForConversion+0x7e>
 80019a6:	f7ff fe25 	bl	80015f4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d212      	bcs.n	80019dc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10b      	bne.n	80019dc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0a2      	b.n	8001b22 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0d6      	beq.n	8001998 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019ea:	e070      	b.n	8001ace <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <HAL_ADC_PollForConversion+0x1f4>)
 80019ee:	681c      	ldr	r4, [r3, #0]
 80019f0:	2002      	movs	r0, #2
 80019f2:	f001 fb09 	bl	8003008 <HAL_RCCEx_GetPeriphCLKFreq>
 80019f6:	4603      	mov	r3, r0
 80019f8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6919      	ldr	r1, [r3, #16]
 8001a02:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_ADC_PollForConversion+0x1f8>)
 8001a04:	400b      	ands	r3, r1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_ADC_PollForConversion+0x104>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68d9      	ldr	r1, [r3, #12]
 8001a10:	4b48      	ldr	r3, [pc, #288]	; (8001b34 <HAL_ADC_PollForConversion+0x1fc>)
 8001a12:	400b      	ands	r3, r1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d111      	bne.n	8001a3c <HAL_ADC_PollForConversion+0x104>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6919      	ldr	r1, [r3, #16]
 8001a1e:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_ADC_PollForConversion+0x200>)
 8001a20:	400b      	ands	r3, r1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <HAL_ADC_PollForConversion+0x100>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68d9      	ldr	r1, [r3, #12]
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_ADC_PollForConversion+0x204>)
 8001a2e:	400b      	ands	r3, r1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_PollForConversion+0x100>
 8001a34:	2314      	movs	r3, #20
 8001a36:	e020      	b.n	8001a7a <HAL_ADC_PollForConversion+0x142>
 8001a38:	2329      	movs	r3, #41	; 0x29
 8001a3a:	e01e      	b.n	8001a7a <HAL_ADC_PollForConversion+0x142>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6919      	ldr	r1, [r3, #16]
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_ADC_PollForConversion+0x200>)
 8001a44:	400b      	ands	r3, r1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x120>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68d9      	ldr	r1, [r3, #12]
 8001a50:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <HAL_ADC_PollForConversion+0x204>)
 8001a52:	400b      	ands	r3, r1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_ADC_PollForConversion+0x13c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6919      	ldr	r1, [r3, #16]
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_ADC_PollForConversion+0x208>)
 8001a60:	400b      	ands	r3, r1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x140>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68d9      	ldr	r1, [r3, #12]
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_ADC_PollForConversion+0x208>)
 8001a6e:	400b      	ands	r3, r1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x140>
 8001a74:	2354      	movs	r3, #84	; 0x54
 8001a76:	e000      	b.n	8001a7a <HAL_ADC_PollForConversion+0x142>
 8001a78:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a80:	e021      	b.n	8001ac6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d01a      	beq.n	8001ac0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_ADC_PollForConversion+0x168>
 8001a90:	f7ff fdb0 	bl	80015f4 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d20f      	bcs.n	8001ac0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d90b      	bls.n	8001ac0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f043 0204 	orr.w	r2, r3, #4
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e030      	b.n	8001b22 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d8d9      	bhi.n	8001a82 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f06f 0212 	mvn.w	r2, #18
 8001ad6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001aee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001af2:	d115      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd90      	pop	{r4, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	24924924 	.word	0x24924924
 8001b34:	00924924 	.word	0x00924924
 8001b38:	12492492 	.word	0x12492492
 8001b3c:	00492492 	.word	0x00492492
 8001b40:	00249249 	.word	0x00249249

08001b44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x20>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e0dc      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1da>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b06      	cmp	r3, #6
 8001b8a:	d81c      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b05      	subs	r3, #5
 8001b9e:	221f      	movs	r2, #31
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b05      	subs	r3, #5
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc4:	e03c      	b.n	8001c40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d81c      	bhi.n	8001c08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b23      	subs	r3, #35	; 0x23
 8001be0:	221f      	movs	r2, #31
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4019      	ands	r1, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b23      	subs	r3, #35	; 0x23
 8001bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
 8001c06:	e01b      	b.n	8001c40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b41      	subs	r3, #65	; 0x41
 8001c1a:	221f      	movs	r2, #31
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4019      	ands	r1, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b41      	subs	r3, #65	; 0x41
 8001c34:	fa00 f203 	lsl.w	r2, r0, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	d91c      	bls.n	8001c82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68d9      	ldr	r1, [r3, #12]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	3b1e      	subs	r3, #30
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4019      	ands	r1, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6898      	ldr	r0, [r3, #8]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	3b1e      	subs	r3, #30
 8001c74:	fa00 f203 	lsl.w	r2, r0, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	e019      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6919      	ldr	r1, [r3, #16]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	2207      	movs	r2, #7
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4019      	ands	r1, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6898      	ldr	r0, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d003      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc2:	2b11      	cmp	r3, #17
 8001cc4:	d132      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d125      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d126      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d11a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	0c9a      	lsrs	r2, r3, #18
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x1b2>
 8001d1a:	e007      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40012400 	.word	0x40012400
 8001d44:	20000000 	.word	0x20000000
 8001d48:	431bde83 	.word	0x431bde83

08001d4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d040      	beq.n	8001dec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <ADC_Enable+0xac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <ADC_Enable+0xb0>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d88:	e002      	b.n	8001d90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f9      	bne.n	8001d8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d96:	f7ff fc2d 	bl	80015f4 <HAL_GetTick>
 8001d9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d9c:	e01f      	b.n	8001dde <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d9e:	f7ff fc29 	bl	80015f4 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d918      	bls.n	8001dde <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d011      	beq.n	8001dde <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e007      	b.n	8001dee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d1d8      	bne.n	8001d9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	431bde83 	.word	0x431bde83

08001e00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d12e      	bne.n	8001e78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0201 	bic.w	r2, r2, #1
 8001e28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e2a:	f7ff fbe3 	bl	80015f4 <HAL_GetTick>
 8001e2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e30:	e01b      	b.n	8001e6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e32:	f7ff fbdf 	bl	80015f4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d914      	bls.n	8001e6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10d      	bne.n	8001e6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	f043 0210 	orr.w	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e007      	b.n	8001e7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d0dc      	beq.n	8001e32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4906      	ldr	r1, [pc, #24]	; (8001f1c <__NVIC_EnableIRQ+0x34>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe8:	d301      	bcc.n	8001fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00f      	b.n	800200e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <SysTick_Config+0x40>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f7ff ff90 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <SysTick_Config+0x40>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <SysTick_Config+0x40>)
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	e000e010 	.word	0xe000e010

0800201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff2d 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff42 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff90 	bl	8001f74 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5f 	bl	8001f20 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff35 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa2 	bl	8001fd8 <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d008      	beq.n	80020c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2204      	movs	r2, #4
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e020      	b.n	800210a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 020e 	bic.w	r2, r2, #14
 80020d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f202 	lsl.w	r2, r1, r2
 80020f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d005      	beq.n	8002138 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	e0d6      	b.n	80022e6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 020e 	bic.w	r2, r2, #14
 8002146:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_DMA_Abort_IT+0x1dc>)
 8002160:	429a      	cmp	r2, r3
 8002162:	d958      	bls.n	8002216 <HAL_DMA_Abort_IT+0x102>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a62      	ldr	r2, [pc, #392]	; (80022f4 <HAL_DMA_Abort_IT+0x1e0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d04f      	beq.n	800220e <HAL_DMA_Abort_IT+0xfa>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a61      	ldr	r2, [pc, #388]	; (80022f8 <HAL_DMA_Abort_IT+0x1e4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d048      	beq.n	800220a <HAL_DMA_Abort_IT+0xf6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5f      	ldr	r2, [pc, #380]	; (80022fc <HAL_DMA_Abort_IT+0x1e8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d040      	beq.n	8002204 <HAL_DMA_Abort_IT+0xf0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5e      	ldr	r2, [pc, #376]	; (8002300 <HAL_DMA_Abort_IT+0x1ec>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d038      	beq.n	80021fe <HAL_DMA_Abort_IT+0xea>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5c      	ldr	r2, [pc, #368]	; (8002304 <HAL_DMA_Abort_IT+0x1f0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d030      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xe4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a5b      	ldr	r2, [pc, #364]	; (8002308 <HAL_DMA_Abort_IT+0x1f4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d028      	beq.n	80021f2 <HAL_DMA_Abort_IT+0xde>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_DMA_Abort_IT+0x1dc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d020      	beq.n	80021ec <HAL_DMA_Abort_IT+0xd8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_DMA_Abort_IT+0x1f8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d019      	beq.n	80021e8 <HAL_DMA_Abort_IT+0xd4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a55      	ldr	r2, [pc, #340]	; (8002310 <HAL_DMA_Abort_IT+0x1fc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d012      	beq.n	80021e4 <HAL_DMA_Abort_IT+0xd0>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a54      	ldr	r2, [pc, #336]	; (8002314 <HAL_DMA_Abort_IT+0x200>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00a      	beq.n	80021de <HAL_DMA_Abort_IT+0xca>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a52      	ldr	r2, [pc, #328]	; (8002318 <HAL_DMA_Abort_IT+0x204>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d102      	bne.n	80021d8 <HAL_DMA_Abort_IT+0xc4>
 80021d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d6:	e01b      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 80021d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021dc:	e018      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 80021de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e2:	e015      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 80021e4:	2310      	movs	r3, #16
 80021e6:	e013      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e011      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 80021ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f0:	e00e      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 80021f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021f6:	e00b      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 80021f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021fc:	e008      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 80021fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002202:	e005      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 8002204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002208:	e002      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 800220a:	2310      	movs	r3, #16
 800220c:	e000      	b.n	8002210 <HAL_DMA_Abort_IT+0xfc>
 800220e:	2301      	movs	r3, #1
 8002210:	4a42      	ldr	r2, [pc, #264]	; (800231c <HAL_DMA_Abort_IT+0x208>)
 8002212:	6053      	str	r3, [r2, #4]
 8002214:	e057      	b.n	80022c6 <HAL_DMA_Abort_IT+0x1b2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <HAL_DMA_Abort_IT+0x1e0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d04f      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x1ac>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_DMA_Abort_IT+0x1e4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d048      	beq.n	80022bc <HAL_DMA_Abort_IT+0x1a8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_DMA_Abort_IT+0x1e8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d040      	beq.n	80022b6 <HAL_DMA_Abort_IT+0x1a2>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a31      	ldr	r2, [pc, #196]	; (8002300 <HAL_DMA_Abort_IT+0x1ec>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d038      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x19c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a30      	ldr	r2, [pc, #192]	; (8002304 <HAL_DMA_Abort_IT+0x1f0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d030      	beq.n	80022aa <HAL_DMA_Abort_IT+0x196>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <HAL_DMA_Abort_IT+0x1f4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d028      	beq.n	80022a4 <HAL_DMA_Abort_IT+0x190>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_DMA_Abort_IT+0x1dc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d020      	beq.n	800229e <HAL_DMA_Abort_IT+0x18a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2a      	ldr	r2, [pc, #168]	; (800230c <HAL_DMA_Abort_IT+0x1f8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_DMA_Abort_IT+0x186>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a29      	ldr	r2, [pc, #164]	; (8002310 <HAL_DMA_Abort_IT+0x1fc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d012      	beq.n	8002296 <HAL_DMA_Abort_IT+0x182>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a27      	ldr	r2, [pc, #156]	; (8002314 <HAL_DMA_Abort_IT+0x200>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00a      	beq.n	8002290 <HAL_DMA_Abort_IT+0x17c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a26      	ldr	r2, [pc, #152]	; (8002318 <HAL_DMA_Abort_IT+0x204>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d102      	bne.n	800228a <HAL_DMA_Abort_IT+0x176>
 8002284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002288:	e01b      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 800228a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228e:	e018      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 8002290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002294:	e015      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 8002296:	2310      	movs	r3, #16
 8002298:	e013      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 800229a:	2301      	movs	r3, #1
 800229c:	e011      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 800229e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a2:	e00e      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 80022a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022a8:	e00b      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 80022aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ae:	e008      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 80022b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b4:	e005      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 80022b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ba:	e002      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 80022bc:	2310      	movs	r3, #16
 80022be:	e000      	b.n	80022c2 <HAL_DMA_Abort_IT+0x1ae>
 80022c0:	2301      	movs	r3, #1
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_DMA_Abort_IT+0x20c>)
 80022c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
    } 
  }
  return status;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40020080 	.word	0x40020080
 80022f4:	40020008 	.word	0x40020008
 80022f8:	4002001c 	.word	0x4002001c
 80022fc:	40020030 	.word	0x40020030
 8002300:	40020044 	.word	0x40020044
 8002304:	40020058 	.word	0x40020058
 8002308:	4002006c 	.word	0x4002006c
 800230c:	40020408 	.word	0x40020408
 8002310:	4002041c 	.word	0x4002041c
 8002314:	40020430 	.word	0x40020430
 8002318:	40020444 	.word	0x40020444
 800231c:	40020400 	.word	0x40020400
 8002320:	40020000 	.word	0x40020000

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b08b      	sub	sp, #44	; 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002336:	e179      	b.n	800262c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002338:	2201      	movs	r2, #1
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	429a      	cmp	r2, r3
 8002352:	f040 8168 	bne.w	8002626 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a96      	ldr	r2, [pc, #600]	; (80025b4 <HAL_GPIO_Init+0x290>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d05e      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 8002360:	4a94      	ldr	r2, [pc, #592]	; (80025b4 <HAL_GPIO_Init+0x290>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d875      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 8002366:	4a94      	ldr	r2, [pc, #592]	; (80025b8 <HAL_GPIO_Init+0x294>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d058      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 800236c:	4a92      	ldr	r2, [pc, #584]	; (80025b8 <HAL_GPIO_Init+0x294>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d86f      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 8002372:	4a92      	ldr	r2, [pc, #584]	; (80025bc <HAL_GPIO_Init+0x298>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d052      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 8002378:	4a90      	ldr	r2, [pc, #576]	; (80025bc <HAL_GPIO_Init+0x298>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d869      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 800237e:	4a90      	ldr	r2, [pc, #576]	; (80025c0 <HAL_GPIO_Init+0x29c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d04c      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 8002384:	4a8e      	ldr	r2, [pc, #568]	; (80025c0 <HAL_GPIO_Init+0x29c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d863      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 800238a:	4a8e      	ldr	r2, [pc, #568]	; (80025c4 <HAL_GPIO_Init+0x2a0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d046      	beq.n	800241e <HAL_GPIO_Init+0xfa>
 8002390:	4a8c      	ldr	r2, [pc, #560]	; (80025c4 <HAL_GPIO_Init+0x2a0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d85d      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 8002396:	2b12      	cmp	r3, #18
 8002398:	d82a      	bhi.n	80023f0 <HAL_GPIO_Init+0xcc>
 800239a:	2b12      	cmp	r3, #18
 800239c:	d859      	bhi.n	8002452 <HAL_GPIO_Init+0x12e>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <HAL_GPIO_Init+0x80>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	0800241f 	.word	0x0800241f
 80023a8:	080023f9 	.word	0x080023f9
 80023ac:	0800240b 	.word	0x0800240b
 80023b0:	0800244d 	.word	0x0800244d
 80023b4:	08002453 	.word	0x08002453
 80023b8:	08002453 	.word	0x08002453
 80023bc:	08002453 	.word	0x08002453
 80023c0:	08002453 	.word	0x08002453
 80023c4:	08002453 	.word	0x08002453
 80023c8:	08002453 	.word	0x08002453
 80023cc:	08002453 	.word	0x08002453
 80023d0:	08002453 	.word	0x08002453
 80023d4:	08002453 	.word	0x08002453
 80023d8:	08002453 	.word	0x08002453
 80023dc:	08002453 	.word	0x08002453
 80023e0:	08002453 	.word	0x08002453
 80023e4:	08002453 	.word	0x08002453
 80023e8:	08002401 	.word	0x08002401
 80023ec:	08002415 	.word	0x08002415
 80023f0:	4a75      	ldr	r2, [pc, #468]	; (80025c8 <HAL_GPIO_Init+0x2a4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023f6:	e02c      	b.n	8002452 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e029      	b.n	8002454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	3304      	adds	r3, #4
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	e024      	b.n	8002454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	3308      	adds	r3, #8
 8002410:	623b      	str	r3, [r7, #32]
          break;
 8002412:	e01f      	b.n	8002454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	330c      	adds	r3, #12
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e01a      	b.n	8002454 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002426:	2304      	movs	r3, #4
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e013      	b.n	8002454 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002434:	2308      	movs	r3, #8
 8002436:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	611a      	str	r2, [r3, #16]
          break;
 800243e:	e009      	b.n	8002454 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002440:	2308      	movs	r3, #8
 8002442:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	615a      	str	r2, [r3, #20]
          break;
 800244a:	e003      	b.n	8002454 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
          break;
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x130>
          break;
 8002452:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2bff      	cmp	r3, #255	; 0xff
 8002458:	d801      	bhi.n	800245e <HAL_GPIO_Init+0x13a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	e001      	b.n	8002462 <HAL_GPIO_Init+0x13e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2bff      	cmp	r3, #255	; 0xff
 8002468:	d802      	bhi.n	8002470 <HAL_GPIO_Init+0x14c>
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	e002      	b.n	8002476 <HAL_GPIO_Init+0x152>
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	3b08      	subs	r3, #8
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	210f      	movs	r1, #15
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	6a39      	ldr	r1, [r7, #32]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	431a      	orrs	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80c1 	beq.w	8002626 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024a4:	4b49      	ldr	r3, [pc, #292]	; (80025cc <HAL_GPIO_Init+0x2a8>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a48      	ldr	r2, [pc, #288]	; (80025cc <HAL_GPIO_Init+0x2a8>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_GPIO_Init+0x2a8>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024bc:	4a44      	ldr	r2, [pc, #272]	; (80025d0 <HAL_GPIO_Init+0x2ac>)
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3c      	ldr	r2, [pc, #240]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d01f      	beq.n	8002528 <HAL_GPIO_Init+0x204>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3b      	ldr	r2, [pc, #236]	; (80025d8 <HAL_GPIO_Init+0x2b4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d019      	beq.n	8002524 <HAL_GPIO_Init+0x200>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3a      	ldr	r2, [pc, #232]	; (80025dc <HAL_GPIO_Init+0x2b8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <HAL_GPIO_Init+0x1fc>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_GPIO_Init+0x2bc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00d      	beq.n	800251c <HAL_GPIO_Init+0x1f8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a38      	ldr	r2, [pc, #224]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d007      	beq.n	8002518 <HAL_GPIO_Init+0x1f4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a37      	ldr	r2, [pc, #220]	; (80025e8 <HAL_GPIO_Init+0x2c4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_GPIO_Init+0x1f0>
 8002510:	2305      	movs	r3, #5
 8002512:	e00a      	b.n	800252a <HAL_GPIO_Init+0x206>
 8002514:	2306      	movs	r3, #6
 8002516:	e008      	b.n	800252a <HAL_GPIO_Init+0x206>
 8002518:	2304      	movs	r3, #4
 800251a:	e006      	b.n	800252a <HAL_GPIO_Init+0x206>
 800251c:	2303      	movs	r3, #3
 800251e:	e004      	b.n	800252a <HAL_GPIO_Init+0x206>
 8002520:	2302      	movs	r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x206>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_GPIO_Init+0x206>
 8002528:	2300      	movs	r3, #0
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	f002 0203 	and.w	r2, r2, #3
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4093      	lsls	r3, r2
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800253a:	4925      	ldr	r1, [pc, #148]	; (80025d0 <HAL_GPIO_Init+0x2ac>)
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	4924      	ldr	r1, [pc, #144]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	4920      	ldr	r1, [pc, #128]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 800256c:	4013      	ands	r3, r2
 800256e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	491a      	ldr	r1, [pc, #104]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	60cb      	str	r3, [r1, #12]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	4916      	ldr	r1, [pc, #88]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 8002594:	4013      	ands	r3, r2
 8002596:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d025      	beq.n	80025f0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4910      	ldr	r1, [pc, #64]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e025      	b.n	80025fe <HAL_GPIO_Init+0x2da>
 80025b2:	bf00      	nop
 80025b4:	10320000 	.word	0x10320000
 80025b8:	10310000 	.word	0x10310000
 80025bc:	10220000 	.word	0x10220000
 80025c0:	10210000 	.word	0x10210000
 80025c4:	10120000 	.word	0x10120000
 80025c8:	10110000 	.word	0x10110000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40010800 	.word	0x40010800
 80025d8:	40010c00 	.word	0x40010c00
 80025dc:	40011000 	.word	0x40011000
 80025e0:	40011400 	.word	0x40011400
 80025e4:	40011800 	.word	0x40011800
 80025e8:	40011c00 	.word	0x40011c00
 80025ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_GPIO_Init+0x324>)
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	4913      	ldr	r1, [pc, #76]	; (8002648 <HAL_GPIO_Init+0x324>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_GPIO_Init+0x324>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_GPIO_Init+0x324>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
 8002616:	e006      	b.n	8002626 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_GPIO_Init+0x324>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	43db      	mvns	r3, r3
 8002620:	4909      	ldr	r1, [pc, #36]	; (8002648 <HAL_GPIO_Init+0x324>)
 8002622:	4013      	ands	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	f47f ae7e 	bne.w	8002338 <HAL_GPIO_Init+0x14>
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	372c      	adds	r7, #44	; 0x2c
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e272      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8087 	beq.w	80027aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800269c:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d00c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026a8:	4b8f      	ldr	r3, [pc, #572]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d112      	bne.n	80026da <HAL_RCC_OscConfig+0x5e>
 80026b4:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d10b      	bne.n	80026da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d06c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x12c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d168      	bne.n	80027a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e24c      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x76>
 80026e4:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7f      	ldr	r2, [pc, #508]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e02e      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x98>
 80026fa:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b78      	ldr	r3, [pc, #480]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0xbc>
 800271e:	4b72      	ldr	r3, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a71      	ldr	r2, [pc, #452]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 8002738:	4b6b      	ldr	r3, [pc, #428]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6a      	ldr	r2, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b68      	ldr	r3, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a67      	ldr	r2, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe ff4c 	bl	80015f4 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe ff48 	bl	80015f4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e200      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xe4>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe ff38 	bl	80015f4 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe ff34 	bl	80015f4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1ec      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x10c>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b6:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027c2:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x18c>
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x176>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1c0      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4939      	ldr	r1, [pc, #228]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b36      	ldr	r3, [pc, #216]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe feed 	bl	80015f4 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe fee9 	bl	80015f4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1a1      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4927      	ldr	r1, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fecc 	bl	80015f4 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe fec8 	bl	80015f4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e180      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03a      	beq.n	8002900 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d019      	beq.n	80028c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7fe feac 	bl	80015f4 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe fea8 	bl	80015f4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e160      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028be:	2001      	movs	r0, #1
 80028c0:	f000 face 	bl	8002e60 <RCC_Delay>
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fe92 	bl	80015f4 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d2:	e00f      	b.n	80028f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fe fe8e 	bl	80015f4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d908      	bls.n	80028f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e146      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	42420000 	.word	0x42420000
 80028f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b92      	ldr	r3, [pc, #584]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e9      	bne.n	80028d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a6 	beq.w	8002a5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a87      	ldr	r2, [pc, #540]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	61d3      	str	r3, [r2, #28]
 800292a:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2301      	movs	r3, #1
 8002938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b7f      	ldr	r3, [pc, #508]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7e      	ldr	r2, [pc, #504]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7fe fe4f 	bl	80015f4 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7fe fe4b 	bl	80015f4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	; 0x64
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e103      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	4b75      	ldr	r3, [pc, #468]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x312>
 8002980:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a6e      	ldr	r2, [pc, #440]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	e02d      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x334>
 8002996:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a69      	ldr	r2, [pc, #420]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a66      	ldr	r2, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	e01c      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d10c      	bne.n	80029d2 <HAL_RCC_OscConfig+0x356>
 80029b8:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4a5d      	ldr	r2, [pc, #372]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6213      	str	r3, [r2, #32]
 80029d0:	e00b      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 80029d2:	4b5b      	ldr	r3, [pc, #364]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a5a      	ldr	r2, [pc, #360]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d015      	beq.n	8002a1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fdff 	bl	80015f4 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fdfb 	bl	80015f4 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0b1      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ee      	beq.n	80029fa <HAL_RCC_OscConfig+0x37e>
 8002a1c:	e014      	b.n	8002a48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fde9 	bl	80015f4 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fde5 	bl	80015f4 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e09b      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3c:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ee      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a3b      	ldr	r2, [pc, #236]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8087 	beq.w	8002b72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a64:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d061      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d146      	bne.n	8002b06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a78:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fdb9 	bl	80015f4 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fdb5 	bl	80015f4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e06d      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a98:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4921      	ldr	r1, [pc, #132]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a19      	ldr	r1, [r3, #32]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	491b      	ldr	r1, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fd89 	bl	80015f4 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe fd85 	bl	80015f4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e03d      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x46a>
 8002b04:	e035      	b.n	8002b72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_RCC_OscConfig+0x4cc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fd72 	bl	80015f4 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe fd6e 	bl	80015f4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e026      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x498>
 8002b32:	e01e      	b.n	8002b72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e019      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
 8002b48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_OscConfig+0x500>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0d0      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d910      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 0207 	bic.w	r2, r3, #7
 8002baa:	4965      	ldr	r1, [pc, #404]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0b8      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bdc:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002be6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c00:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	494d      	ldr	r1, [pc, #308]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d040      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d115      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e07f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e073      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06b      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b39      	ldr	r3, [pc, #228]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4936      	ldr	r1, [pc, #216]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fcc0 	bl	80015f4 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe fcbc 	bl	80015f4 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e053      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 020c 	and.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1eb      	bne.n	8002c78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d210      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 0207 	bic.w	r2, r3, #7
 8002cb6:	4922      	ldr	r1, [pc, #136]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e032      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4916      	ldr	r1, [pc, #88]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	490e      	ldr	r1, [pc, #56]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d0e:	f000 f821 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	490a      	ldr	r1, [pc, #40]	; (8002d48 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	5ccb      	ldrb	r3, [r1, r3]
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <HAL_RCC_ClockConfig+0x1cc>)
 8002d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_ClockConfig+0x1d0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fc1e 	bl	8001570 <HAL_InitTick>

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40021000 	.word	0x40021000
 8002d48:	08009b54 	.word	0x08009b54
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	20000004 	.word	0x20000004

08002d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d002      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x30>
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x36>
 8002d82:	e027      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCC_GetSysClockFreq+0x98>)
 8002d86:	613b      	str	r3, [r7, #16]
      break;
 8002d88:	e027      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	0c9b      	lsrs	r3, r3, #18
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d94:	5cd3      	ldrb	r3, [r2, r3]
 8002d96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d010      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	0c5b      	lsrs	r3, r3, #17
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <HAL_RCC_GetSysClockFreq+0x98>)
 8002db6:	fb03 f202 	mul.w	r2, r3, r2
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e004      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	613b      	str	r3, [r7, #16]
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetSysClockFreq+0x98>)
 8002dd6:	613b      	str	r3, [r7, #16]
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	693b      	ldr	r3, [r7, #16]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	007a1200 	.word	0x007a1200
 8002df0:	08009b6c 	.word	0x08009b6c
 8002df4:	08009b7c 	.word	0x08009b7c
 8002df8:	003d0900 	.word	0x003d0900

08002dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e00:	4b02      	ldr	r3, [pc, #8]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000000 	.word	0x20000000

08002e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e14:	f7ff fff2 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08009b64 	.word	0x08009b64

08002e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e3c:	f7ff ffde 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	0adb      	lsrs	r3, r3, #11
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08009b64 	.word	0x08009b64

08002e60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <RCC_Delay+0x34>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <RCC_Delay+0x38>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0a5b      	lsrs	r3, r3, #9
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e7c:	bf00      	nop
  }
  while (Delay --);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	60fa      	str	r2, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f9      	bne.n	8002e7c <RCC_Delay+0x1c>
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	20000000 	.word	0x20000000
 8002e98:	10624dd3 	.word	0x10624dd3

08002e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d07d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebc:	4b4f      	ldr	r3, [pc, #316]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	61d3      	str	r3, [r2, #28]
 8002ed4:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b46      	ldr	r3, [pc, #280]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d118      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efc:	f7fe fb7a 	bl	80015f4 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f02:	e008      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f04:	f7fe fb76 	bl	80015f4 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e06d      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f22:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d02e      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d027      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f56:	4a29      	ldr	r2, [pc, #164]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d014      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fb45 	bl	80015f4 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fb41 	bl	80015f4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e036      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0ee      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4917      	ldr	r1, [pc, #92]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	490b      	ldr	r1, [pc, #44]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4904      	ldr	r1, [pc, #16]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	42420440 	.word	0x42420440

08003008 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	2300      	movs	r3, #0
 8003022:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	2b0f      	cmp	r3, #15
 800302a:	f200 80af 	bhi.w	800318c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	0800310b 	.word	0x0800310b
 8003038:	08003171 	.word	0x08003171
 800303c:	0800318d 	.word	0x0800318d
 8003040:	080030fb 	.word	0x080030fb
 8003044:	0800318d 	.word	0x0800318d
 8003048:	0800318d 	.word	0x0800318d
 800304c:	0800318d 	.word	0x0800318d
 8003050:	08003103 	.word	0x08003103
 8003054:	0800318d 	.word	0x0800318d
 8003058:	0800318d 	.word	0x0800318d
 800305c:	0800318d 	.word	0x0800318d
 8003060:	0800318d 	.word	0x0800318d
 8003064:	0800318d 	.word	0x0800318d
 8003068:	0800318d 	.word	0x0800318d
 800306c:	0800318d 	.word	0x0800318d
 8003070:	08003075 	.word	0x08003075
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003074:	4b4a      	ldr	r3, [pc, #296]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800307a:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8084 	beq.w	8003190 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	0c9b      	lsrs	r3, r3, #18
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	4a44      	ldr	r2, [pc, #272]	; (80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0c5b      	lsrs	r3, r3, #17
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	4a3f      	ldr	r2, [pc, #252]	; (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e004      	b.n	80030d6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80030d0:	fb02 f303 	mul.w	r3, r2, r3
 80030d4:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80030d6:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e2:	d102      	bne.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80030e8:	e052      	b.n	8003190 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	61bb      	str	r3, [r7, #24]
      break;
 80030f8:	e04a      	b.n	8003190 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80030fa:	f7ff fe2b 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 80030fe:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003100:	e049      	b.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003102:	f7ff fe27 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 8003106:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003108:	e045      	b.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311a:	d108      	bne.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8003126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	e01f      	b.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003138:	d109      	bne.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8003146:	f649 4340 	movw	r3, #40000	; 0x9c40
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e00f      	b.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003158:	d11c      	bne.n	8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8003166:	f24f 4324 	movw	r3, #62500	; 0xf424
 800316a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800316c:	e012      	b.n	8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800316e:	e011      	b.n	8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003170:	f7ff fe62 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0b9b      	lsrs	r3, r3, #14
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	3301      	adds	r3, #1
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	61bb      	str	r3, [r7, #24]
      break;
 800318a:	e004      	b.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800318c:	bf00      	nop
 800318e:	e002      	b.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003190:	bf00      	nop
 8003192:	e000      	b.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003194:	bf00      	nop
    }
  }
  return (frequency);
 8003196:	69bb      	ldr	r3, [r7, #24]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08009b80 	.word	0x08009b80
 80031a8:	08009b90 	.word	0x08009b90
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	003d0900 	.word	0x003d0900
 80031b4:	aaaaaaab 	.word	0xaaaaaaab

080031b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e042      	b.n	8003250 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe f83e 	bl	8001260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fd71 	bl	8003ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d16d      	bne.n	8003354 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Transmit+0x2c>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e066      	b.n	8003356 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2221      	movs	r2, #33	; 0x21
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003296:	f7fe f9ad 	bl	80015f4 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	d108      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e003      	b.n	80032cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032cc:	e02a      	b.n	8003324 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 faf9 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e036      	b.n	8003356 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10b      	bne.n	8003306 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	3302      	adds	r3, #2
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	e007      	b.n	8003316 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	3301      	adds	r3, #1
 8003314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1cf      	bne.n	80032ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	2140      	movs	r1, #64	; 0x40
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fac9 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e006      	b.n	8003356 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b0ba      	sub	sp, #232	; 0xe8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800339e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_UART_IRQHandler+0x66>
 80033b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fbd1 	bl	8003b66 <UART_Receive_IT>
      return;
 80033c4:	e25b      	b.n	800387e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80de 	beq.w	800358c <HAL_UART_IRQHandler+0x22c>
 80033d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d106      	bne.n	80033ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80d1 	beq.w	800358c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_UART_IRQHandler+0xae>
 80033f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_UART_IRQHandler+0xd2>
 800341a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f043 0202 	orr.w	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_UART_IRQHandler+0xf6>
 800343e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f043 0204 	orr.w	r2, r3, #4
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d011      	beq.n	8003486 <HAL_UART_IRQHandler+0x126>
 8003462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800346e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f043 0208 	orr.w	r2, r3, #8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 81f2 	beq.w	8003874 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_UART_IRQHandler+0x14e>
 800349c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fb5c 	bl	8003b66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HAL_UART_IRQHandler+0x17a>
 80034d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d04f      	beq.n	800357a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa66 	bl	80039ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d041      	beq.n	8003572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3314      	adds	r3, #20
 80034f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3314      	adds	r3, #20
 8003516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800351a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800351e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1d9      	bne.n	80034ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d013      	beq.n	800356a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	4a7e      	ldr	r2, [pc, #504]	; (8003740 <HAL_UART_IRQHandler+0x3e0>)
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe fde0 	bl	8002114 <HAL_DMA_Abort_IT>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003564:	4610      	mov	r0, r2
 8003566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	e00e      	b.n	8003588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f99c 	bl	80038a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	e00a      	b.n	8003588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f998 	bl	80038a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	e006      	b.n	8003588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f994 	bl	80038a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003586:	e175      	b.n	8003874 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003588:	bf00      	nop
    return;
 800358a:	e173      	b.n	8003874 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	2b01      	cmp	r3, #1
 8003592:	f040 814f 	bne.w	8003834 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8148 	beq.w	8003834 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8141 	beq.w	8003834 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80b6 	beq.w	8003744 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8145 	beq.w	8003878 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035f6:	429a      	cmp	r2, r3
 80035f8:	f080 813e 	bcs.w	8003878 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003602:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b20      	cmp	r3, #32
 800360c:	f000 8088 	beq.w	8003720 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003626:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800362a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800362e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	330c      	adds	r3, #12
 8003638:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800363c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003648:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1d9      	bne.n	8003610 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3314      	adds	r3, #20
 8003662:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800366c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003680:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003684:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003688:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e1      	bne.n	800365c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3314      	adds	r3, #20
 800369e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3314      	adds	r3, #20
 80036b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e3      	bne.n	8003698 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f0:	f023 0310 	bic.w	r3, r3, #16
 80036f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003702:	65ba      	str	r2, [r7, #88]	; 0x58
 8003704:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e3      	bne.n	80036de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fcbf 	bl	800209e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372e:	b29b      	uxth	r3, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	b29b      	uxth	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8bf 	bl	80038ba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800373c:	e09c      	b.n	8003878 <HAL_UART_IRQHandler+0x518>
 800373e:	bf00      	nop
 8003740:	08003a71 	.word	0x08003a71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800374c:	b29b      	uxth	r3, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 808e 	beq.w	800387c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8089 	beq.w	800387c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800378e:	647a      	str	r2, [r7, #68]	; 0x44
 8003790:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e3      	bne.n	800376a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3314      	adds	r3, #20
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	623b      	str	r3, [r7, #32]
   return(result);
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037c6:	633a      	str	r2, [r7, #48]	; 0x30
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e3      	bne.n	80037a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0310 	bic.w	r3, r3, #16
 80037fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800380c:	61fa      	str	r2, [r7, #28]
 800380e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	617b      	str	r3, [r7, #20]
   return(result);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e3      	bne.n	80037e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003826:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800382a:	4619      	mov	r1, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f844 	bl	80038ba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003832:	e023      	b.n	800387c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <HAL_UART_IRQHandler+0x4f4>
 8003840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f923 	bl	8003a98 <UART_Transmit_IT>
    return;
 8003852:	e014      	b.n	800387e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00e      	beq.n	800387e <HAL_UART_IRQHandler+0x51e>
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f962 	bl	8003b36 <UART_EndTransmit_IT>
    return;
 8003872:	e004      	b.n	800387e <HAL_UART_IRQHandler+0x51e>
    return;
 8003874:	bf00      	nop
 8003876:	e002      	b.n	800387e <HAL_UART_IRQHandler+0x51e>
      return;
 8003878:	bf00      	nop
 800387a:	e000      	b.n	800387e <HAL_UART_IRQHandler+0x51e>
      return;
 800387c:	bf00      	nop
  }
}
 800387e:	37e8      	adds	r7, #232	; 0xe8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b090      	sub	sp, #64	; 0x40
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e0:	e050      	b.n	8003984 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d04c      	beq.n	8003984 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <UART_WaitOnFlagUntilTimeout+0x30>
 80038f0:	f7fd fe80 	bl	80015f4 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d241      	bcs.n	8003984 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003920:	637a      	str	r2, [r7, #52]	; 0x34
 8003922:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e5      	bne.n	8003900 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	613b      	str	r3, [r7, #16]
   return(result);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003954:	623a      	str	r2, [r7, #32]
 8003956:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	69f9      	ldr	r1, [r7, #28]
 800395a:	6a3a      	ldr	r2, [r7, #32]
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	61bb      	str	r3, [r7, #24]
   return(result);
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e5      	bne.n	8003934 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e00f      	b.n	80039a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4013      	ands	r3, r2
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d09f      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3740      	adds	r7, #64	; 0x40
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b095      	sub	sp, #84	; 0x54
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d4:	643a      	str	r2, [r7, #64]	; 0x40
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3314      	adds	r3, #20
 80039ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3314      	adds	r3, #20
 8003a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e5      	bne.n	80039e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d119      	bne.n	8003a58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f023 0310 	bic.w	r3, r3, #16
 8003a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a44:	61ba      	str	r2, [r7, #24]
 8003a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	613b      	str	r3, [r7, #16]
   return(result);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a66:	bf00      	nop
 8003a68:	3754      	adds	r7, #84	; 0x54
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff ff0c 	bl	80038a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b21      	cmp	r3, #33	; 0x21
 8003aaa:	d13e      	bne.n	8003b2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab4:	d114      	bne.n	8003ae0 <UART_Transmit_IT+0x48>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d110      	bne.n	8003ae0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	1c9a      	adds	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	621a      	str	r2, [r3, #32]
 8003ade:	e008      	b.n	8003af2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	1c59      	adds	r1, r3, #1
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6211      	str	r1, [r2, #32]
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4619      	mov	r1, r3
 8003b00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10f      	bne.n	8003b26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fe94 	bl	8003884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b08c      	sub	sp, #48	; 0x30
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b22      	cmp	r3, #34	; 0x22
 8003b78:	f040 80ae 	bne.w	8003cd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b84:	d117      	bne.n	8003bb6 <UART_Receive_IT+0x50>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d113      	bne.n	8003bb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	1c9a      	adds	r2, r3, #2
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb4:	e026      	b.n	8003c04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d007      	beq.n	8003bda <UART_Receive_IT+0x74>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <UART_Receive_IT+0x82>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	e008      	b.n	8003bfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	4619      	mov	r1, r3
 8003c12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d15d      	bne.n	8003cd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0220 	bic.w	r2, r2, #32
 8003c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d135      	bne.n	8003cca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	613b      	str	r3, [r7, #16]
   return(result);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f023 0310 	bic.w	r3, r3, #16
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c84:	623a      	str	r2, [r7, #32]
 8003c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	69f9      	ldr	r1, [r7, #28]
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d10a      	bne.n	8003cbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fdf9 	bl	80038ba <HAL_UARTEx_RxEventCallback>
 8003cc8:	e002      	b.n	8003cd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff fde3 	bl	8003896 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e002      	b.n	8003cda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e000      	b.n	8003cda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cd8:	2302      	movs	r3, #2
  }
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3730      	adds	r7, #48	; 0x30
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d1e:	f023 030c 	bic.w	r3, r3, #12
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2c      	ldr	r2, [pc, #176]	; (8003df8 <UART_SetConfig+0x114>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d103      	bne.n	8003d54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d4c:	f7ff f874 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	e002      	b.n	8003d5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d54:	f7ff f85c 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8003d58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <UART_SetConfig+0x118>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	0119      	lsls	r1, r3, #4
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009a      	lsls	r2, r3, #2
 8003d84:	441a      	add	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <UART_SetConfig+0x118>)
 8003d92:	fba3 0302 	umull	r0, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2064      	movs	r0, #100	; 0x64
 8003d9a:	fb00 f303 	mul.w	r3, r0, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	3332      	adds	r3, #50	; 0x32
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <UART_SetConfig+0x118>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db0:	4419      	add	r1, r3
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009a      	lsls	r2, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <UART_SetConfig+0x118>)
 8003dca:	fba3 0302 	umull	r0, r3, r3, r2
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2064      	movs	r0, #100	; 0x64
 8003dd2:	fb00 f303 	mul.w	r3, r0, r3
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	3332      	adds	r3, #50	; 0x32
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <UART_SetConfig+0x118>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	f003 020f 	and.w	r2, r3, #15
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	440a      	add	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40013800 	.word	0x40013800
 8003dfc:	51eb851f 	.word	0x51eb851f

08003e00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e12:	2b84      	cmp	r3, #132	; 0x84
 8003e14:	d005      	beq.n	8003e22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3303      	adds	r3, #3
 8003e20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e32:	f000 fad1 	bl	80043d8 <vTaskStartScheduler>
  
  return osOK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	b089      	sub	sp, #36	; 0x24
 8003e40:	af04      	add	r7, sp, #16
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d020      	beq.n	8003e90 <osThreadCreate+0x54>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01c      	beq.n	8003e90 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685c      	ldr	r4, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681d      	ldr	r5, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691e      	ldr	r6, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ffc9 	bl	8003e00 <makeFreeRtosPriority>
 8003e6e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e78:	9202      	str	r2, [sp, #8]
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	9100      	str	r1, [sp, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	4632      	mov	r2, r6
 8003e82:	4629      	mov	r1, r5
 8003e84:	4620      	mov	r0, r4
 8003e86:	f000 f8e8 	bl	800405a <xTaskCreateStatic>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	e01c      	b.n	8003eca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685c      	ldr	r4, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e9c:	b29e      	uxth	r6, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ffab 	bl	8003e00 <makeFreeRtosPriority>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f107 030c 	add.w	r3, r7, #12
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	9200      	str	r2, [sp, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	4632      	mov	r2, r6
 8003eb8:	4629      	mov	r1, r5
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f000 f929 	bl	8004112 <xTaskCreate>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d001      	beq.n	8003eca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e000      	b.n	8003ecc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ed4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <osDelay+0x16>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	e000      	b.n	8003eec <osDelay+0x18>
 8003eea:	2301      	movs	r3, #1
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fa3f 	bl	8004370 <vTaskDelay>
  
  return osOK;
 8003ef2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 0208 	add.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f103 0208 	add.w	r2, r3, #8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f103 0208 	add.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr

08003f3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	601a      	str	r2, [r3, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d103      	bne.n	8003fb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	e00c      	b.n	8003fd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3308      	adds	r3, #8
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e002      	b.n	8003fc6 <vListInsert+0x2e>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d2f6      	bcs.n	8003fc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6892      	ldr	r2, [r2, #8]
 800401e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6852      	ldr	r2, [r2, #4]
 8004028:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	429a      	cmp	r2, r3
 8004032:	d103      	bne.n	800403c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	1e5a      	subs	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08e      	sub	sp, #56	; 0x38
 800405e:	af04      	add	r7, sp, #16
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <xTaskCreateStatic+0x46>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	61fb      	str	r3, [r7, #28]
}
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040a0:	2354      	movs	r3, #84	; 0x54
 80040a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b54      	cmp	r3, #84	; 0x54
 80040a8:	d00a      	beq.n	80040c0 <xTaskCreateStatic+0x66>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	61bb      	str	r3, [r7, #24]
}
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01e      	beq.n	8004104 <xTaskCreateStatic+0xaa>
 80040c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01b      	beq.n	8004104 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040de:	2300      	movs	r3, #0
 80040e0:	9303      	str	r3, [sp, #12]
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	9302      	str	r3, [sp, #8]
 80040e6:	f107 0314 	add.w	r3, r7, #20
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f850 	bl	800419c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040fe:	f000 f8cd 	bl	800429c <prvAddNewTaskToReadyList>
 8004102:	e001      	b.n	8004108 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004108:	697b      	ldr	r3, [r7, #20]
	}
 800410a:	4618      	mov	r0, r3
 800410c:	3728      	adds	r7, #40	; 0x28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004112:	b580      	push	{r7, lr}
 8004114:	b08c      	sub	sp, #48	; 0x30
 8004116:	af04      	add	r7, sp, #16
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fe8a 	bl	8004e40 <pvPortMalloc>
 800412c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004134:	2054      	movs	r0, #84	; 0x54
 8004136:	f000 fe83 	bl	8004e40 <pvPortMalloc>
 800413a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
 8004148:	e005      	b.n	8004156 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800414a:	6978      	ldr	r0, [r7, #20]
 800414c:	f000 ff3c 	bl	8004fc8 <vPortFree>
 8004150:	e001      	b.n	8004156 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d017      	beq.n	800418c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004164:	88fa      	ldrh	r2, [r7, #6]
 8004166:	2300      	movs	r3, #0
 8004168:	9303      	str	r3, [sp, #12]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	9302      	str	r3, [sp, #8]
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f80e 	bl	800419c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004180:	69f8      	ldr	r0, [r7, #28]
 8004182:	f000 f88b 	bl	800429c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004186:	2301      	movs	r3, #1
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e002      	b.n	8004192 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
 8004190:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004192:	69bb      	ldr	r3, [r7, #24]
	}
 8004194:	4618      	mov	r0, r3
 8004196:	3720      	adds	r7, #32
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041b4:	3b01      	subs	r3, #1
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	617b      	str	r3, [r7, #20]
}
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	e012      	b.n	8004210 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	7819      	ldrb	r1, [r3, #0]
 80041f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	3334      	adds	r3, #52	; 0x34
 80041fa:	460a      	mov	r2, r1
 80041fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d006      	beq.n	8004218 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3301      	adds	r3, #1
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	2b0f      	cmp	r3, #15
 8004214:	d9e9      	bls.n	80041ea <prvInitialiseNewTask+0x4e>
 8004216:	e000      	b.n	800421a <prvInitialiseNewTask+0x7e>
		{
			break;
 8004218:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	2b06      	cmp	r3, #6
 8004226:	d901      	bls.n	800422c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004228:	2306      	movs	r3, #6
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004236:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	2200      	movs	r2, #0
 800423c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	3304      	adds	r3, #4
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fe79 	bl	8003f3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	3318      	adds	r3, #24
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fe74 	bl	8003f3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004256:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	f1c3 0207 	rsb	r2, r3, #7
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004266:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	2200      	movs	r2, #0
 800426c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	68f9      	ldr	r1, [r7, #12]
 800427a:	69b8      	ldr	r0, [r7, #24]
 800427c:	f000 fc2c 	bl	8004ad8 <pxPortInitialiseStack>
 8004280:	4602      	mov	r2, r0
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004292:	bf00      	nop
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042a4:	f000 fd0a 	bl	8004cbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042a8:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <prvAddNewTaskToReadyList+0xb8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	4a29      	ldr	r2, [pc, #164]	; (8004354 <prvAddNewTaskToReadyList+0xb8>)
 80042b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042b2:	4b29      	ldr	r3, [pc, #164]	; (8004358 <prvAddNewTaskToReadyList+0xbc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042ba:	4a27      	ldr	r2, [pc, #156]	; (8004358 <prvAddNewTaskToReadyList+0xbc>)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042c0:	4b24      	ldr	r3, [pc, #144]	; (8004354 <prvAddNewTaskToReadyList+0xb8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d110      	bne.n	80042ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042c8:	f000 fac0 	bl	800484c <prvInitialiseTaskLists>
 80042cc:	e00d      	b.n	80042ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <prvAddNewTaskToReadyList+0xc0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042d6:	4b20      	ldr	r3, [pc, #128]	; (8004358 <prvAddNewTaskToReadyList+0xbc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d802      	bhi.n	80042ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042e4:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <prvAddNewTaskToReadyList+0xbc>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042ea:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <prvAddNewTaskToReadyList+0xc4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <prvAddNewTaskToReadyList+0xc4>)
 80042f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <prvAddNewTaskToReadyList+0xc8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4313      	orrs	r3, r2
 8004302:	4a18      	ldr	r2, [pc, #96]	; (8004364 <prvAddNewTaskToReadyList+0xc8>)
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4a15      	ldr	r2, [pc, #84]	; (8004368 <prvAddNewTaskToReadyList+0xcc>)
 8004314:	441a      	add	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f7ff fe18 	bl	8003f52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004322:	f000 fcfb 	bl	8004d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <prvAddNewTaskToReadyList+0xc0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00e      	beq.n	800434c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <prvAddNewTaskToReadyList+0xbc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	429a      	cmp	r2, r3
 800433a:	d207      	bcs.n	800434c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <prvAddNewTaskToReadyList+0xd0>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200005e0 	.word	0x200005e0
 8004358:	200004e0 	.word	0x200004e0
 800435c:	200005ec 	.word	0x200005ec
 8004360:	200005fc 	.word	0x200005fc
 8004364:	200005e8 	.word	0x200005e8
 8004368:	200004e4 	.word	0x200004e4
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d017      	beq.n	80043b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <vTaskDelay+0x60>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <vTaskDelay+0x30>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	60bb      	str	r3, [r7, #8]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043a0:	f000 f87a 	bl	8004498 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043a4:	2100      	movs	r1, #0
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fb30 	bl	8004a0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043ac:	f000 f882 	bl	80044b4 <xTaskResumeAll>
 80043b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <vTaskDelay+0x64>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20000608 	.word	0x20000608
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043e6:	463a      	mov	r2, r7
 80043e8:	1d39      	adds	r1, r7, #4
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fc fc82 	bl	8000cf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	9202      	str	r2, [sp, #8]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	2300      	movs	r3, #0
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2300      	movs	r3, #0
 8004404:	460a      	mov	r2, r1
 8004406:	491e      	ldr	r1, [pc, #120]	; (8004480 <vTaskStartScheduler+0xa8>)
 8004408:	481e      	ldr	r0, [pc, #120]	; (8004484 <vTaskStartScheduler+0xac>)
 800440a:	f7ff fe26 	bl	800405a <xTaskCreateStatic>
 800440e:	4603      	mov	r3, r0
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <vTaskStartScheduler+0xb0>)
 8004412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004414:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <vTaskStartScheduler+0xb0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800441c:	2301      	movs	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e001      	b.n	8004426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d116      	bne.n	800445a <vTaskStartScheduler+0x82>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	613b      	str	r3, [r7, #16]
}
 800443e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <vTaskStartScheduler+0xb4>)
 8004442:	f04f 32ff 	mov.w	r2, #4294967295
 8004446:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004448:	4b11      	ldr	r3, [pc, #68]	; (8004490 <vTaskStartScheduler+0xb8>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800444e:	4b11      	ldr	r3, [pc, #68]	; (8004494 <vTaskStartScheduler+0xbc>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004454:	f000 fbc0 	bl	8004bd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004458:	e00e      	b.n	8004478 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d10a      	bne.n	8004478 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	60fb      	str	r3, [r7, #12]
}
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <vTaskStartScheduler+0x9e>
}
 8004478:	bf00      	nop
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	08009b4c 	.word	0x08009b4c
 8004484:	0800481d 	.word	0x0800481d
 8004488:	20000604 	.word	0x20000604
 800448c:	20000600 	.word	0x20000600
 8004490:	200005ec 	.word	0x200005ec
 8004494:	200005e4 	.word	0x200005e4

08004498 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <vTaskSuspendAll+0x18>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	4a03      	ldr	r2, [pc, #12]	; (80044b0 <vTaskSuspendAll+0x18>)
 80044a4:	6013      	str	r3, [r2, #0]
}
 80044a6:	bf00      	nop
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000608 	.word	0x20000608

080044b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <xTaskResumeAll+0x114>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10a      	bne.n	80044e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	603b      	str	r3, [r7, #0]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044e0:	f000 fbec 	bl	8004cbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044e4:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <xTaskResumeAll+0x114>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	4a37      	ldr	r2, [pc, #220]	; (80045c8 <xTaskResumeAll+0x114>)
 80044ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <xTaskResumeAll+0x114>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d161      	bne.n	80045ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044f6:	4b35      	ldr	r3, [pc, #212]	; (80045cc <xTaskResumeAll+0x118>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d05d      	beq.n	80045ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044fe:	e02e      	b.n	800455e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004500:	4b33      	ldr	r3, [pc, #204]	; (80045d0 <xTaskResumeAll+0x11c>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3318      	adds	r3, #24
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fd7b 	bl	8004008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3304      	adds	r3, #4
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fd76 	bl	8004008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	2201      	movs	r2, #1
 8004522:	409a      	lsls	r2, r3
 8004524:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <xTaskResumeAll+0x120>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4313      	orrs	r3, r2
 800452a:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <xTaskResumeAll+0x120>)
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <xTaskResumeAll+0x124>)
 800453c:	441a      	add	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f7ff fd04 	bl	8003f52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	4b23      	ldr	r3, [pc, #140]	; (80045dc <xTaskResumeAll+0x128>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	429a      	cmp	r2, r3
 8004556:	d302      	bcc.n	800455e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004558:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <xTaskResumeAll+0x12c>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800455e:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <xTaskResumeAll+0x11c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1cc      	bne.n	8004500 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800456c:	f000 fa0c 	bl	8004988 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004570:	4b1c      	ldr	r3, [pc, #112]	; (80045e4 <xTaskResumeAll+0x130>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800457c:	f000 f836 	bl	80045ec <xTaskIncrementTick>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004586:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <xTaskResumeAll+0x12c>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3b01      	subs	r3, #1
 8004590:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f1      	bne.n	800457c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004598:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <xTaskResumeAll+0x130>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800459e:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <xTaskResumeAll+0x12c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045a6:	2301      	movs	r3, #1
 80045a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <xTaskResumeAll+0x134>)
 80045ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045ba:	f000 fbaf 	bl	8004d1c <vPortExitCritical>

	return xAlreadyYielded;
 80045be:	68bb      	ldr	r3, [r7, #8]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000608 	.word	0x20000608
 80045cc:	200005e0 	.word	0x200005e0
 80045d0:	200005a0 	.word	0x200005a0
 80045d4:	200005e8 	.word	0x200005e8
 80045d8:	200004e4 	.word	0x200004e4
 80045dc:	200004e0 	.word	0x200004e0
 80045e0:	200005f4 	.word	0x200005f4
 80045e4:	200005f0 	.word	0x200005f0
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f6:	4b51      	ldr	r3, [pc, #324]	; (800473c <xTaskIncrementTick+0x150>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 808d 	bne.w	800471a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004600:	4b4f      	ldr	r3, [pc, #316]	; (8004740 <xTaskIncrementTick+0x154>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004608:	4a4d      	ldr	r2, [pc, #308]	; (8004740 <xTaskIncrementTick+0x154>)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d120      	bne.n	8004656 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004614:	4b4b      	ldr	r3, [pc, #300]	; (8004744 <xTaskIncrementTick+0x158>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <xTaskIncrementTick+0x48>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	603b      	str	r3, [r7, #0]
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <xTaskIncrementTick+0x46>
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <xTaskIncrementTick+0x158>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	4b43      	ldr	r3, [pc, #268]	; (8004748 <xTaskIncrementTick+0x15c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a41      	ldr	r2, [pc, #260]	; (8004744 <xTaskIncrementTick+0x158>)
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	4a41      	ldr	r2, [pc, #260]	; (8004748 <xTaskIncrementTick+0x15c>)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b40      	ldr	r3, [pc, #256]	; (800474c <xTaskIncrementTick+0x160>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3301      	adds	r3, #1
 800464e:	4a3f      	ldr	r2, [pc, #252]	; (800474c <xTaskIncrementTick+0x160>)
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	f000 f999 	bl	8004988 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004656:	4b3e      	ldr	r3, [pc, #248]	; (8004750 <xTaskIncrementTick+0x164>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	429a      	cmp	r2, r3
 800465e:	d34d      	bcc.n	80046fc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004660:	4b38      	ldr	r3, [pc, #224]	; (8004744 <xTaskIncrementTick+0x158>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <xTaskIncrementTick+0x82>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <xTaskIncrementTick+0x84>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004674:	4b36      	ldr	r3, [pc, #216]	; (8004750 <xTaskIncrementTick+0x164>)
 8004676:	f04f 32ff 	mov.w	r2, #4294967295
 800467a:	601a      	str	r2, [r3, #0]
					break;
 800467c:	e03e      	b.n	80046fc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800467e:	4b31      	ldr	r3, [pc, #196]	; (8004744 <xTaskIncrementTick+0x158>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	429a      	cmp	r2, r3
 8004694:	d203      	bcs.n	800469e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004696:	4a2e      	ldr	r2, [pc, #184]	; (8004750 <xTaskIncrementTick+0x164>)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6013      	str	r3, [r2, #0]
						break;
 800469c:	e02e      	b.n	80046fc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fcb0 	bl	8004008 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	3318      	adds	r3, #24
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff fca7 	bl	8004008 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	2201      	movs	r2, #1
 80046c0:	409a      	lsls	r2, r3
 80046c2:	4b24      	ldr	r3, [pc, #144]	; (8004754 <xTaskIncrementTick+0x168>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	4a22      	ldr	r2, [pc, #136]	; (8004754 <xTaskIncrementTick+0x168>)
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <xTaskIncrementTick+0x16c>)
 80046da:	441a      	add	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f7ff fc35 	bl	8003f52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <xTaskIncrementTick+0x170>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d3b4      	bcc.n	8004660 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046fa:	e7b1      	b.n	8004660 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046fc:	4b17      	ldr	r3, [pc, #92]	; (800475c <xTaskIncrementTick+0x170>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	4915      	ldr	r1, [pc, #84]	; (8004758 <xTaskIncrementTick+0x16c>)
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d907      	bls.n	8004724 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e004      	b.n	8004724 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <xTaskIncrementTick+0x174>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	4a0f      	ldr	r2, [pc, #60]	; (8004760 <xTaskIncrementTick+0x174>)
 8004722:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <xTaskIncrementTick+0x178>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800472c:	2301      	movs	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004730:	697b      	ldr	r3, [r7, #20]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000608 	.word	0x20000608
 8004740:	200005e4 	.word	0x200005e4
 8004744:	20000598 	.word	0x20000598
 8004748:	2000059c 	.word	0x2000059c
 800474c:	200005f8 	.word	0x200005f8
 8004750:	20000600 	.word	0x20000600
 8004754:	200005e8 	.word	0x200005e8
 8004758:	200004e4 	.word	0x200004e4
 800475c:	200004e0 	.word	0x200004e0
 8004760:	200005f0 	.word	0x200005f0
 8004764:	200005f4 	.word	0x200005f4

08004768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800476e:	4b26      	ldr	r3, [pc, #152]	; (8004808 <vTaskSwitchContext+0xa0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004776:	4b25      	ldr	r3, [pc, #148]	; (800480c <vTaskSwitchContext+0xa4>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800477c:	e03f      	b.n	80047fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <vTaskSwitchContext+0xa4>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <vTaskSwitchContext+0xa8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	fab3 f383 	clz	r3, r3
 8004790:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004792:	7afb      	ldrb	r3, [r7, #11]
 8004794:	f1c3 031f 	rsb	r3, r3, #31
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	491e      	ldr	r1, [pc, #120]	; (8004814 <vTaskSwitchContext+0xac>)
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	607b      	str	r3, [r7, #4]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <vTaskSwitchContext+0x5a>
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4a11      	ldr	r2, [pc, #68]	; (8004814 <vTaskSwitchContext+0xac>)
 80047d0:	4413      	add	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3308      	adds	r3, #8
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d104      	bne.n	80047f4 <vTaskSwitchContext+0x8c>
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	4a07      	ldr	r2, [pc, #28]	; (8004818 <vTaskSwitchContext+0xb0>)
 80047fc:	6013      	str	r3, [r2, #0]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	20000608 	.word	0x20000608
 800480c:	200005f4 	.word	0x200005f4
 8004810:	200005e8 	.word	0x200005e8
 8004814:	200004e4 	.word	0x200004e4
 8004818:	200004e0 	.word	0x200004e0

0800481c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004824:	f000 f852 	bl	80048cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <prvIdleTask+0x28>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d9f9      	bls.n	8004824 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <prvIdleTask+0x2c>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004840:	e7f0      	b.n	8004824 <prvIdleTask+0x8>
 8004842:	bf00      	nop
 8004844:	200004e4 	.word	0x200004e4
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	e00c      	b.n	8004872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <prvInitialiseTaskLists+0x60>)
 8004864:	4413      	add	r3, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fb48 	bl	8003efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3301      	adds	r3, #1
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b06      	cmp	r3, #6
 8004876:	d9ef      	bls.n	8004858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004878:	480d      	ldr	r0, [pc, #52]	; (80048b0 <prvInitialiseTaskLists+0x64>)
 800487a:	f7ff fb3f 	bl	8003efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800487e:	480d      	ldr	r0, [pc, #52]	; (80048b4 <prvInitialiseTaskLists+0x68>)
 8004880:	f7ff fb3c 	bl	8003efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004884:	480c      	ldr	r0, [pc, #48]	; (80048b8 <prvInitialiseTaskLists+0x6c>)
 8004886:	f7ff fb39 	bl	8003efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800488a:	480c      	ldr	r0, [pc, #48]	; (80048bc <prvInitialiseTaskLists+0x70>)
 800488c:	f7ff fb36 	bl	8003efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004890:	480b      	ldr	r0, [pc, #44]	; (80048c0 <prvInitialiseTaskLists+0x74>)
 8004892:	f7ff fb33 	bl	8003efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <prvInitialiseTaskLists+0x78>)
 8004898:	4a05      	ldr	r2, [pc, #20]	; (80048b0 <prvInitialiseTaskLists+0x64>)
 800489a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <prvInitialiseTaskLists+0x7c>)
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <prvInitialiseTaskLists+0x68>)
 80048a0:	601a      	str	r2, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	200004e4 	.word	0x200004e4
 80048b0:	20000570 	.word	0x20000570
 80048b4:	20000584 	.word	0x20000584
 80048b8:	200005a0 	.word	0x200005a0
 80048bc:	200005b4 	.word	0x200005b4
 80048c0:	200005cc 	.word	0x200005cc
 80048c4:	20000598 	.word	0x20000598
 80048c8:	2000059c 	.word	0x2000059c

080048cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048d2:	e019      	b.n	8004908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048d4:	f000 f9f2 	bl	8004cbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <prvCheckTasksWaitingTermination+0x50>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fb8f 	bl	8004008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <prvCheckTasksWaitingTermination+0x54>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <prvCheckTasksWaitingTermination+0x54>)
 80048f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <prvCheckTasksWaitingTermination+0x58>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	4a0a      	ldr	r2, [pc, #40]	; (8004924 <prvCheckTasksWaitingTermination+0x58>)
 80048fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048fe:	f000 fa0d 	bl	8004d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f810 	bl	8004928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <prvCheckTasksWaitingTermination+0x58>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e1      	bne.n	80048d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200005b4 	.word	0x200005b4
 8004920:	200005e0 	.word	0x200005e0
 8004924:	200005c8 	.word	0x200005c8

08004928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004936:	2b00      	cmp	r3, #0
 8004938:	d108      	bne.n	800494c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb42 	bl	8004fc8 <vPortFree>
				vPortFree( pxTCB );
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fb3f 	bl	8004fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800494a:	e018      	b.n	800497e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004952:	2b01      	cmp	r3, #1
 8004954:	d103      	bne.n	800495e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fb36 	bl	8004fc8 <vPortFree>
	}
 800495c:	e00f      	b.n	800497e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004964:	2b02      	cmp	r3, #2
 8004966:	d00a      	beq.n	800497e <prvDeleteTCB+0x56>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	60fb      	str	r3, [r7, #12]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <prvDeleteTCB+0x54>
	}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <prvResetNextTaskUnblockTime+0x40>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <prvResetNextTaskUnblockTime+0x14>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <prvResetNextTaskUnblockTime+0x16>
 800499c:	2300      	movs	r3, #0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <prvResetNextTaskUnblockTime+0x44>)
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295
 80049a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049aa:	e008      	b.n	80049be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <prvResetNextTaskUnblockTime+0x40>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4a04      	ldr	r2, [pc, #16]	; (80049cc <prvResetNextTaskUnblockTime+0x44>)
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	20000598 	.word	0x20000598
 80049cc:	20000600 	.word	0x20000600

080049d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <xTaskGetSchedulerState+0x34>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049de:	2301      	movs	r3, #1
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	e008      	b.n	80049f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e4:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <xTaskGetSchedulerState+0x38>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049ec:	2302      	movs	r3, #2
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	e001      	b.n	80049f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049f6:	687b      	ldr	r3, [r7, #4]
	}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	200005ec 	.word	0x200005ec
 8004a08:	20000608 	.word	0x20000608

08004a0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a1c:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff faf0 	bl	8004008 <uxListRemove>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004a2e:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	2201      	movs	r2, #1
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4013      	ands	r3, r2
 8004a42:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d10a      	bne.n	8004a64 <prvAddCurrentTaskToDelayedList+0x58>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a54:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	481a      	ldr	r0, [pc, #104]	; (8004ac8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a5e:	f7ff fa78 	bl	8003f52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a62:	e026      	b.n	8004ab2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a6c:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d209      	bcs.n	8004a90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a7c:	4b13      	ldr	r3, [pc, #76]	; (8004acc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7ff fa85 	bl	8003f98 <vListInsert>
}
 8004a8e:	e010      	b.n	8004ab2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7ff fa7b 	bl	8003f98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d202      	bcs.n	8004ab2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004aac:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6013      	str	r3, [r2, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200005e4 	.word	0x200005e4
 8004ac0:	200004e0 	.word	0x200004e0
 8004ac4:	200005e8 	.word	0x200005e8
 8004ac8:	200005cc 	.word	0x200005cc
 8004acc:	2000059c 	.word	0x2000059c
 8004ad0:	20000598 	.word	0x20000598
 8004ad4:	20000600 	.word	0x20000600

08004ad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3b04      	subs	r3, #4
 8004ae8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3b04      	subs	r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0201 	bic.w	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3b04      	subs	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b08:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <pxPortInitialiseStack+0x54>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b14      	subs	r3, #20
 8004b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3b20      	subs	r3, #32
 8004b1e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b20:	68fb      	ldr	r3, [r7, #12]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr
 8004b2c:	08004b31 	.word	0x08004b31

08004b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <prvTaskExitError+0x54>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d00a      	beq.n	8004b5a <prvTaskExitError+0x2a>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	60fb      	str	r3, [r7, #12]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <prvTaskExitError+0x28>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60bb      	str	r3, [r7, #8]
}
 8004b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b6e:	bf00      	nop
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0fc      	beq.n	8004b70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000000c 	.word	0x2000000c
	...

08004b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <pxCurrentTCBConst2>)
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	6808      	ldr	r0, [r1, #0]
 8004b96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b9a:	f380 8809 	msr	PSP, r0
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f380 8811 	msr	BASEPRI, r0
 8004baa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004bae:	4770      	bx	lr

08004bb0 <pxCurrentTCBConst2>:
 8004bb0:	200004e0 	.word	0x200004e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop

08004bb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004bb8:	4806      	ldr	r0, [pc, #24]	; (8004bd4 <prvPortStartFirstTask+0x1c>)
 8004bba:	6800      	ldr	r0, [r0, #0]
 8004bbc:	6800      	ldr	r0, [r0, #0]
 8004bbe:	f380 8808 	msr	MSP, r0
 8004bc2:	b662      	cpsie	i
 8004bc4:	b661      	cpsie	f
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	df00      	svc	0
 8004bd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bd2:	bf00      	nop
 8004bd4:	e000ed08 	.word	0xe000ed08

08004bd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bde:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <xPortStartScheduler+0xd0>)
 8004be0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	22ff      	movs	r2, #255	; 0xff
 8004bee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <xPortStartScheduler+0xd4>)
 8004c04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c06:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <xPortStartScheduler+0xd8>)
 8004c08:	2207      	movs	r2, #7
 8004c0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c0c:	e009      	b.n	8004c22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c0e:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <xPortStartScheduler+0xd8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	4a26      	ldr	r2, [pc, #152]	; (8004cb0 <xPortStartScheduler+0xd8>)
 8004c16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d0ef      	beq.n	8004c0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c2e:	4b20      	ldr	r3, [pc, #128]	; (8004cb0 <xPortStartScheduler+0xd8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f1c3 0307 	rsb	r3, r3, #7
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d00a      	beq.n	8004c50 <xPortStartScheduler+0x78>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60bb      	str	r3, [r7, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c50:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <xPortStartScheduler+0xd8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <xPortStartScheduler+0xd8>)
 8004c58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c5a:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <xPortStartScheduler+0xd8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c62:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <xPortStartScheduler+0xd8>)
 8004c64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <xPortStartScheduler+0xdc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <xPortStartScheduler+0xdc>)
 8004c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <xPortStartScheduler+0xdc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a0d      	ldr	r2, [pc, #52]	; (8004cb4 <xPortStartScheduler+0xdc>)
 8004c80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c86:	f000 f8b9 	bl	8004dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <xPortStartScheduler+0xe0>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c90:	f7ff ff92 	bl	8004bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c94:	f7ff fd68 	bl	8004768 <vTaskSwitchContext>
	prvTaskExitError();
 8004c98:	f7ff ff4a 	bl	8004b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	e000e400 	.word	0xe000e400
 8004cac:	2000060c 	.word	0x2000060c
 8004cb0:	20000610 	.word	0x20000610
 8004cb4:	e000ed20 	.word	0xe000ed20
 8004cb8:	2000000c 	.word	0x2000000c

08004cbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	607b      	str	r3, [r7, #4]
}
 8004cd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <vPortEnterCritical+0x58>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	; (8004d14 <vPortEnterCritical+0x58>)
 8004cde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <vPortEnterCritical+0x58>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d10f      	bne.n	8004d08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <vPortEnterCritical+0x5c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	603b      	str	r3, [r7, #0]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <vPortEnterCritical+0x4a>
	}
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000000c 	.word	0x2000000c
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <vPortExitCritical+0x4c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <vPortExitCritical+0x24>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	607b      	str	r3, [r7, #4]
}
 8004d3c:	bf00      	nop
 8004d3e:	e7fe      	b.n	8004d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <vPortExitCritical+0x4c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <vPortExitCritical+0x4c>)
 8004d48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d4a:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <vPortExitCritical+0x4c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d105      	bne.n	8004d5e <vPortExitCritical+0x42>
 8004d52:	2300      	movs	r3, #0
 8004d54:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	2000000c 	.word	0x2000000c
 8004d6c:	00000000 	.word	0x00000000

08004d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d70:	f3ef 8009 	mrs	r0, PSP
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <pxCurrentTCBConst>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d80:	6010      	str	r0, [r2, #0]
 8004d82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004d86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d8a:	f380 8811 	msr	BASEPRI, r0
 8004d8e:	f7ff fceb 	bl	8004768 <vTaskSwitchContext>
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8811 	msr	BASEPRI, r0
 8004d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6808      	ldr	r0, [r1, #0]
 8004da2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004da6:	f380 8809 	msr	PSP, r0
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	4770      	bx	lr

08004db0 <pxCurrentTCBConst>:
 8004db0:	200004e0 	.word	0x200004e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop

08004db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	607b      	str	r3, [r7, #4]
}
 8004dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004dd2:	f7ff fc0b 	bl	80045ec <xTaskIncrementTick>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <xPortSysTickHandler+0x40>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f383 8811 	msr	BASEPRI, r3
}
 8004dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <vPortSetupTimerInterrupt+0x30>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <vPortSetupTimerInterrupt+0x34>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e0c:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <vPortSetupTimerInterrupt+0x38>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a09      	ldr	r2, [pc, #36]	; (8004e38 <vPortSetupTimerInterrupt+0x3c>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <vPortSetupTimerInterrupt+0x40>)
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e1e:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <vPortSetupTimerInterrupt+0x30>)
 8004e20:	2207      	movs	r2, #7
 8004e22:	601a      	str	r2, [r3, #0]
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr
 8004e2c:	e000e010 	.word	0xe000e010
 8004e30:	e000e018 	.word	0xe000e018
 8004e34:	20000000 	.word	0x20000000
 8004e38:	10624dd3 	.word	0x10624dd3
 8004e3c:	e000e014 	.word	0xe000e014

08004e40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e4c:	f7ff fb24 	bl	8004498 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e50:	4b58      	ldr	r3, [pc, #352]	; (8004fb4 <pvPortMalloc+0x174>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e58:	f000 f910 	bl	800507c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e5c:	4b56      	ldr	r3, [pc, #344]	; (8004fb8 <pvPortMalloc+0x178>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 808e 	bne.w	8004f86 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01d      	beq.n	8004eac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e70:	2208      	movs	r2, #8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d014      	beq.n	8004eac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f023 0307 	bic.w	r3, r3, #7
 8004e88:	3308      	adds	r3, #8
 8004e8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <pvPortMalloc+0x6c>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	617b      	str	r3, [r7, #20]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d069      	beq.n	8004f86 <pvPortMalloc+0x146>
 8004eb2:	4b42      	ldr	r3, [pc, #264]	; (8004fbc <pvPortMalloc+0x17c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d864      	bhi.n	8004f86 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ebc:	4b40      	ldr	r3, [pc, #256]	; (8004fc0 <pvPortMalloc+0x180>)
 8004ebe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ec0:	4b3f      	ldr	r3, [pc, #252]	; (8004fc0 <pvPortMalloc+0x180>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ec6:	e004      	b.n	8004ed2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d903      	bls.n	8004ee4 <pvPortMalloc+0xa4>
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f1      	bne.n	8004ec8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ee4:	4b33      	ldr	r3, [pc, #204]	; (8004fb4 <pvPortMalloc+0x174>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d04b      	beq.n	8004f86 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	4413      	add	r3, r2
 8004ef6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	2308      	movs	r3, #8
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d91f      	bls.n	8004f50 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <pvPortMalloc+0xf8>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	613b      	str	r3, [r7, #16]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	1ad2      	subs	r2, r2, r3
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f4a:	69b8      	ldr	r0, [r7, #24]
 8004f4c:	f000 f8f8 	bl	8005140 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <pvPortMalloc+0x17c>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <pvPortMalloc+0x17c>)
 8004f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <pvPortMalloc+0x17c>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b18      	ldr	r3, [pc, #96]	; (8004fc4 <pvPortMalloc+0x184>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d203      	bcs.n	8004f72 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <pvPortMalloc+0x17c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <pvPortMalloc+0x184>)
 8004f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <pvPortMalloc+0x178>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f86:	f7ff fa95 	bl	80044b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <pvPortMalloc+0x16a>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	60fb      	str	r3, [r7, #12]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <pvPortMalloc+0x168>
	return pvReturn;
 8004faa:	69fb      	ldr	r3, [r7, #28]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3728      	adds	r7, #40	; 0x28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	2000121c 	.word	0x2000121c
 8004fb8:	20001228 	.word	0x20001228
 8004fbc:	20001220 	.word	0x20001220
 8004fc0:	20001214 	.word	0x20001214
 8004fc4:	20001224 	.word	0x20001224

08004fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d048      	beq.n	800506c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fda:	2308      	movs	r3, #8
 8004fdc:	425b      	negs	r3, r3
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	4b21      	ldr	r3, [pc, #132]	; (8005074 <vPortFree+0xac>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <vPortFree+0x44>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60fb      	str	r3, [r7, #12]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <vPortFree+0x62>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	60bb      	str	r3, [r7, #8]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	4b11      	ldr	r3, [pc, #68]	; (8005074 <vPortFree+0xac>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d019      	beq.n	800506c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d115      	bne.n	800506c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <vPortFree+0xac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	43db      	mvns	r3, r3
 800504a:	401a      	ands	r2, r3
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005050:	f7ff fa22 	bl	8004498 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <vPortFree+0xb0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4413      	add	r3, r2
 800505e:	4a06      	ldr	r2, [pc, #24]	; (8005078 <vPortFree+0xb0>)
 8005060:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005062:	6938      	ldr	r0, [r7, #16]
 8005064:	f000 f86c 	bl	8005140 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005068:	f7ff fa24 	bl	80044b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800506c:	bf00      	nop
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20001228 	.word	0x20001228
 8005078:	20001220 	.word	0x20001220

0800507c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005082:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005086:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005088:	4b27      	ldr	r3, [pc, #156]	; (8005128 <prvHeapInit+0xac>)
 800508a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00c      	beq.n	80050b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3307      	adds	r3, #7
 800509a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0307 	bic.w	r3, r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <prvHeapInit+0xac>)
 80050ac:	4413      	add	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <prvHeapInit+0xb0>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050ba:	4b1c      	ldr	r3, [pc, #112]	; (800512c <prvHeapInit+0xb0>)
 80050bc:	2200      	movs	r2, #0
 80050be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4413      	add	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050c8:	2208      	movs	r2, #8
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <prvHeapInit+0xb4>)
 80050dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050de:	4b14      	ldr	r3, [pc, #80]	; (8005130 <prvHeapInit+0xb4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <prvHeapInit+0xb4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <prvHeapInit+0xb4>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <prvHeapInit+0xb8>)
 800510a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a09      	ldr	r2, [pc, #36]	; (8005138 <prvHeapInit+0xbc>)
 8005112:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <prvHeapInit+0xc0>)
 8005116:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800511a:	601a      	str	r2, [r3, #0]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000614 	.word	0x20000614
 800512c:	20001214 	.word	0x20001214
 8005130:	2000121c 	.word	0x2000121c
 8005134:	20001224 	.word	0x20001224
 8005138:	20001220 	.word	0x20001220
 800513c:	20001228 	.word	0x20001228

08005140 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005148:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <prvInsertBlockIntoFreeList+0xa8>)
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e002      	b.n	8005154 <prvInsertBlockIntoFreeList+0x14>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d8f7      	bhi.n	800514e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	4413      	add	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	d108      	bne.n	8005182 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	441a      	add	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	441a      	add	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d118      	bne.n	80051c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b14      	ldr	r3, [pc, #80]	; (80051ec <prvInsertBlockIntoFreeList+0xac>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d00d      	beq.n	80051be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	441a      	add	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e008      	b.n	80051d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <prvInsertBlockIntoFreeList+0xac>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e003      	b.n	80051d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d002      	beq.n	80051de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	20001214 	.word	0x20001214
 80051ec:	2000121c 	.word	0x2000121c

080051f0 <__errno>:
 80051f0:	4b01      	ldr	r3, [pc, #4]	; (80051f8 <__errno+0x8>)
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000010 	.word	0x20000010

080051fc <__libc_init_array>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	2600      	movs	r6, #0
 8005200:	4d0c      	ldr	r5, [pc, #48]	; (8005234 <__libc_init_array+0x38>)
 8005202:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <__libc_init_array+0x3c>)
 8005204:	1b64      	subs	r4, r4, r5
 8005206:	10a4      	asrs	r4, r4, #2
 8005208:	42a6      	cmp	r6, r4
 800520a:	d109      	bne.n	8005220 <__libc_init_array+0x24>
 800520c:	f004 fc50 	bl	8009ab0 <_init>
 8005210:	2600      	movs	r6, #0
 8005212:	4d0a      	ldr	r5, [pc, #40]	; (800523c <__libc_init_array+0x40>)
 8005214:	4c0a      	ldr	r4, [pc, #40]	; (8005240 <__libc_init_array+0x44>)
 8005216:	1b64      	subs	r4, r4, r5
 8005218:	10a4      	asrs	r4, r4, #2
 800521a:	42a6      	cmp	r6, r4
 800521c:	d105      	bne.n	800522a <__libc_init_array+0x2e>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	f855 3b04 	ldr.w	r3, [r5], #4
 8005224:	4798      	blx	r3
 8005226:	3601      	adds	r6, #1
 8005228:	e7ee      	b.n	8005208 <__libc_init_array+0xc>
 800522a:	f855 3b04 	ldr.w	r3, [r5], #4
 800522e:	4798      	blx	r3
 8005230:	3601      	adds	r6, #1
 8005232:	e7f2      	b.n	800521a <__libc_init_array+0x1e>
 8005234:	0800a03c 	.word	0x0800a03c
 8005238:	0800a03c 	.word	0x0800a03c
 800523c:	0800a03c 	.word	0x0800a03c
 8005240:	0800a040 	.word	0x0800a040

08005244 <memcpy>:
 8005244:	440a      	add	r2, r1
 8005246:	4291      	cmp	r1, r2
 8005248:	f100 33ff 	add.w	r3, r0, #4294967295
 800524c:	d100      	bne.n	8005250 <memcpy+0xc>
 800524e:	4770      	bx	lr
 8005250:	b510      	push	{r4, lr}
 8005252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005256:	4291      	cmp	r1, r2
 8005258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800525c:	d1f9      	bne.n	8005252 <memcpy+0xe>
 800525e:	bd10      	pop	{r4, pc}

08005260 <memset>:
 8005260:	4603      	mov	r3, r0
 8005262:	4402      	add	r2, r0
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	f803 1b01 	strb.w	r1, [r3], #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <__cvt>:
 8005270:	2b00      	cmp	r3, #0
 8005272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005276:	461f      	mov	r7, r3
 8005278:	bfbb      	ittet	lt
 800527a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800527e:	461f      	movlt	r7, r3
 8005280:	2300      	movge	r3, #0
 8005282:	232d      	movlt	r3, #45	; 0x2d
 8005284:	b088      	sub	sp, #32
 8005286:	4614      	mov	r4, r2
 8005288:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800528a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800528c:	7013      	strb	r3, [r2, #0]
 800528e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005290:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005294:	f023 0820 	bic.w	r8, r3, #32
 8005298:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800529c:	d005      	beq.n	80052aa <__cvt+0x3a>
 800529e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052a2:	d100      	bne.n	80052a6 <__cvt+0x36>
 80052a4:	3501      	adds	r5, #1
 80052a6:	2302      	movs	r3, #2
 80052a8:	e000      	b.n	80052ac <__cvt+0x3c>
 80052aa:	2303      	movs	r3, #3
 80052ac:	aa07      	add	r2, sp, #28
 80052ae:	9204      	str	r2, [sp, #16]
 80052b0:	aa06      	add	r2, sp, #24
 80052b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80052b6:	e9cd 3500 	strd	r3, r5, [sp]
 80052ba:	4622      	mov	r2, r4
 80052bc:	463b      	mov	r3, r7
 80052be:	f001 fd83 	bl	8006dc8 <_dtoa_r>
 80052c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052c6:	4606      	mov	r6, r0
 80052c8:	d102      	bne.n	80052d0 <__cvt+0x60>
 80052ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052cc:	07db      	lsls	r3, r3, #31
 80052ce:	d522      	bpl.n	8005316 <__cvt+0xa6>
 80052d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052d4:	eb06 0905 	add.w	r9, r6, r5
 80052d8:	d110      	bne.n	80052fc <__cvt+0x8c>
 80052da:	7833      	ldrb	r3, [r6, #0]
 80052dc:	2b30      	cmp	r3, #48	; 0x30
 80052de:	d10a      	bne.n	80052f6 <__cvt+0x86>
 80052e0:	2200      	movs	r2, #0
 80052e2:	2300      	movs	r3, #0
 80052e4:	4620      	mov	r0, r4
 80052e6:	4639      	mov	r1, r7
 80052e8:	f7fb fbce 	bl	8000a88 <__aeabi_dcmpeq>
 80052ec:	b918      	cbnz	r0, 80052f6 <__cvt+0x86>
 80052ee:	f1c5 0501 	rsb	r5, r5, #1
 80052f2:	f8ca 5000 	str.w	r5, [sl]
 80052f6:	f8da 3000 	ldr.w	r3, [sl]
 80052fa:	4499      	add	r9, r3
 80052fc:	2200      	movs	r2, #0
 80052fe:	2300      	movs	r3, #0
 8005300:	4620      	mov	r0, r4
 8005302:	4639      	mov	r1, r7
 8005304:	f7fb fbc0 	bl	8000a88 <__aeabi_dcmpeq>
 8005308:	b108      	cbz	r0, 800530e <__cvt+0x9e>
 800530a:	f8cd 901c 	str.w	r9, [sp, #28]
 800530e:	2230      	movs	r2, #48	; 0x30
 8005310:	9b07      	ldr	r3, [sp, #28]
 8005312:	454b      	cmp	r3, r9
 8005314:	d307      	bcc.n	8005326 <__cvt+0xb6>
 8005316:	4630      	mov	r0, r6
 8005318:	9b07      	ldr	r3, [sp, #28]
 800531a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800531c:	1b9b      	subs	r3, r3, r6
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	b008      	add	sp, #32
 8005322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	9107      	str	r1, [sp, #28]
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e7f0      	b.n	8005310 <__cvt+0xa0>

0800532e <__exponent>:
 800532e:	4603      	mov	r3, r0
 8005330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005332:	2900      	cmp	r1, #0
 8005334:	f803 2b02 	strb.w	r2, [r3], #2
 8005338:	bfb6      	itet	lt
 800533a:	222d      	movlt	r2, #45	; 0x2d
 800533c:	222b      	movge	r2, #43	; 0x2b
 800533e:	4249      	neglt	r1, r1
 8005340:	2909      	cmp	r1, #9
 8005342:	7042      	strb	r2, [r0, #1]
 8005344:	dd2b      	ble.n	800539e <__exponent+0x70>
 8005346:	f10d 0407 	add.w	r4, sp, #7
 800534a:	46a4      	mov	ip, r4
 800534c:	270a      	movs	r7, #10
 800534e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005352:	460a      	mov	r2, r1
 8005354:	46a6      	mov	lr, r4
 8005356:	fb07 1516 	mls	r5, r7, r6, r1
 800535a:	2a63      	cmp	r2, #99	; 0x63
 800535c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005360:	4631      	mov	r1, r6
 8005362:	f104 34ff 	add.w	r4, r4, #4294967295
 8005366:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800536a:	dcf0      	bgt.n	800534e <__exponent+0x20>
 800536c:	3130      	adds	r1, #48	; 0x30
 800536e:	f1ae 0502 	sub.w	r5, lr, #2
 8005372:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005376:	4629      	mov	r1, r5
 8005378:	1c44      	adds	r4, r0, #1
 800537a:	4561      	cmp	r1, ip
 800537c:	d30a      	bcc.n	8005394 <__exponent+0x66>
 800537e:	f10d 0209 	add.w	r2, sp, #9
 8005382:	eba2 020e 	sub.w	r2, r2, lr
 8005386:	4565      	cmp	r5, ip
 8005388:	bf88      	it	hi
 800538a:	2200      	movhi	r2, #0
 800538c:	4413      	add	r3, r2
 800538e:	1a18      	subs	r0, r3, r0
 8005390:	b003      	add	sp, #12
 8005392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005394:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005398:	f804 2f01 	strb.w	r2, [r4, #1]!
 800539c:	e7ed      	b.n	800537a <__exponent+0x4c>
 800539e:	2330      	movs	r3, #48	; 0x30
 80053a0:	3130      	adds	r1, #48	; 0x30
 80053a2:	7083      	strb	r3, [r0, #2]
 80053a4:	70c1      	strb	r1, [r0, #3]
 80053a6:	1d03      	adds	r3, r0, #4
 80053a8:	e7f1      	b.n	800538e <__exponent+0x60>
	...

080053ac <_printf_float>:
 80053ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b0:	b091      	sub	sp, #68	; 0x44
 80053b2:	460c      	mov	r4, r1
 80053b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80053b8:	4616      	mov	r6, r2
 80053ba:	461f      	mov	r7, r3
 80053bc:	4605      	mov	r5, r0
 80053be:	f002 fe57 	bl	8008070 <_localeconv_r>
 80053c2:	6803      	ldr	r3, [r0, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	9309      	str	r3, [sp, #36]	; 0x24
 80053c8:	f7fa ff32 	bl	8000230 <strlen>
 80053cc:	2300      	movs	r3, #0
 80053ce:	930e      	str	r3, [sp, #56]	; 0x38
 80053d0:	f8d8 3000 	ldr.w	r3, [r8]
 80053d4:	900a      	str	r0, [sp, #40]	; 0x28
 80053d6:	3307      	adds	r3, #7
 80053d8:	f023 0307 	bic.w	r3, r3, #7
 80053dc:	f103 0208 	add.w	r2, r3, #8
 80053e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80053e4:	f8d4 b000 	ldr.w	fp, [r4]
 80053e8:	f8c8 2000 	str.w	r2, [r8]
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053f4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80053f8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80053fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80053fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005402:	4640      	mov	r0, r8
 8005404:	4b9c      	ldr	r3, [pc, #624]	; (8005678 <_printf_float+0x2cc>)
 8005406:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005408:	f7fb fb70 	bl	8000aec <__aeabi_dcmpun>
 800540c:	bb70      	cbnz	r0, 800546c <_printf_float+0xc0>
 800540e:	f04f 32ff 	mov.w	r2, #4294967295
 8005412:	4640      	mov	r0, r8
 8005414:	4b98      	ldr	r3, [pc, #608]	; (8005678 <_printf_float+0x2cc>)
 8005416:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005418:	f7fb fb4a 	bl	8000ab0 <__aeabi_dcmple>
 800541c:	bb30      	cbnz	r0, 800546c <_printf_float+0xc0>
 800541e:	2200      	movs	r2, #0
 8005420:	2300      	movs	r3, #0
 8005422:	4640      	mov	r0, r8
 8005424:	4651      	mov	r1, sl
 8005426:	f7fb fb39 	bl	8000a9c <__aeabi_dcmplt>
 800542a:	b110      	cbz	r0, 8005432 <_printf_float+0x86>
 800542c:	232d      	movs	r3, #45	; 0x2d
 800542e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005432:	4b92      	ldr	r3, [pc, #584]	; (800567c <_printf_float+0x2d0>)
 8005434:	4892      	ldr	r0, [pc, #584]	; (8005680 <_printf_float+0x2d4>)
 8005436:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800543a:	bf94      	ite	ls
 800543c:	4698      	movls	r8, r3
 800543e:	4680      	movhi	r8, r0
 8005440:	2303      	movs	r3, #3
 8005442:	f04f 0a00 	mov.w	sl, #0
 8005446:	6123      	str	r3, [r4, #16]
 8005448:	f02b 0304 	bic.w	r3, fp, #4
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	4633      	mov	r3, r6
 8005450:	4621      	mov	r1, r4
 8005452:	4628      	mov	r0, r5
 8005454:	9700      	str	r7, [sp, #0]
 8005456:	aa0f      	add	r2, sp, #60	; 0x3c
 8005458:	f000 f9d4 	bl	8005804 <_printf_common>
 800545c:	3001      	adds	r0, #1
 800545e:	f040 8090 	bne.w	8005582 <_printf_float+0x1d6>
 8005462:	f04f 30ff 	mov.w	r0, #4294967295
 8005466:	b011      	add	sp, #68	; 0x44
 8005468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800546c:	4642      	mov	r2, r8
 800546e:	4653      	mov	r3, sl
 8005470:	4640      	mov	r0, r8
 8005472:	4651      	mov	r1, sl
 8005474:	f7fb fb3a 	bl	8000aec <__aeabi_dcmpun>
 8005478:	b148      	cbz	r0, 800548e <_printf_float+0xe2>
 800547a:	f1ba 0f00 	cmp.w	sl, #0
 800547e:	bfb8      	it	lt
 8005480:	232d      	movlt	r3, #45	; 0x2d
 8005482:	4880      	ldr	r0, [pc, #512]	; (8005684 <_printf_float+0x2d8>)
 8005484:	bfb8      	it	lt
 8005486:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800548a:	4b7f      	ldr	r3, [pc, #508]	; (8005688 <_printf_float+0x2dc>)
 800548c:	e7d3      	b.n	8005436 <_printf_float+0x8a>
 800548e:	6863      	ldr	r3, [r4, #4]
 8005490:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	d142      	bne.n	800551e <_printf_float+0x172>
 8005498:	2306      	movs	r3, #6
 800549a:	6063      	str	r3, [r4, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	9206      	str	r2, [sp, #24]
 80054a0:	aa0e      	add	r2, sp, #56	; 0x38
 80054a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80054a6:	aa0d      	add	r2, sp, #52	; 0x34
 80054a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80054ac:	9203      	str	r2, [sp, #12]
 80054ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80054b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	4642      	mov	r2, r8
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	4628      	mov	r0, r5
 80054c0:	4653      	mov	r3, sl
 80054c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80054c4:	f7ff fed4 	bl	8005270 <__cvt>
 80054c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054ca:	4680      	mov	r8, r0
 80054cc:	2947      	cmp	r1, #71	; 0x47
 80054ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054d0:	d108      	bne.n	80054e4 <_printf_float+0x138>
 80054d2:	1cc8      	adds	r0, r1, #3
 80054d4:	db02      	blt.n	80054dc <_printf_float+0x130>
 80054d6:	6863      	ldr	r3, [r4, #4]
 80054d8:	4299      	cmp	r1, r3
 80054da:	dd40      	ble.n	800555e <_printf_float+0x1b2>
 80054dc:	f1a9 0902 	sub.w	r9, r9, #2
 80054e0:	fa5f f989 	uxtb.w	r9, r9
 80054e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054e8:	d81f      	bhi.n	800552a <_printf_float+0x17e>
 80054ea:	464a      	mov	r2, r9
 80054ec:	3901      	subs	r1, #1
 80054ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054f2:	910d      	str	r1, [sp, #52]	; 0x34
 80054f4:	f7ff ff1b 	bl	800532e <__exponent>
 80054f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054fa:	4682      	mov	sl, r0
 80054fc:	1813      	adds	r3, r2, r0
 80054fe:	2a01      	cmp	r2, #1
 8005500:	6123      	str	r3, [r4, #16]
 8005502:	dc02      	bgt.n	800550a <_printf_float+0x15e>
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	07d2      	lsls	r2, r2, #31
 8005508:	d501      	bpl.n	800550e <_printf_float+0x162>
 800550a:	3301      	adds	r3, #1
 800550c:	6123      	str	r3, [r4, #16]
 800550e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005512:	2b00      	cmp	r3, #0
 8005514:	d09b      	beq.n	800544e <_printf_float+0xa2>
 8005516:	232d      	movs	r3, #45	; 0x2d
 8005518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551c:	e797      	b.n	800544e <_printf_float+0xa2>
 800551e:	2947      	cmp	r1, #71	; 0x47
 8005520:	d1bc      	bne.n	800549c <_printf_float+0xf0>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1ba      	bne.n	800549c <_printf_float+0xf0>
 8005526:	2301      	movs	r3, #1
 8005528:	e7b7      	b.n	800549a <_printf_float+0xee>
 800552a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800552e:	d118      	bne.n	8005562 <_printf_float+0x1b6>
 8005530:	2900      	cmp	r1, #0
 8005532:	6863      	ldr	r3, [r4, #4]
 8005534:	dd0b      	ble.n	800554e <_printf_float+0x1a2>
 8005536:	6121      	str	r1, [r4, #16]
 8005538:	b913      	cbnz	r3, 8005540 <_printf_float+0x194>
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	07d0      	lsls	r0, r2, #31
 800553e:	d502      	bpl.n	8005546 <_printf_float+0x19a>
 8005540:	3301      	adds	r3, #1
 8005542:	440b      	add	r3, r1
 8005544:	6123      	str	r3, [r4, #16]
 8005546:	f04f 0a00 	mov.w	sl, #0
 800554a:	65a1      	str	r1, [r4, #88]	; 0x58
 800554c:	e7df      	b.n	800550e <_printf_float+0x162>
 800554e:	b913      	cbnz	r3, 8005556 <_printf_float+0x1aa>
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	07d2      	lsls	r2, r2, #31
 8005554:	d501      	bpl.n	800555a <_printf_float+0x1ae>
 8005556:	3302      	adds	r3, #2
 8005558:	e7f4      	b.n	8005544 <_printf_float+0x198>
 800555a:	2301      	movs	r3, #1
 800555c:	e7f2      	b.n	8005544 <_printf_float+0x198>
 800555e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005564:	4299      	cmp	r1, r3
 8005566:	db05      	blt.n	8005574 <_printf_float+0x1c8>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	6121      	str	r1, [r4, #16]
 800556c:	07d8      	lsls	r0, r3, #31
 800556e:	d5ea      	bpl.n	8005546 <_printf_float+0x19a>
 8005570:	1c4b      	adds	r3, r1, #1
 8005572:	e7e7      	b.n	8005544 <_printf_float+0x198>
 8005574:	2900      	cmp	r1, #0
 8005576:	bfcc      	ite	gt
 8005578:	2201      	movgt	r2, #1
 800557a:	f1c1 0202 	rsble	r2, r1, #2
 800557e:	4413      	add	r3, r2
 8005580:	e7e0      	b.n	8005544 <_printf_float+0x198>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	055a      	lsls	r2, r3, #21
 8005586:	d407      	bmi.n	8005598 <_printf_float+0x1ec>
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	4642      	mov	r2, r8
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	47b8      	blx	r7
 8005592:	3001      	adds	r0, #1
 8005594:	d12b      	bne.n	80055ee <_printf_float+0x242>
 8005596:	e764      	b.n	8005462 <_printf_float+0xb6>
 8005598:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800559c:	f240 80dd 	bls.w	800575a <_printf_float+0x3ae>
 80055a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055a4:	2200      	movs	r2, #0
 80055a6:	2300      	movs	r3, #0
 80055a8:	f7fb fa6e 	bl	8000a88 <__aeabi_dcmpeq>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d033      	beq.n	8005618 <_printf_float+0x26c>
 80055b0:	2301      	movs	r3, #1
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	4a35      	ldr	r2, [pc, #212]	; (800568c <_printf_float+0x2e0>)
 80055b8:	47b8      	blx	r7
 80055ba:	3001      	adds	r0, #1
 80055bc:	f43f af51 	beq.w	8005462 <_printf_float+0xb6>
 80055c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055c4:	429a      	cmp	r2, r3
 80055c6:	db02      	blt.n	80055ce <_printf_float+0x222>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	07d8      	lsls	r0, r3, #31
 80055cc:	d50f      	bpl.n	80055ee <_printf_float+0x242>
 80055ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055d2:	4631      	mov	r1, r6
 80055d4:	4628      	mov	r0, r5
 80055d6:	47b8      	blx	r7
 80055d8:	3001      	adds	r0, #1
 80055da:	f43f af42 	beq.w	8005462 <_printf_float+0xb6>
 80055de:	f04f 0800 	mov.w	r8, #0
 80055e2:	f104 091a 	add.w	r9, r4, #26
 80055e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055e8:	3b01      	subs	r3, #1
 80055ea:	4543      	cmp	r3, r8
 80055ec:	dc09      	bgt.n	8005602 <_printf_float+0x256>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	079b      	lsls	r3, r3, #30
 80055f2:	f100 8102 	bmi.w	80057fa <_printf_float+0x44e>
 80055f6:	68e0      	ldr	r0, [r4, #12]
 80055f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055fa:	4298      	cmp	r0, r3
 80055fc:	bfb8      	it	lt
 80055fe:	4618      	movlt	r0, r3
 8005600:	e731      	b.n	8005466 <_printf_float+0xba>
 8005602:	2301      	movs	r3, #1
 8005604:	464a      	mov	r2, r9
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	47b8      	blx	r7
 800560c:	3001      	adds	r0, #1
 800560e:	f43f af28 	beq.w	8005462 <_printf_float+0xb6>
 8005612:	f108 0801 	add.w	r8, r8, #1
 8005616:	e7e6      	b.n	80055e6 <_printf_float+0x23a>
 8005618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800561a:	2b00      	cmp	r3, #0
 800561c:	dc38      	bgt.n	8005690 <_printf_float+0x2e4>
 800561e:	2301      	movs	r3, #1
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	4a19      	ldr	r2, [pc, #100]	; (800568c <_printf_float+0x2e0>)
 8005626:	47b8      	blx	r7
 8005628:	3001      	adds	r0, #1
 800562a:	f43f af1a 	beq.w	8005462 <_printf_float+0xb6>
 800562e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005632:	4313      	orrs	r3, r2
 8005634:	d102      	bne.n	800563c <_printf_float+0x290>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	07d9      	lsls	r1, r3, #31
 800563a:	d5d8      	bpl.n	80055ee <_printf_float+0x242>
 800563c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005640:	4631      	mov	r1, r6
 8005642:	4628      	mov	r0, r5
 8005644:	47b8      	blx	r7
 8005646:	3001      	adds	r0, #1
 8005648:	f43f af0b 	beq.w	8005462 <_printf_float+0xb6>
 800564c:	f04f 0900 	mov.w	r9, #0
 8005650:	f104 0a1a 	add.w	sl, r4, #26
 8005654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005656:	425b      	negs	r3, r3
 8005658:	454b      	cmp	r3, r9
 800565a:	dc01      	bgt.n	8005660 <_printf_float+0x2b4>
 800565c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800565e:	e794      	b.n	800558a <_printf_float+0x1de>
 8005660:	2301      	movs	r3, #1
 8005662:	4652      	mov	r2, sl
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	f43f aef9 	beq.w	8005462 <_printf_float+0xb6>
 8005670:	f109 0901 	add.w	r9, r9, #1
 8005674:	e7ee      	b.n	8005654 <_printf_float+0x2a8>
 8005676:	bf00      	nop
 8005678:	7fefffff 	.word	0x7fefffff
 800567c:	08009b98 	.word	0x08009b98
 8005680:	08009b9c 	.word	0x08009b9c
 8005684:	08009ba4 	.word	0x08009ba4
 8005688:	08009ba0 	.word	0x08009ba0
 800568c:	08009ba8 	.word	0x08009ba8
 8005690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005694:	429a      	cmp	r2, r3
 8005696:	bfa8      	it	ge
 8005698:	461a      	movge	r2, r3
 800569a:	2a00      	cmp	r2, #0
 800569c:	4691      	mov	r9, r2
 800569e:	dc37      	bgt.n	8005710 <_printf_float+0x364>
 80056a0:	f04f 0b00 	mov.w	fp, #0
 80056a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056a8:	f104 021a 	add.w	r2, r4, #26
 80056ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80056b0:	ebaa 0309 	sub.w	r3, sl, r9
 80056b4:	455b      	cmp	r3, fp
 80056b6:	dc33      	bgt.n	8005720 <_printf_float+0x374>
 80056b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056bc:	429a      	cmp	r2, r3
 80056be:	db3b      	blt.n	8005738 <_printf_float+0x38c>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	07da      	lsls	r2, r3, #31
 80056c4:	d438      	bmi.n	8005738 <_printf_float+0x38c>
 80056c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056ca:	eba3 020a 	sub.w	r2, r3, sl
 80056ce:	eba3 0901 	sub.w	r9, r3, r1
 80056d2:	4591      	cmp	r9, r2
 80056d4:	bfa8      	it	ge
 80056d6:	4691      	movge	r9, r2
 80056d8:	f1b9 0f00 	cmp.w	r9, #0
 80056dc:	dc34      	bgt.n	8005748 <_printf_float+0x39c>
 80056de:	f04f 0800 	mov.w	r8, #0
 80056e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056e6:	f104 0a1a 	add.w	sl, r4, #26
 80056ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	eba3 0309 	sub.w	r3, r3, r9
 80056f4:	4543      	cmp	r3, r8
 80056f6:	f77f af7a 	ble.w	80055ee <_printf_float+0x242>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4652      	mov	r2, sl
 80056fe:	4631      	mov	r1, r6
 8005700:	4628      	mov	r0, r5
 8005702:	47b8      	blx	r7
 8005704:	3001      	adds	r0, #1
 8005706:	f43f aeac 	beq.w	8005462 <_printf_float+0xb6>
 800570a:	f108 0801 	add.w	r8, r8, #1
 800570e:	e7ec      	b.n	80056ea <_printf_float+0x33e>
 8005710:	4613      	mov	r3, r2
 8005712:	4631      	mov	r1, r6
 8005714:	4642      	mov	r2, r8
 8005716:	4628      	mov	r0, r5
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	d1c0      	bne.n	80056a0 <_printf_float+0x2f4>
 800571e:	e6a0      	b.n	8005462 <_printf_float+0xb6>
 8005720:	2301      	movs	r3, #1
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	920b      	str	r2, [sp, #44]	; 0x2c
 8005728:	47b8      	blx	r7
 800572a:	3001      	adds	r0, #1
 800572c:	f43f ae99 	beq.w	8005462 <_printf_float+0xb6>
 8005730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005732:	f10b 0b01 	add.w	fp, fp, #1
 8005736:	e7b9      	b.n	80056ac <_printf_float+0x300>
 8005738:	4631      	mov	r1, r6
 800573a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	d1bf      	bne.n	80056c6 <_printf_float+0x31a>
 8005746:	e68c      	b.n	8005462 <_printf_float+0xb6>
 8005748:	464b      	mov	r3, r9
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	eb08 020a 	add.w	r2, r8, sl
 8005752:	47b8      	blx	r7
 8005754:	3001      	adds	r0, #1
 8005756:	d1c2      	bne.n	80056de <_printf_float+0x332>
 8005758:	e683      	b.n	8005462 <_printf_float+0xb6>
 800575a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800575c:	2a01      	cmp	r2, #1
 800575e:	dc01      	bgt.n	8005764 <_printf_float+0x3b8>
 8005760:	07db      	lsls	r3, r3, #31
 8005762:	d537      	bpl.n	80057d4 <_printf_float+0x428>
 8005764:	2301      	movs	r3, #1
 8005766:	4642      	mov	r2, r8
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	f43f ae77 	beq.w	8005462 <_printf_float+0xb6>
 8005774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f ae6f 	beq.w	8005462 <_printf_float+0xb6>
 8005784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005788:	2200      	movs	r2, #0
 800578a:	2300      	movs	r3, #0
 800578c:	f7fb f97c 	bl	8000a88 <__aeabi_dcmpeq>
 8005790:	b9d8      	cbnz	r0, 80057ca <_printf_float+0x41e>
 8005792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005794:	f108 0201 	add.w	r2, r8, #1
 8005798:	3b01      	subs	r3, #1
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	d10e      	bne.n	80057c2 <_printf_float+0x416>
 80057a4:	e65d      	b.n	8005462 <_printf_float+0xb6>
 80057a6:	2301      	movs	r3, #1
 80057a8:	464a      	mov	r2, r9
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	f43f ae56 	beq.w	8005462 <_printf_float+0xb6>
 80057b6:	f108 0801 	add.w	r8, r8, #1
 80057ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057bc:	3b01      	subs	r3, #1
 80057be:	4543      	cmp	r3, r8
 80057c0:	dcf1      	bgt.n	80057a6 <_printf_float+0x3fa>
 80057c2:	4653      	mov	r3, sl
 80057c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057c8:	e6e0      	b.n	800558c <_printf_float+0x1e0>
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	f104 091a 	add.w	r9, r4, #26
 80057d2:	e7f2      	b.n	80057ba <_printf_float+0x40e>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4642      	mov	r2, r8
 80057d8:	e7df      	b.n	800579a <_printf_float+0x3ee>
 80057da:	2301      	movs	r3, #1
 80057dc:	464a      	mov	r2, r9
 80057de:	4631      	mov	r1, r6
 80057e0:	4628      	mov	r0, r5
 80057e2:	47b8      	blx	r7
 80057e4:	3001      	adds	r0, #1
 80057e6:	f43f ae3c 	beq.w	8005462 <_printf_float+0xb6>
 80057ea:	f108 0801 	add.w	r8, r8, #1
 80057ee:	68e3      	ldr	r3, [r4, #12]
 80057f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80057f2:	1a5b      	subs	r3, r3, r1
 80057f4:	4543      	cmp	r3, r8
 80057f6:	dcf0      	bgt.n	80057da <_printf_float+0x42e>
 80057f8:	e6fd      	b.n	80055f6 <_printf_float+0x24a>
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	f104 0919 	add.w	r9, r4, #25
 8005802:	e7f4      	b.n	80057ee <_printf_float+0x442>

08005804 <_printf_common>:
 8005804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005808:	4616      	mov	r6, r2
 800580a:	4699      	mov	r9, r3
 800580c:	688a      	ldr	r2, [r1, #8]
 800580e:	690b      	ldr	r3, [r1, #16]
 8005810:	4607      	mov	r7, r0
 8005812:	4293      	cmp	r3, r2
 8005814:	bfb8      	it	lt
 8005816:	4613      	movlt	r3, r2
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800581e:	460c      	mov	r4, r1
 8005820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005824:	b10a      	cbz	r2, 800582a <_printf_common+0x26>
 8005826:	3301      	adds	r3, #1
 8005828:	6033      	str	r3, [r6, #0]
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	0699      	lsls	r1, r3, #26
 800582e:	bf42      	ittt	mi
 8005830:	6833      	ldrmi	r3, [r6, #0]
 8005832:	3302      	addmi	r3, #2
 8005834:	6033      	strmi	r3, [r6, #0]
 8005836:	6825      	ldr	r5, [r4, #0]
 8005838:	f015 0506 	ands.w	r5, r5, #6
 800583c:	d106      	bne.n	800584c <_printf_common+0x48>
 800583e:	f104 0a19 	add.w	sl, r4, #25
 8005842:	68e3      	ldr	r3, [r4, #12]
 8005844:	6832      	ldr	r2, [r6, #0]
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	42ab      	cmp	r3, r5
 800584a:	dc28      	bgt.n	800589e <_printf_common+0x9a>
 800584c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005850:	1e13      	subs	r3, r2, #0
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	bf18      	it	ne
 8005856:	2301      	movne	r3, #1
 8005858:	0692      	lsls	r2, r2, #26
 800585a:	d42d      	bmi.n	80058b8 <_printf_common+0xb4>
 800585c:	4649      	mov	r1, r9
 800585e:	4638      	mov	r0, r7
 8005860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005864:	47c0      	blx	r8
 8005866:	3001      	adds	r0, #1
 8005868:	d020      	beq.n	80058ac <_printf_common+0xa8>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	68e5      	ldr	r5, [r4, #12]
 800586e:	f003 0306 	and.w	r3, r3, #6
 8005872:	2b04      	cmp	r3, #4
 8005874:	bf18      	it	ne
 8005876:	2500      	movne	r5, #0
 8005878:	6832      	ldr	r2, [r6, #0]
 800587a:	f04f 0600 	mov.w	r6, #0
 800587e:	68a3      	ldr	r3, [r4, #8]
 8005880:	bf08      	it	eq
 8005882:	1aad      	subeq	r5, r5, r2
 8005884:	6922      	ldr	r2, [r4, #16]
 8005886:	bf08      	it	eq
 8005888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800588c:	4293      	cmp	r3, r2
 800588e:	bfc4      	itt	gt
 8005890:	1a9b      	subgt	r3, r3, r2
 8005892:	18ed      	addgt	r5, r5, r3
 8005894:	341a      	adds	r4, #26
 8005896:	42b5      	cmp	r5, r6
 8005898:	d11a      	bne.n	80058d0 <_printf_common+0xcc>
 800589a:	2000      	movs	r0, #0
 800589c:	e008      	b.n	80058b0 <_printf_common+0xac>
 800589e:	2301      	movs	r3, #1
 80058a0:	4652      	mov	r2, sl
 80058a2:	4649      	mov	r1, r9
 80058a4:	4638      	mov	r0, r7
 80058a6:	47c0      	blx	r8
 80058a8:	3001      	adds	r0, #1
 80058aa:	d103      	bne.n	80058b4 <_printf_common+0xb0>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b4:	3501      	adds	r5, #1
 80058b6:	e7c4      	b.n	8005842 <_printf_common+0x3e>
 80058b8:	2030      	movs	r0, #48	; 0x30
 80058ba:	18e1      	adds	r1, r4, r3
 80058bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c6:	4422      	add	r2, r4
 80058c8:	3302      	adds	r3, #2
 80058ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058ce:	e7c5      	b.n	800585c <_printf_common+0x58>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4622      	mov	r2, r4
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d0e6      	beq.n	80058ac <_printf_common+0xa8>
 80058de:	3601      	adds	r6, #1
 80058e0:	e7d9      	b.n	8005896 <_printf_common+0x92>
	...

080058e4 <_printf_i>:
 80058e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	7e0f      	ldrb	r7, [r1, #24]
 80058ea:	4691      	mov	r9, r2
 80058ec:	2f78      	cmp	r7, #120	; 0x78
 80058ee:	4680      	mov	r8, r0
 80058f0:	460c      	mov	r4, r1
 80058f2:	469a      	mov	sl, r3
 80058f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058fa:	d807      	bhi.n	800590c <_printf_i+0x28>
 80058fc:	2f62      	cmp	r7, #98	; 0x62
 80058fe:	d80a      	bhi.n	8005916 <_printf_i+0x32>
 8005900:	2f00      	cmp	r7, #0
 8005902:	f000 80d9 	beq.w	8005ab8 <_printf_i+0x1d4>
 8005906:	2f58      	cmp	r7, #88	; 0x58
 8005908:	f000 80a4 	beq.w	8005a54 <_printf_i+0x170>
 800590c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005914:	e03a      	b.n	800598c <_printf_i+0xa8>
 8005916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800591a:	2b15      	cmp	r3, #21
 800591c:	d8f6      	bhi.n	800590c <_printf_i+0x28>
 800591e:	a101      	add	r1, pc, #4	; (adr r1, 8005924 <_printf_i+0x40>)
 8005920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005924:	0800597d 	.word	0x0800597d
 8005928:	08005991 	.word	0x08005991
 800592c:	0800590d 	.word	0x0800590d
 8005930:	0800590d 	.word	0x0800590d
 8005934:	0800590d 	.word	0x0800590d
 8005938:	0800590d 	.word	0x0800590d
 800593c:	08005991 	.word	0x08005991
 8005940:	0800590d 	.word	0x0800590d
 8005944:	0800590d 	.word	0x0800590d
 8005948:	0800590d 	.word	0x0800590d
 800594c:	0800590d 	.word	0x0800590d
 8005950:	08005a9f 	.word	0x08005a9f
 8005954:	080059c1 	.word	0x080059c1
 8005958:	08005a81 	.word	0x08005a81
 800595c:	0800590d 	.word	0x0800590d
 8005960:	0800590d 	.word	0x0800590d
 8005964:	08005ac1 	.word	0x08005ac1
 8005968:	0800590d 	.word	0x0800590d
 800596c:	080059c1 	.word	0x080059c1
 8005970:	0800590d 	.word	0x0800590d
 8005974:	0800590d 	.word	0x0800590d
 8005978:	08005a89 	.word	0x08005a89
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800598c:	2301      	movs	r3, #1
 800598e:	e0a4      	b.n	8005ada <_printf_i+0x1f6>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	6829      	ldr	r1, [r5, #0]
 8005994:	0606      	lsls	r6, r0, #24
 8005996:	f101 0304 	add.w	r3, r1, #4
 800599a:	d50a      	bpl.n	80059b2 <_printf_i+0xce>
 800599c:	680e      	ldr	r6, [r1, #0]
 800599e:	602b      	str	r3, [r5, #0]
 80059a0:	2e00      	cmp	r6, #0
 80059a2:	da03      	bge.n	80059ac <_printf_i+0xc8>
 80059a4:	232d      	movs	r3, #45	; 0x2d
 80059a6:	4276      	negs	r6, r6
 80059a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ac:	230a      	movs	r3, #10
 80059ae:	485e      	ldr	r0, [pc, #376]	; (8005b28 <_printf_i+0x244>)
 80059b0:	e019      	b.n	80059e6 <_printf_i+0x102>
 80059b2:	680e      	ldr	r6, [r1, #0]
 80059b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	bf18      	it	ne
 80059bc:	b236      	sxthne	r6, r6
 80059be:	e7ef      	b.n	80059a0 <_printf_i+0xbc>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	6820      	ldr	r0, [r4, #0]
 80059c4:	1d19      	adds	r1, r3, #4
 80059c6:	6029      	str	r1, [r5, #0]
 80059c8:	0601      	lsls	r1, r0, #24
 80059ca:	d501      	bpl.n	80059d0 <_printf_i+0xec>
 80059cc:	681e      	ldr	r6, [r3, #0]
 80059ce:	e002      	b.n	80059d6 <_printf_i+0xf2>
 80059d0:	0646      	lsls	r6, r0, #25
 80059d2:	d5fb      	bpl.n	80059cc <_printf_i+0xe8>
 80059d4:	881e      	ldrh	r6, [r3, #0]
 80059d6:	2f6f      	cmp	r7, #111	; 0x6f
 80059d8:	bf0c      	ite	eq
 80059da:	2308      	moveq	r3, #8
 80059dc:	230a      	movne	r3, #10
 80059de:	4852      	ldr	r0, [pc, #328]	; (8005b28 <_printf_i+0x244>)
 80059e0:	2100      	movs	r1, #0
 80059e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059e6:	6865      	ldr	r5, [r4, #4]
 80059e8:	2d00      	cmp	r5, #0
 80059ea:	bfa8      	it	ge
 80059ec:	6821      	ldrge	r1, [r4, #0]
 80059ee:	60a5      	str	r5, [r4, #8]
 80059f0:	bfa4      	itt	ge
 80059f2:	f021 0104 	bicge.w	r1, r1, #4
 80059f6:	6021      	strge	r1, [r4, #0]
 80059f8:	b90e      	cbnz	r6, 80059fe <_printf_i+0x11a>
 80059fa:	2d00      	cmp	r5, #0
 80059fc:	d04d      	beq.n	8005a9a <_printf_i+0x1b6>
 80059fe:	4615      	mov	r5, r2
 8005a00:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a04:	fb03 6711 	mls	r7, r3, r1, r6
 8005a08:	5dc7      	ldrb	r7, [r0, r7]
 8005a0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a0e:	4637      	mov	r7, r6
 8005a10:	42bb      	cmp	r3, r7
 8005a12:	460e      	mov	r6, r1
 8005a14:	d9f4      	bls.n	8005a00 <_printf_i+0x11c>
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d10b      	bne.n	8005a32 <_printf_i+0x14e>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	07de      	lsls	r6, r3, #31
 8005a1e:	d508      	bpl.n	8005a32 <_printf_i+0x14e>
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	6861      	ldr	r1, [r4, #4]
 8005a24:	4299      	cmp	r1, r3
 8005a26:	bfde      	ittt	le
 8005a28:	2330      	movle	r3, #48	; 0x30
 8005a2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a32:	1b52      	subs	r2, r2, r5
 8005a34:	6122      	str	r2, [r4, #16]
 8005a36:	464b      	mov	r3, r9
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	f8cd a000 	str.w	sl, [sp]
 8005a40:	aa03      	add	r2, sp, #12
 8005a42:	f7ff fedf 	bl	8005804 <_printf_common>
 8005a46:	3001      	adds	r0, #1
 8005a48:	d14c      	bne.n	8005ae4 <_printf_i+0x200>
 8005a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4e:	b004      	add	sp, #16
 8005a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a54:	4834      	ldr	r0, [pc, #208]	; (8005b28 <_printf_i+0x244>)
 8005a56:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a5a:	6829      	ldr	r1, [r5, #0]
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a62:	6029      	str	r1, [r5, #0]
 8005a64:	061d      	lsls	r5, r3, #24
 8005a66:	d514      	bpl.n	8005a92 <_printf_i+0x1ae>
 8005a68:	07df      	lsls	r7, r3, #31
 8005a6a:	bf44      	itt	mi
 8005a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a70:	6023      	strmi	r3, [r4, #0]
 8005a72:	b91e      	cbnz	r6, 8005a7c <_printf_i+0x198>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	f023 0320 	bic.w	r3, r3, #32
 8005a7a:	6023      	str	r3, [r4, #0]
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	e7af      	b.n	80059e0 <_printf_i+0xfc>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f043 0320 	orr.w	r3, r3, #32
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	2378      	movs	r3, #120	; 0x78
 8005a8a:	4828      	ldr	r0, [pc, #160]	; (8005b2c <_printf_i+0x248>)
 8005a8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a90:	e7e3      	b.n	8005a5a <_printf_i+0x176>
 8005a92:	0659      	lsls	r1, r3, #25
 8005a94:	bf48      	it	mi
 8005a96:	b2b6      	uxthmi	r6, r6
 8005a98:	e7e6      	b.n	8005a68 <_printf_i+0x184>
 8005a9a:	4615      	mov	r5, r2
 8005a9c:	e7bb      	b.n	8005a16 <_printf_i+0x132>
 8005a9e:	682b      	ldr	r3, [r5, #0]
 8005aa0:	6826      	ldr	r6, [r4, #0]
 8005aa2:	1d18      	adds	r0, r3, #4
 8005aa4:	6961      	ldr	r1, [r4, #20]
 8005aa6:	6028      	str	r0, [r5, #0]
 8005aa8:	0635      	lsls	r5, r6, #24
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	d501      	bpl.n	8005ab2 <_printf_i+0x1ce>
 8005aae:	6019      	str	r1, [r3, #0]
 8005ab0:	e002      	b.n	8005ab8 <_printf_i+0x1d4>
 8005ab2:	0670      	lsls	r0, r6, #25
 8005ab4:	d5fb      	bpl.n	8005aae <_printf_i+0x1ca>
 8005ab6:	8019      	strh	r1, [r3, #0]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4615      	mov	r5, r2
 8005abc:	6123      	str	r3, [r4, #16]
 8005abe:	e7ba      	b.n	8005a36 <_printf_i+0x152>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	1d1a      	adds	r2, r3, #4
 8005ac6:	602a      	str	r2, [r5, #0]
 8005ac8:	681d      	ldr	r5, [r3, #0]
 8005aca:	6862      	ldr	r2, [r4, #4]
 8005acc:	4628      	mov	r0, r5
 8005ace:	f002 faed 	bl	80080ac <memchr>
 8005ad2:	b108      	cbz	r0, 8005ad8 <_printf_i+0x1f4>
 8005ad4:	1b40      	subs	r0, r0, r5
 8005ad6:	6060      	str	r0, [r4, #4]
 8005ad8:	6863      	ldr	r3, [r4, #4]
 8005ada:	6123      	str	r3, [r4, #16]
 8005adc:	2300      	movs	r3, #0
 8005ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae2:	e7a8      	b.n	8005a36 <_printf_i+0x152>
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4640      	mov	r0, r8
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	47d0      	blx	sl
 8005aee:	3001      	adds	r0, #1
 8005af0:	d0ab      	beq.n	8005a4a <_printf_i+0x166>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	079b      	lsls	r3, r3, #30
 8005af6:	d413      	bmi.n	8005b20 <_printf_i+0x23c>
 8005af8:	68e0      	ldr	r0, [r4, #12]
 8005afa:	9b03      	ldr	r3, [sp, #12]
 8005afc:	4298      	cmp	r0, r3
 8005afe:	bfb8      	it	lt
 8005b00:	4618      	movlt	r0, r3
 8005b02:	e7a4      	b.n	8005a4e <_printf_i+0x16a>
 8005b04:	2301      	movs	r3, #1
 8005b06:	4632      	mov	r2, r6
 8005b08:	4649      	mov	r1, r9
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	47d0      	blx	sl
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d09b      	beq.n	8005a4a <_printf_i+0x166>
 8005b12:	3501      	adds	r5, #1
 8005b14:	68e3      	ldr	r3, [r4, #12]
 8005b16:	9903      	ldr	r1, [sp, #12]
 8005b18:	1a5b      	subs	r3, r3, r1
 8005b1a:	42ab      	cmp	r3, r5
 8005b1c:	dcf2      	bgt.n	8005b04 <_printf_i+0x220>
 8005b1e:	e7eb      	b.n	8005af8 <_printf_i+0x214>
 8005b20:	2500      	movs	r5, #0
 8005b22:	f104 0619 	add.w	r6, r4, #25
 8005b26:	e7f5      	b.n	8005b14 <_printf_i+0x230>
 8005b28:	08009baa 	.word	0x08009baa
 8005b2c:	08009bbb 	.word	0x08009bbb

08005b30 <_scanf_float>:
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	b087      	sub	sp, #28
 8005b36:	9303      	str	r3, [sp, #12]
 8005b38:	688b      	ldr	r3, [r1, #8]
 8005b3a:	4617      	mov	r7, r2
 8005b3c:	1e5a      	subs	r2, r3, #1
 8005b3e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005b42:	bf85      	ittet	hi
 8005b44:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005b48:	195b      	addhi	r3, r3, r5
 8005b4a:	2300      	movls	r3, #0
 8005b4c:	9302      	strhi	r3, [sp, #8]
 8005b4e:	bf88      	it	hi
 8005b50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005b54:	468b      	mov	fp, r1
 8005b56:	f04f 0500 	mov.w	r5, #0
 8005b5a:	bf8c      	ite	hi
 8005b5c:	608b      	strhi	r3, [r1, #8]
 8005b5e:	9302      	strls	r3, [sp, #8]
 8005b60:	680b      	ldr	r3, [r1, #0]
 8005b62:	4680      	mov	r8, r0
 8005b64:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005b68:	f84b 3b1c 	str.w	r3, [fp], #28
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	465e      	mov	r6, fp
 8005b70:	46aa      	mov	sl, r5
 8005b72:	46a9      	mov	r9, r5
 8005b74:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b78:	9501      	str	r5, [sp, #4]
 8005b7a:	68a2      	ldr	r2, [r4, #8]
 8005b7c:	b152      	cbz	r2, 8005b94 <_scanf_float+0x64>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b4e      	cmp	r3, #78	; 0x4e
 8005b84:	d864      	bhi.n	8005c50 <_scanf_float+0x120>
 8005b86:	2b40      	cmp	r3, #64	; 0x40
 8005b88:	d83c      	bhi.n	8005c04 <_scanf_float+0xd4>
 8005b8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005b8e:	b2c8      	uxtb	r0, r1
 8005b90:	280e      	cmp	r0, #14
 8005b92:	d93a      	bls.n	8005c0a <_scanf_float+0xda>
 8005b94:	f1b9 0f00 	cmp.w	r9, #0
 8005b98:	d003      	beq.n	8005ba2 <_scanf_float+0x72>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ba6:	f1ba 0f01 	cmp.w	sl, #1
 8005baa:	f200 8113 	bhi.w	8005dd4 <_scanf_float+0x2a4>
 8005bae:	455e      	cmp	r6, fp
 8005bb0:	f200 8105 	bhi.w	8005dbe <_scanf_float+0x28e>
 8005bb4:	2501      	movs	r5, #1
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	b007      	add	sp, #28
 8005bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005bc2:	2a0d      	cmp	r2, #13
 8005bc4:	d8e6      	bhi.n	8005b94 <_scanf_float+0x64>
 8005bc6:	a101      	add	r1, pc, #4	; (adr r1, 8005bcc <_scanf_float+0x9c>)
 8005bc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005bcc:	08005d0b 	.word	0x08005d0b
 8005bd0:	08005b95 	.word	0x08005b95
 8005bd4:	08005b95 	.word	0x08005b95
 8005bd8:	08005b95 	.word	0x08005b95
 8005bdc:	08005d6b 	.word	0x08005d6b
 8005be0:	08005d43 	.word	0x08005d43
 8005be4:	08005b95 	.word	0x08005b95
 8005be8:	08005b95 	.word	0x08005b95
 8005bec:	08005d19 	.word	0x08005d19
 8005bf0:	08005b95 	.word	0x08005b95
 8005bf4:	08005b95 	.word	0x08005b95
 8005bf8:	08005b95 	.word	0x08005b95
 8005bfc:	08005b95 	.word	0x08005b95
 8005c00:	08005cd1 	.word	0x08005cd1
 8005c04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005c08:	e7db      	b.n	8005bc2 <_scanf_float+0x92>
 8005c0a:	290e      	cmp	r1, #14
 8005c0c:	d8c2      	bhi.n	8005b94 <_scanf_float+0x64>
 8005c0e:	a001      	add	r0, pc, #4	; (adr r0, 8005c14 <_scanf_float+0xe4>)
 8005c10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c14:	08005cc3 	.word	0x08005cc3
 8005c18:	08005b95 	.word	0x08005b95
 8005c1c:	08005cc3 	.word	0x08005cc3
 8005c20:	08005d57 	.word	0x08005d57
 8005c24:	08005b95 	.word	0x08005b95
 8005c28:	08005c71 	.word	0x08005c71
 8005c2c:	08005cad 	.word	0x08005cad
 8005c30:	08005cad 	.word	0x08005cad
 8005c34:	08005cad 	.word	0x08005cad
 8005c38:	08005cad 	.word	0x08005cad
 8005c3c:	08005cad 	.word	0x08005cad
 8005c40:	08005cad 	.word	0x08005cad
 8005c44:	08005cad 	.word	0x08005cad
 8005c48:	08005cad 	.word	0x08005cad
 8005c4c:	08005cad 	.word	0x08005cad
 8005c50:	2b6e      	cmp	r3, #110	; 0x6e
 8005c52:	d809      	bhi.n	8005c68 <_scanf_float+0x138>
 8005c54:	2b60      	cmp	r3, #96	; 0x60
 8005c56:	d8b2      	bhi.n	8005bbe <_scanf_float+0x8e>
 8005c58:	2b54      	cmp	r3, #84	; 0x54
 8005c5a:	d077      	beq.n	8005d4c <_scanf_float+0x21c>
 8005c5c:	2b59      	cmp	r3, #89	; 0x59
 8005c5e:	d199      	bne.n	8005b94 <_scanf_float+0x64>
 8005c60:	2d07      	cmp	r5, #7
 8005c62:	d197      	bne.n	8005b94 <_scanf_float+0x64>
 8005c64:	2508      	movs	r5, #8
 8005c66:	e029      	b.n	8005cbc <_scanf_float+0x18c>
 8005c68:	2b74      	cmp	r3, #116	; 0x74
 8005c6a:	d06f      	beq.n	8005d4c <_scanf_float+0x21c>
 8005c6c:	2b79      	cmp	r3, #121	; 0x79
 8005c6e:	e7f6      	b.n	8005c5e <_scanf_float+0x12e>
 8005c70:	6821      	ldr	r1, [r4, #0]
 8005c72:	05c8      	lsls	r0, r1, #23
 8005c74:	d51a      	bpl.n	8005cac <_scanf_float+0x17c>
 8005c76:	9b02      	ldr	r3, [sp, #8]
 8005c78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c7c:	6021      	str	r1, [r4, #0]
 8005c7e:	f109 0901 	add.w	r9, r9, #1
 8005c82:	b11b      	cbz	r3, 8005c8c <_scanf_float+0x15c>
 8005c84:	3b01      	subs	r3, #1
 8005c86:	3201      	adds	r2, #1
 8005c88:	9302      	str	r3, [sp, #8]
 8005c8a:	60a2      	str	r2, [r4, #8]
 8005c8c:	68a3      	ldr	r3, [r4, #8]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	60a3      	str	r3, [r4, #8]
 8005c92:	6923      	ldr	r3, [r4, #16]
 8005c94:	3301      	adds	r3, #1
 8005c96:	6123      	str	r3, [r4, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	f340 8084 	ble.w	8005dac <_scanf_float+0x27c>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	e766      	b.n	8005b7a <_scanf_float+0x4a>
 8005cac:	eb1a 0f05 	cmn.w	sl, r5
 8005cb0:	f47f af70 	bne.w	8005b94 <_scanf_float+0x64>
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005cba:	6022      	str	r2, [r4, #0]
 8005cbc:	f806 3b01 	strb.w	r3, [r6], #1
 8005cc0:	e7e4      	b.n	8005c8c <_scanf_float+0x15c>
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	0610      	lsls	r0, r2, #24
 8005cc6:	f57f af65 	bpl.w	8005b94 <_scanf_float+0x64>
 8005cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cce:	e7f4      	b.n	8005cba <_scanf_float+0x18a>
 8005cd0:	f1ba 0f00 	cmp.w	sl, #0
 8005cd4:	d10e      	bne.n	8005cf4 <_scanf_float+0x1c4>
 8005cd6:	f1b9 0f00 	cmp.w	r9, #0
 8005cda:	d10e      	bne.n	8005cfa <_scanf_float+0x1ca>
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ce2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ce6:	d108      	bne.n	8005cfa <_scanf_float+0x1ca>
 8005ce8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005cec:	f04f 0a01 	mov.w	sl, #1
 8005cf0:	6022      	str	r2, [r4, #0]
 8005cf2:	e7e3      	b.n	8005cbc <_scanf_float+0x18c>
 8005cf4:	f1ba 0f02 	cmp.w	sl, #2
 8005cf8:	d055      	beq.n	8005da6 <_scanf_float+0x276>
 8005cfa:	2d01      	cmp	r5, #1
 8005cfc:	d002      	beq.n	8005d04 <_scanf_float+0x1d4>
 8005cfe:	2d04      	cmp	r5, #4
 8005d00:	f47f af48 	bne.w	8005b94 <_scanf_float+0x64>
 8005d04:	3501      	adds	r5, #1
 8005d06:	b2ed      	uxtb	r5, r5
 8005d08:	e7d8      	b.n	8005cbc <_scanf_float+0x18c>
 8005d0a:	f1ba 0f01 	cmp.w	sl, #1
 8005d0e:	f47f af41 	bne.w	8005b94 <_scanf_float+0x64>
 8005d12:	f04f 0a02 	mov.w	sl, #2
 8005d16:	e7d1      	b.n	8005cbc <_scanf_float+0x18c>
 8005d18:	b97d      	cbnz	r5, 8005d3a <_scanf_float+0x20a>
 8005d1a:	f1b9 0f00 	cmp.w	r9, #0
 8005d1e:	f47f af3c 	bne.w	8005b9a <_scanf_float+0x6a>
 8005d22:	6822      	ldr	r2, [r4, #0]
 8005d24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005d28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005d2c:	f47f af39 	bne.w	8005ba2 <_scanf_float+0x72>
 8005d30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d34:	2501      	movs	r5, #1
 8005d36:	6022      	str	r2, [r4, #0]
 8005d38:	e7c0      	b.n	8005cbc <_scanf_float+0x18c>
 8005d3a:	2d03      	cmp	r5, #3
 8005d3c:	d0e2      	beq.n	8005d04 <_scanf_float+0x1d4>
 8005d3e:	2d05      	cmp	r5, #5
 8005d40:	e7de      	b.n	8005d00 <_scanf_float+0x1d0>
 8005d42:	2d02      	cmp	r5, #2
 8005d44:	f47f af26 	bne.w	8005b94 <_scanf_float+0x64>
 8005d48:	2503      	movs	r5, #3
 8005d4a:	e7b7      	b.n	8005cbc <_scanf_float+0x18c>
 8005d4c:	2d06      	cmp	r5, #6
 8005d4e:	f47f af21 	bne.w	8005b94 <_scanf_float+0x64>
 8005d52:	2507      	movs	r5, #7
 8005d54:	e7b2      	b.n	8005cbc <_scanf_float+0x18c>
 8005d56:	6822      	ldr	r2, [r4, #0]
 8005d58:	0591      	lsls	r1, r2, #22
 8005d5a:	f57f af1b 	bpl.w	8005b94 <_scanf_float+0x64>
 8005d5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005d62:	6022      	str	r2, [r4, #0]
 8005d64:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d68:	e7a8      	b.n	8005cbc <_scanf_float+0x18c>
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005d70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005d74:	d006      	beq.n	8005d84 <_scanf_float+0x254>
 8005d76:	0550      	lsls	r0, r2, #21
 8005d78:	f57f af0c 	bpl.w	8005b94 <_scanf_float+0x64>
 8005d7c:	f1b9 0f00 	cmp.w	r9, #0
 8005d80:	f43f af0f 	beq.w	8005ba2 <_scanf_float+0x72>
 8005d84:	0591      	lsls	r1, r2, #22
 8005d86:	bf58      	it	pl
 8005d88:	9901      	ldrpl	r1, [sp, #4]
 8005d8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d8e:	bf58      	it	pl
 8005d90:	eba9 0101 	subpl.w	r1, r9, r1
 8005d94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005d98:	f04f 0900 	mov.w	r9, #0
 8005d9c:	bf58      	it	pl
 8005d9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005da2:	6022      	str	r2, [r4, #0]
 8005da4:	e78a      	b.n	8005cbc <_scanf_float+0x18c>
 8005da6:	f04f 0a03 	mov.w	sl, #3
 8005daa:	e787      	b.n	8005cbc <_scanf_float+0x18c>
 8005dac:	4639      	mov	r1, r7
 8005dae:	4640      	mov	r0, r8
 8005db0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005db4:	4798      	blx	r3
 8005db6:	2800      	cmp	r0, #0
 8005db8:	f43f aedf 	beq.w	8005b7a <_scanf_float+0x4a>
 8005dbc:	e6ea      	b.n	8005b94 <_scanf_float+0x64>
 8005dbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dc2:	463a      	mov	r2, r7
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dca:	4798      	blx	r3
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	6123      	str	r3, [r4, #16]
 8005dd2:	e6ec      	b.n	8005bae <_scanf_float+0x7e>
 8005dd4:	1e6b      	subs	r3, r5, #1
 8005dd6:	2b06      	cmp	r3, #6
 8005dd8:	d825      	bhi.n	8005e26 <_scanf_float+0x2f6>
 8005dda:	2d02      	cmp	r5, #2
 8005ddc:	d836      	bhi.n	8005e4c <_scanf_float+0x31c>
 8005dde:	455e      	cmp	r6, fp
 8005de0:	f67f aee8 	bls.w	8005bb4 <_scanf_float+0x84>
 8005de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005de8:	463a      	mov	r2, r7
 8005dea:	4640      	mov	r0, r8
 8005dec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005df0:	4798      	blx	r3
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	e7f1      	b.n	8005dde <_scanf_float+0x2ae>
 8005dfa:	9802      	ldr	r0, [sp, #8]
 8005dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005e04:	463a      	mov	r2, r7
 8005e06:	9002      	str	r0, [sp, #8]
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4798      	blx	r3
 8005e0c:	6923      	ldr	r3, [r4, #16]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	6123      	str	r3, [r4, #16]
 8005e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e16:	fa5f fa8a 	uxtb.w	sl, sl
 8005e1a:	f1ba 0f02 	cmp.w	sl, #2
 8005e1e:	d1ec      	bne.n	8005dfa <_scanf_float+0x2ca>
 8005e20:	3d03      	subs	r5, #3
 8005e22:	b2ed      	uxtb	r5, r5
 8005e24:	1b76      	subs	r6, r6, r5
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	05da      	lsls	r2, r3, #23
 8005e2a:	d52f      	bpl.n	8005e8c <_scanf_float+0x35c>
 8005e2c:	055b      	lsls	r3, r3, #21
 8005e2e:	d510      	bpl.n	8005e52 <_scanf_float+0x322>
 8005e30:	455e      	cmp	r6, fp
 8005e32:	f67f aebf 	bls.w	8005bb4 <_scanf_float+0x84>
 8005e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e3a:	463a      	mov	r2, r7
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e42:	4798      	blx	r3
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	6123      	str	r3, [r4, #16]
 8005e4a:	e7f1      	b.n	8005e30 <_scanf_float+0x300>
 8005e4c:	46aa      	mov	sl, r5
 8005e4e:	9602      	str	r6, [sp, #8]
 8005e50:	e7df      	b.n	8005e12 <_scanf_float+0x2e2>
 8005e52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	2965      	cmp	r1, #101	; 0x65
 8005e5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	d00c      	beq.n	8005e80 <_scanf_float+0x350>
 8005e66:	2945      	cmp	r1, #69	; 0x45
 8005e68:	d00a      	beq.n	8005e80 <_scanf_float+0x350>
 8005e6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e6e:	463a      	mov	r2, r7
 8005e70:	4640      	mov	r0, r8
 8005e72:	4798      	blx	r3
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	1eb5      	subs	r5, r6, #2
 8005e7e:	6123      	str	r3, [r4, #16]
 8005e80:	463a      	mov	r2, r7
 8005e82:	4640      	mov	r0, r8
 8005e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e88:	4798      	blx	r3
 8005e8a:	462e      	mov	r6, r5
 8005e8c:	6825      	ldr	r5, [r4, #0]
 8005e8e:	f015 0510 	ands.w	r5, r5, #16
 8005e92:	d155      	bne.n	8005f40 <_scanf_float+0x410>
 8005e94:	7035      	strb	r5, [r6, #0]
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea0:	d11b      	bne.n	8005eda <_scanf_float+0x3aa>
 8005ea2:	9b01      	ldr	r3, [sp, #4]
 8005ea4:	454b      	cmp	r3, r9
 8005ea6:	eba3 0209 	sub.w	r2, r3, r9
 8005eaa:	d123      	bne.n	8005ef4 <_scanf_float+0x3c4>
 8005eac:	2200      	movs	r2, #0
 8005eae:	4659      	mov	r1, fp
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	f000 fe79 	bl	8006ba8 <_strtod_r>
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	f012 0f02 	tst.w	r2, #2
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	460f      	mov	r7, r1
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	d021      	beq.n	8005f0a <_scanf_float+0x3da>
 8005ec6:	1d1a      	adds	r2, r3, #4
 8005ec8:	9903      	ldr	r1, [sp, #12]
 8005eca:	600a      	str	r2, [r1, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	e9c3 6700 	strd	r6, r7, [r3]
 8005ed2:	68e3      	ldr	r3, [r4, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60e3      	str	r3, [r4, #12]
 8005ed8:	e66d      	b.n	8005bb6 <_scanf_float+0x86>
 8005eda:	9b04      	ldr	r3, [sp, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0e5      	beq.n	8005eac <_scanf_float+0x37c>
 8005ee0:	9905      	ldr	r1, [sp, #20]
 8005ee2:	230a      	movs	r3, #10
 8005ee4:	462a      	mov	r2, r5
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	3101      	adds	r1, #1
 8005eea:	f000 fedf 	bl	8006cac <_strtol_r>
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	9e05      	ldr	r6, [sp, #20]
 8005ef2:	1ac2      	subs	r2, r0, r3
 8005ef4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005ef8:	429e      	cmp	r6, r3
 8005efa:	bf28      	it	cs
 8005efc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005f00:	4630      	mov	r0, r6
 8005f02:	4910      	ldr	r1, [pc, #64]	; (8005f44 <_scanf_float+0x414>)
 8005f04:	f000 f826 	bl	8005f54 <siprintf>
 8005f08:	e7d0      	b.n	8005eac <_scanf_float+0x37c>
 8005f0a:	f012 0f04 	tst.w	r2, #4
 8005f0e:	f103 0204 	add.w	r2, r3, #4
 8005f12:	d1d9      	bne.n	8005ec8 <_scanf_float+0x398>
 8005f14:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005f18:	f8cc 2000 	str.w	r2, [ip]
 8005f1c:	f8d3 8000 	ldr.w	r8, [r3]
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	f7fa fde2 	bl	8000aec <__aeabi_dcmpun>
 8005f28:	b128      	cbz	r0, 8005f36 <_scanf_float+0x406>
 8005f2a:	4807      	ldr	r0, [pc, #28]	; (8005f48 <_scanf_float+0x418>)
 8005f2c:	f000 f80e 	bl	8005f4c <nanf>
 8005f30:	f8c8 0000 	str.w	r0, [r8]
 8005f34:	e7cd      	b.n	8005ed2 <_scanf_float+0x3a2>
 8005f36:	4630      	mov	r0, r6
 8005f38:	4639      	mov	r1, r7
 8005f3a:	f7fa fe35 	bl	8000ba8 <__aeabi_d2f>
 8005f3e:	e7f7      	b.n	8005f30 <_scanf_float+0x400>
 8005f40:	2500      	movs	r5, #0
 8005f42:	e638      	b.n	8005bb6 <_scanf_float+0x86>
 8005f44:	08009bcc 	.word	0x08009bcc
 8005f48:	08009fd8 	.word	0x08009fd8

08005f4c <nanf>:
 8005f4c:	4800      	ldr	r0, [pc, #0]	; (8005f50 <nanf+0x4>)
 8005f4e:	4770      	bx	lr
 8005f50:	7fc00000 	.word	0x7fc00000

08005f54 <siprintf>:
 8005f54:	b40e      	push	{r1, r2, r3}
 8005f56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f5a:	b500      	push	{lr}
 8005f5c:	b09c      	sub	sp, #112	; 0x70
 8005f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f60:	9002      	str	r0, [sp, #8]
 8005f62:	9006      	str	r0, [sp, #24]
 8005f64:	9107      	str	r1, [sp, #28]
 8005f66:	9104      	str	r1, [sp, #16]
 8005f68:	4808      	ldr	r0, [pc, #32]	; (8005f8c <siprintf+0x38>)
 8005f6a:	4909      	ldr	r1, [pc, #36]	; (8005f90 <siprintf+0x3c>)
 8005f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f70:	9105      	str	r1, [sp, #20]
 8005f72:	6800      	ldr	r0, [r0, #0]
 8005f74:	a902      	add	r1, sp, #8
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	f002 feaa 	bl	8008cd0 <_svfiprintf_r>
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	9b02      	ldr	r3, [sp, #8]
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	b01c      	add	sp, #112	; 0x70
 8005f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f88:	b003      	add	sp, #12
 8005f8a:	4770      	bx	lr
 8005f8c:	20000010 	.word	0x20000010
 8005f90:	ffff0208 	.word	0xffff0208

08005f94 <sulp>:
 8005f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f98:	460f      	mov	r7, r1
 8005f9a:	4690      	mov	r8, r2
 8005f9c:	f002 fc04 	bl	80087a8 <__ulp>
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	f1b8 0f00 	cmp.w	r8, #0
 8005fa8:	d011      	beq.n	8005fce <sulp+0x3a>
 8005faa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005fae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dd0b      	ble.n	8005fce <sulp+0x3a>
 8005fb6:	2400      	movs	r4, #0
 8005fb8:	051b      	lsls	r3, r3, #20
 8005fba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005fbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	f7fa faf7 	bl	80005b8 <__aeabi_dmul>
 8005fca:	4604      	mov	r4, r0
 8005fcc:	460d      	mov	r5, r1
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005fd8 <_strtod_l>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	469b      	mov	fp, r3
 8005fde:	2300      	movs	r3, #0
 8005fe0:	b09f      	sub	sp, #124	; 0x7c
 8005fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fe4:	4b9e      	ldr	r3, [pc, #632]	; (8006260 <_strtod_l+0x288>)
 8005fe6:	4682      	mov	sl, r0
 8005fe8:	681f      	ldr	r7, [r3, #0]
 8005fea:	460e      	mov	r6, r1
 8005fec:	4638      	mov	r0, r7
 8005fee:	9215      	str	r2, [sp, #84]	; 0x54
 8005ff0:	f7fa f91e 	bl	8000230 <strlen>
 8005ff4:	f04f 0800 	mov.w	r8, #0
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	f04f 0900 	mov.w	r9, #0
 8005ffe:	9619      	str	r6, [sp, #100]	; 0x64
 8006000:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	2a2b      	cmp	r2, #43	; 0x2b
 8006006:	d04c      	beq.n	80060a2 <_strtod_l+0xca>
 8006008:	d83a      	bhi.n	8006080 <_strtod_l+0xa8>
 800600a:	2a0d      	cmp	r2, #13
 800600c:	d833      	bhi.n	8006076 <_strtod_l+0x9e>
 800600e:	2a08      	cmp	r2, #8
 8006010:	d833      	bhi.n	800607a <_strtod_l+0xa2>
 8006012:	2a00      	cmp	r2, #0
 8006014:	d03d      	beq.n	8006092 <_strtod_l+0xba>
 8006016:	2300      	movs	r3, #0
 8006018:	930a      	str	r3, [sp, #40]	; 0x28
 800601a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800601c:	782b      	ldrb	r3, [r5, #0]
 800601e:	2b30      	cmp	r3, #48	; 0x30
 8006020:	f040 80aa 	bne.w	8006178 <_strtod_l+0x1a0>
 8006024:	786b      	ldrb	r3, [r5, #1]
 8006026:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800602a:	2b58      	cmp	r3, #88	; 0x58
 800602c:	d166      	bne.n	80060fc <_strtod_l+0x124>
 800602e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006030:	4650      	mov	r0, sl
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	ab1a      	add	r3, sp, #104	; 0x68
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	4a8a      	ldr	r2, [pc, #552]	; (8006264 <_strtod_l+0x28c>)
 800603a:	f8cd b008 	str.w	fp, [sp, #8]
 800603e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006040:	a919      	add	r1, sp, #100	; 0x64
 8006042:	f001 fd17 	bl	8007a74 <__gethex>
 8006046:	f010 0607 	ands.w	r6, r0, #7
 800604a:	4604      	mov	r4, r0
 800604c:	d005      	beq.n	800605a <_strtod_l+0x82>
 800604e:	2e06      	cmp	r6, #6
 8006050:	d129      	bne.n	80060a6 <_strtod_l+0xce>
 8006052:	2300      	movs	r3, #0
 8006054:	3501      	adds	r5, #1
 8006056:	9519      	str	r5, [sp, #100]	; 0x64
 8006058:	930a      	str	r3, [sp, #40]	; 0x28
 800605a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800605c:	2b00      	cmp	r3, #0
 800605e:	f040 858a 	bne.w	8006b76 <_strtod_l+0xb9e>
 8006062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006064:	b1d3      	cbz	r3, 800609c <_strtod_l+0xc4>
 8006066:	4642      	mov	r2, r8
 8006068:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800606c:	4610      	mov	r0, r2
 800606e:	4619      	mov	r1, r3
 8006070:	b01f      	add	sp, #124	; 0x7c
 8006072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006076:	2a20      	cmp	r2, #32
 8006078:	d1cd      	bne.n	8006016 <_strtod_l+0x3e>
 800607a:	3301      	adds	r3, #1
 800607c:	9319      	str	r3, [sp, #100]	; 0x64
 800607e:	e7bf      	b.n	8006000 <_strtod_l+0x28>
 8006080:	2a2d      	cmp	r2, #45	; 0x2d
 8006082:	d1c8      	bne.n	8006016 <_strtod_l+0x3e>
 8006084:	2201      	movs	r2, #1
 8006086:	920a      	str	r2, [sp, #40]	; 0x28
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	9219      	str	r2, [sp, #100]	; 0x64
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1c3      	bne.n	800601a <_strtod_l+0x42>
 8006092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006094:	9619      	str	r6, [sp, #100]	; 0x64
 8006096:	2b00      	cmp	r3, #0
 8006098:	f040 856b 	bne.w	8006b72 <_strtod_l+0xb9a>
 800609c:	4642      	mov	r2, r8
 800609e:	464b      	mov	r3, r9
 80060a0:	e7e4      	b.n	800606c <_strtod_l+0x94>
 80060a2:	2200      	movs	r2, #0
 80060a4:	e7ef      	b.n	8006086 <_strtod_l+0xae>
 80060a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80060a8:	b13a      	cbz	r2, 80060ba <_strtod_l+0xe2>
 80060aa:	2135      	movs	r1, #53	; 0x35
 80060ac:	a81c      	add	r0, sp, #112	; 0x70
 80060ae:	f002 fc7f 	bl	80089b0 <__copybits>
 80060b2:	4650      	mov	r0, sl
 80060b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80060b6:	f002 f847 	bl	8008148 <_Bfree>
 80060ba:	3e01      	subs	r6, #1
 80060bc:	2e04      	cmp	r6, #4
 80060be:	d806      	bhi.n	80060ce <_strtod_l+0xf6>
 80060c0:	e8df f006 	tbb	[pc, r6]
 80060c4:	1714030a 	.word	0x1714030a
 80060c8:	0a          	.byte	0x0a
 80060c9:	00          	.byte	0x00
 80060ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80060ce:	0721      	lsls	r1, r4, #28
 80060d0:	d5c3      	bpl.n	800605a <_strtod_l+0x82>
 80060d2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80060d6:	e7c0      	b.n	800605a <_strtod_l+0x82>
 80060d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80060da:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80060de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80060e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060e6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80060ea:	e7f0      	b.n	80060ce <_strtod_l+0xf6>
 80060ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006268 <_strtod_l+0x290>
 80060f0:	e7ed      	b.n	80060ce <_strtod_l+0xf6>
 80060f2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80060f6:	f04f 38ff 	mov.w	r8, #4294967295
 80060fa:	e7e8      	b.n	80060ce <_strtod_l+0xf6>
 80060fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	9219      	str	r2, [sp, #100]	; 0x64
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b30      	cmp	r3, #48	; 0x30
 8006106:	d0f9      	beq.n	80060fc <_strtod_l+0x124>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0a6      	beq.n	800605a <_strtod_l+0x82>
 800610c:	2301      	movs	r3, #1
 800610e:	9307      	str	r3, [sp, #28]
 8006110:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006112:	220a      	movs	r2, #10
 8006114:	9308      	str	r3, [sp, #32]
 8006116:	2300      	movs	r3, #0
 8006118:	469b      	mov	fp, r3
 800611a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800611e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006120:	7805      	ldrb	r5, [r0, #0]
 8006122:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006126:	b2d9      	uxtb	r1, r3
 8006128:	2909      	cmp	r1, #9
 800612a:	d927      	bls.n	800617c <_strtod_l+0x1a4>
 800612c:	4622      	mov	r2, r4
 800612e:	4639      	mov	r1, r7
 8006130:	f002 fee4 	bl	8008efc <strncmp>
 8006134:	2800      	cmp	r0, #0
 8006136:	d033      	beq.n	80061a0 <_strtod_l+0x1c8>
 8006138:	2000      	movs	r0, #0
 800613a:	462a      	mov	r2, r5
 800613c:	465c      	mov	r4, fp
 800613e:	4603      	mov	r3, r0
 8006140:	9004      	str	r0, [sp, #16]
 8006142:	2a65      	cmp	r2, #101	; 0x65
 8006144:	d001      	beq.n	800614a <_strtod_l+0x172>
 8006146:	2a45      	cmp	r2, #69	; 0x45
 8006148:	d114      	bne.n	8006174 <_strtod_l+0x19c>
 800614a:	b91c      	cbnz	r4, 8006154 <_strtod_l+0x17c>
 800614c:	9a07      	ldr	r2, [sp, #28]
 800614e:	4302      	orrs	r2, r0
 8006150:	d09f      	beq.n	8006092 <_strtod_l+0xba>
 8006152:	2400      	movs	r4, #0
 8006154:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006156:	1c72      	adds	r2, r6, #1
 8006158:	9219      	str	r2, [sp, #100]	; 0x64
 800615a:	7872      	ldrb	r2, [r6, #1]
 800615c:	2a2b      	cmp	r2, #43	; 0x2b
 800615e:	d079      	beq.n	8006254 <_strtod_l+0x27c>
 8006160:	2a2d      	cmp	r2, #45	; 0x2d
 8006162:	f000 8083 	beq.w	800626c <_strtod_l+0x294>
 8006166:	2700      	movs	r7, #0
 8006168:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800616c:	2909      	cmp	r1, #9
 800616e:	f240 8083 	bls.w	8006278 <_strtod_l+0x2a0>
 8006172:	9619      	str	r6, [sp, #100]	; 0x64
 8006174:	2500      	movs	r5, #0
 8006176:	e09f      	b.n	80062b8 <_strtod_l+0x2e0>
 8006178:	2300      	movs	r3, #0
 800617a:	e7c8      	b.n	800610e <_strtod_l+0x136>
 800617c:	f1bb 0f08 	cmp.w	fp, #8
 8006180:	bfd5      	itete	le
 8006182:	9906      	ldrle	r1, [sp, #24]
 8006184:	9905      	ldrgt	r1, [sp, #20]
 8006186:	fb02 3301 	mlale	r3, r2, r1, r3
 800618a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800618e:	f100 0001 	add.w	r0, r0, #1
 8006192:	bfd4      	ite	le
 8006194:	9306      	strle	r3, [sp, #24]
 8006196:	9305      	strgt	r3, [sp, #20]
 8006198:	f10b 0b01 	add.w	fp, fp, #1
 800619c:	9019      	str	r0, [sp, #100]	; 0x64
 800619e:	e7be      	b.n	800611e <_strtod_l+0x146>
 80061a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061a2:	191a      	adds	r2, r3, r4
 80061a4:	9219      	str	r2, [sp, #100]	; 0x64
 80061a6:	5d1a      	ldrb	r2, [r3, r4]
 80061a8:	f1bb 0f00 	cmp.w	fp, #0
 80061ac:	d036      	beq.n	800621c <_strtod_l+0x244>
 80061ae:	465c      	mov	r4, fp
 80061b0:	9004      	str	r0, [sp, #16]
 80061b2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80061b6:	2b09      	cmp	r3, #9
 80061b8:	d912      	bls.n	80061e0 <_strtod_l+0x208>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e7c1      	b.n	8006142 <_strtod_l+0x16a>
 80061be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061c0:	3001      	adds	r0, #1
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	9219      	str	r2, [sp, #100]	; 0x64
 80061c6:	785a      	ldrb	r2, [r3, #1]
 80061c8:	2a30      	cmp	r2, #48	; 0x30
 80061ca:	d0f8      	beq.n	80061be <_strtod_l+0x1e6>
 80061cc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	f200 84d5 	bhi.w	8006b80 <_strtod_l+0xba8>
 80061d6:	9004      	str	r0, [sp, #16]
 80061d8:	2000      	movs	r0, #0
 80061da:	4604      	mov	r4, r0
 80061dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061de:	9308      	str	r3, [sp, #32]
 80061e0:	3a30      	subs	r2, #48	; 0x30
 80061e2:	f100 0301 	add.w	r3, r0, #1
 80061e6:	d013      	beq.n	8006210 <_strtod_l+0x238>
 80061e8:	9904      	ldr	r1, [sp, #16]
 80061ea:	1905      	adds	r5, r0, r4
 80061ec:	4419      	add	r1, r3
 80061ee:	9104      	str	r1, [sp, #16]
 80061f0:	4623      	mov	r3, r4
 80061f2:	210a      	movs	r1, #10
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	d113      	bne.n	8006220 <_strtod_l+0x248>
 80061f8:	1823      	adds	r3, r4, r0
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	f104 0401 	add.w	r4, r4, #1
 8006200:	4404      	add	r4, r0
 8006202:	dc1b      	bgt.n	800623c <_strtod_l+0x264>
 8006204:	230a      	movs	r3, #10
 8006206:	9906      	ldr	r1, [sp, #24]
 8006208:	fb03 2301 	mla	r3, r3, r1, r2
 800620c:	9306      	str	r3, [sp, #24]
 800620e:	2300      	movs	r3, #0
 8006210:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006212:	4618      	mov	r0, r3
 8006214:	1c51      	adds	r1, r2, #1
 8006216:	9119      	str	r1, [sp, #100]	; 0x64
 8006218:	7852      	ldrb	r2, [r2, #1]
 800621a:	e7ca      	b.n	80061b2 <_strtod_l+0x1da>
 800621c:	4658      	mov	r0, fp
 800621e:	e7d3      	b.n	80061c8 <_strtod_l+0x1f0>
 8006220:	2b08      	cmp	r3, #8
 8006222:	dc04      	bgt.n	800622e <_strtod_l+0x256>
 8006224:	9f06      	ldr	r7, [sp, #24]
 8006226:	434f      	muls	r7, r1
 8006228:	9706      	str	r7, [sp, #24]
 800622a:	3301      	adds	r3, #1
 800622c:	e7e2      	b.n	80061f4 <_strtod_l+0x21c>
 800622e:	1c5f      	adds	r7, r3, #1
 8006230:	2f10      	cmp	r7, #16
 8006232:	bfde      	ittt	le
 8006234:	9f05      	ldrle	r7, [sp, #20]
 8006236:	434f      	mulle	r7, r1
 8006238:	9705      	strle	r7, [sp, #20]
 800623a:	e7f6      	b.n	800622a <_strtod_l+0x252>
 800623c:	2c10      	cmp	r4, #16
 800623e:	bfdf      	itttt	le
 8006240:	230a      	movle	r3, #10
 8006242:	9905      	ldrle	r1, [sp, #20]
 8006244:	fb03 2301 	mlale	r3, r3, r1, r2
 8006248:	9305      	strle	r3, [sp, #20]
 800624a:	e7e0      	b.n	800620e <_strtod_l+0x236>
 800624c:	2300      	movs	r3, #0
 800624e:	9304      	str	r3, [sp, #16]
 8006250:	2301      	movs	r3, #1
 8006252:	e77b      	b.n	800614c <_strtod_l+0x174>
 8006254:	2700      	movs	r7, #0
 8006256:	1cb2      	adds	r2, r6, #2
 8006258:	9219      	str	r2, [sp, #100]	; 0x64
 800625a:	78b2      	ldrb	r2, [r6, #2]
 800625c:	e784      	b.n	8006168 <_strtod_l+0x190>
 800625e:	bf00      	nop
 8006260:	08009e20 	.word	0x08009e20
 8006264:	08009bd4 	.word	0x08009bd4
 8006268:	7ff00000 	.word	0x7ff00000
 800626c:	2701      	movs	r7, #1
 800626e:	e7f2      	b.n	8006256 <_strtod_l+0x27e>
 8006270:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006272:	1c51      	adds	r1, r2, #1
 8006274:	9119      	str	r1, [sp, #100]	; 0x64
 8006276:	7852      	ldrb	r2, [r2, #1]
 8006278:	2a30      	cmp	r2, #48	; 0x30
 800627a:	d0f9      	beq.n	8006270 <_strtod_l+0x298>
 800627c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006280:	2908      	cmp	r1, #8
 8006282:	f63f af77 	bhi.w	8006174 <_strtod_l+0x19c>
 8006286:	f04f 0e0a 	mov.w	lr, #10
 800628a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800628e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006290:	9209      	str	r2, [sp, #36]	; 0x24
 8006292:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006294:	1c51      	adds	r1, r2, #1
 8006296:	9119      	str	r1, [sp, #100]	; 0x64
 8006298:	7852      	ldrb	r2, [r2, #1]
 800629a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800629e:	2d09      	cmp	r5, #9
 80062a0:	d935      	bls.n	800630e <_strtod_l+0x336>
 80062a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80062a4:	1b49      	subs	r1, r1, r5
 80062a6:	2908      	cmp	r1, #8
 80062a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80062ac:	dc02      	bgt.n	80062b4 <_strtod_l+0x2dc>
 80062ae:	4565      	cmp	r5, ip
 80062b0:	bfa8      	it	ge
 80062b2:	4665      	movge	r5, ip
 80062b4:	b107      	cbz	r7, 80062b8 <_strtod_l+0x2e0>
 80062b6:	426d      	negs	r5, r5
 80062b8:	2c00      	cmp	r4, #0
 80062ba:	d14c      	bne.n	8006356 <_strtod_l+0x37e>
 80062bc:	9907      	ldr	r1, [sp, #28]
 80062be:	4301      	orrs	r1, r0
 80062c0:	f47f aecb 	bne.w	800605a <_strtod_l+0x82>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f47f aee4 	bne.w	8006092 <_strtod_l+0xba>
 80062ca:	2a69      	cmp	r2, #105	; 0x69
 80062cc:	d026      	beq.n	800631c <_strtod_l+0x344>
 80062ce:	dc23      	bgt.n	8006318 <_strtod_l+0x340>
 80062d0:	2a49      	cmp	r2, #73	; 0x49
 80062d2:	d023      	beq.n	800631c <_strtod_l+0x344>
 80062d4:	2a4e      	cmp	r2, #78	; 0x4e
 80062d6:	f47f aedc 	bne.w	8006092 <_strtod_l+0xba>
 80062da:	499d      	ldr	r1, [pc, #628]	; (8006550 <_strtod_l+0x578>)
 80062dc:	a819      	add	r0, sp, #100	; 0x64
 80062de:	f001 fe17 	bl	8007f10 <__match>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	f43f aed5 	beq.w	8006092 <_strtod_l+0xba>
 80062e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b28      	cmp	r3, #40	; 0x28
 80062ee:	d12c      	bne.n	800634a <_strtod_l+0x372>
 80062f0:	4998      	ldr	r1, [pc, #608]	; (8006554 <_strtod_l+0x57c>)
 80062f2:	aa1c      	add	r2, sp, #112	; 0x70
 80062f4:	a819      	add	r0, sp, #100	; 0x64
 80062f6:	f001 fe1f 	bl	8007f38 <__hexnan>
 80062fa:	2805      	cmp	r0, #5
 80062fc:	d125      	bne.n	800634a <_strtod_l+0x372>
 80062fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006300:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006304:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006308:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800630c:	e6a5      	b.n	800605a <_strtod_l+0x82>
 800630e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006312:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006316:	e7bc      	b.n	8006292 <_strtod_l+0x2ba>
 8006318:	2a6e      	cmp	r2, #110	; 0x6e
 800631a:	e7dc      	b.n	80062d6 <_strtod_l+0x2fe>
 800631c:	498e      	ldr	r1, [pc, #568]	; (8006558 <_strtod_l+0x580>)
 800631e:	a819      	add	r0, sp, #100	; 0x64
 8006320:	f001 fdf6 	bl	8007f10 <__match>
 8006324:	2800      	cmp	r0, #0
 8006326:	f43f aeb4 	beq.w	8006092 <_strtod_l+0xba>
 800632a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800632c:	498b      	ldr	r1, [pc, #556]	; (800655c <_strtod_l+0x584>)
 800632e:	3b01      	subs	r3, #1
 8006330:	a819      	add	r0, sp, #100	; 0x64
 8006332:	9319      	str	r3, [sp, #100]	; 0x64
 8006334:	f001 fdec 	bl	8007f10 <__match>
 8006338:	b910      	cbnz	r0, 8006340 <_strtod_l+0x368>
 800633a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800633c:	3301      	adds	r3, #1
 800633e:	9319      	str	r3, [sp, #100]	; 0x64
 8006340:	f04f 0800 	mov.w	r8, #0
 8006344:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006560 <_strtod_l+0x588>
 8006348:	e687      	b.n	800605a <_strtod_l+0x82>
 800634a:	4886      	ldr	r0, [pc, #536]	; (8006564 <_strtod_l+0x58c>)
 800634c:	f002 fdc0 	bl	8008ed0 <nan>
 8006350:	4680      	mov	r8, r0
 8006352:	4689      	mov	r9, r1
 8006354:	e681      	b.n	800605a <_strtod_l+0x82>
 8006356:	9b04      	ldr	r3, [sp, #16]
 8006358:	f1bb 0f00 	cmp.w	fp, #0
 800635c:	bf08      	it	eq
 800635e:	46a3      	moveq	fp, r4
 8006360:	1aeb      	subs	r3, r5, r3
 8006362:	2c10      	cmp	r4, #16
 8006364:	9806      	ldr	r0, [sp, #24]
 8006366:	4626      	mov	r6, r4
 8006368:	9307      	str	r3, [sp, #28]
 800636a:	bfa8      	it	ge
 800636c:	2610      	movge	r6, #16
 800636e:	f7fa f8a9 	bl	80004c4 <__aeabi_ui2d>
 8006372:	2c09      	cmp	r4, #9
 8006374:	4680      	mov	r8, r0
 8006376:	4689      	mov	r9, r1
 8006378:	dd13      	ble.n	80063a2 <_strtod_l+0x3ca>
 800637a:	4b7b      	ldr	r3, [pc, #492]	; (8006568 <_strtod_l+0x590>)
 800637c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006380:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006384:	f7fa f918 	bl	80005b8 <__aeabi_dmul>
 8006388:	4680      	mov	r8, r0
 800638a:	9805      	ldr	r0, [sp, #20]
 800638c:	4689      	mov	r9, r1
 800638e:	f7fa f899 	bl	80004c4 <__aeabi_ui2d>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4640      	mov	r0, r8
 8006398:	4649      	mov	r1, r9
 800639a:	f7f9 ff57 	bl	800024c <__adddf3>
 800639e:	4680      	mov	r8, r0
 80063a0:	4689      	mov	r9, r1
 80063a2:	2c0f      	cmp	r4, #15
 80063a4:	dc36      	bgt.n	8006414 <_strtod_l+0x43c>
 80063a6:	9b07      	ldr	r3, [sp, #28]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f43f ae56 	beq.w	800605a <_strtod_l+0x82>
 80063ae:	dd22      	ble.n	80063f6 <_strtod_l+0x41e>
 80063b0:	2b16      	cmp	r3, #22
 80063b2:	dc09      	bgt.n	80063c8 <_strtod_l+0x3f0>
 80063b4:	496c      	ldr	r1, [pc, #432]	; (8006568 <_strtod_l+0x590>)
 80063b6:	4642      	mov	r2, r8
 80063b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063bc:	464b      	mov	r3, r9
 80063be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063c2:	f7fa f8f9 	bl	80005b8 <__aeabi_dmul>
 80063c6:	e7c3      	b.n	8006350 <_strtod_l+0x378>
 80063c8:	9a07      	ldr	r2, [sp, #28]
 80063ca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80063ce:	4293      	cmp	r3, r2
 80063d0:	db20      	blt.n	8006414 <_strtod_l+0x43c>
 80063d2:	4d65      	ldr	r5, [pc, #404]	; (8006568 <_strtod_l+0x590>)
 80063d4:	f1c4 040f 	rsb	r4, r4, #15
 80063d8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80063dc:	4642      	mov	r2, r8
 80063de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063e2:	464b      	mov	r3, r9
 80063e4:	f7fa f8e8 	bl	80005b8 <__aeabi_dmul>
 80063e8:	9b07      	ldr	r3, [sp, #28]
 80063ea:	1b1c      	subs	r4, r3, r4
 80063ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80063f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063f4:	e7e5      	b.n	80063c2 <_strtod_l+0x3ea>
 80063f6:	9b07      	ldr	r3, [sp, #28]
 80063f8:	3316      	adds	r3, #22
 80063fa:	db0b      	blt.n	8006414 <_strtod_l+0x43c>
 80063fc:	9b04      	ldr	r3, [sp, #16]
 80063fe:	4640      	mov	r0, r8
 8006400:	1b5d      	subs	r5, r3, r5
 8006402:	4b59      	ldr	r3, [pc, #356]	; (8006568 <_strtod_l+0x590>)
 8006404:	4649      	mov	r1, r9
 8006406:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800640a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800640e:	f7fa f9fd 	bl	800080c <__aeabi_ddiv>
 8006412:	e79d      	b.n	8006350 <_strtod_l+0x378>
 8006414:	9b07      	ldr	r3, [sp, #28]
 8006416:	1ba6      	subs	r6, r4, r6
 8006418:	441e      	add	r6, r3
 800641a:	2e00      	cmp	r6, #0
 800641c:	dd74      	ble.n	8006508 <_strtod_l+0x530>
 800641e:	f016 030f 	ands.w	r3, r6, #15
 8006422:	d00a      	beq.n	800643a <_strtod_l+0x462>
 8006424:	4950      	ldr	r1, [pc, #320]	; (8006568 <_strtod_l+0x590>)
 8006426:	4642      	mov	r2, r8
 8006428:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800642c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006430:	464b      	mov	r3, r9
 8006432:	f7fa f8c1 	bl	80005b8 <__aeabi_dmul>
 8006436:	4680      	mov	r8, r0
 8006438:	4689      	mov	r9, r1
 800643a:	f036 060f 	bics.w	r6, r6, #15
 800643e:	d052      	beq.n	80064e6 <_strtod_l+0x50e>
 8006440:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006444:	dd27      	ble.n	8006496 <_strtod_l+0x4be>
 8006446:	f04f 0b00 	mov.w	fp, #0
 800644a:	f8cd b010 	str.w	fp, [sp, #16]
 800644e:	f8cd b020 	str.w	fp, [sp, #32]
 8006452:	f8cd b018 	str.w	fp, [sp, #24]
 8006456:	2322      	movs	r3, #34	; 0x22
 8006458:	f04f 0800 	mov.w	r8, #0
 800645c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006560 <_strtod_l+0x588>
 8006460:	f8ca 3000 	str.w	r3, [sl]
 8006464:	9b08      	ldr	r3, [sp, #32]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f43f adf7 	beq.w	800605a <_strtod_l+0x82>
 800646c:	4650      	mov	r0, sl
 800646e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006470:	f001 fe6a 	bl	8008148 <_Bfree>
 8006474:	4650      	mov	r0, sl
 8006476:	9906      	ldr	r1, [sp, #24]
 8006478:	f001 fe66 	bl	8008148 <_Bfree>
 800647c:	4650      	mov	r0, sl
 800647e:	9904      	ldr	r1, [sp, #16]
 8006480:	f001 fe62 	bl	8008148 <_Bfree>
 8006484:	4650      	mov	r0, sl
 8006486:	9908      	ldr	r1, [sp, #32]
 8006488:	f001 fe5e 	bl	8008148 <_Bfree>
 800648c:	4659      	mov	r1, fp
 800648e:	4650      	mov	r0, sl
 8006490:	f001 fe5a 	bl	8008148 <_Bfree>
 8006494:	e5e1      	b.n	800605a <_strtod_l+0x82>
 8006496:	4b35      	ldr	r3, [pc, #212]	; (800656c <_strtod_l+0x594>)
 8006498:	4640      	mov	r0, r8
 800649a:	9305      	str	r3, [sp, #20]
 800649c:	2300      	movs	r3, #0
 800649e:	4649      	mov	r1, r9
 80064a0:	461f      	mov	r7, r3
 80064a2:	1136      	asrs	r6, r6, #4
 80064a4:	2e01      	cmp	r6, #1
 80064a6:	dc21      	bgt.n	80064ec <_strtod_l+0x514>
 80064a8:	b10b      	cbz	r3, 80064ae <_strtod_l+0x4d6>
 80064aa:	4680      	mov	r8, r0
 80064ac:	4689      	mov	r9, r1
 80064ae:	4b2f      	ldr	r3, [pc, #188]	; (800656c <_strtod_l+0x594>)
 80064b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80064b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80064b8:	4642      	mov	r2, r8
 80064ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064be:	464b      	mov	r3, r9
 80064c0:	f7fa f87a 	bl	80005b8 <__aeabi_dmul>
 80064c4:	4b26      	ldr	r3, [pc, #152]	; (8006560 <_strtod_l+0x588>)
 80064c6:	460a      	mov	r2, r1
 80064c8:	400b      	ands	r3, r1
 80064ca:	4929      	ldr	r1, [pc, #164]	; (8006570 <_strtod_l+0x598>)
 80064cc:	4680      	mov	r8, r0
 80064ce:	428b      	cmp	r3, r1
 80064d0:	d8b9      	bhi.n	8006446 <_strtod_l+0x46e>
 80064d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80064d6:	428b      	cmp	r3, r1
 80064d8:	bf86      	itte	hi
 80064da:	f04f 38ff 	movhi.w	r8, #4294967295
 80064de:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006574 <_strtod_l+0x59c>
 80064e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80064e6:	2300      	movs	r3, #0
 80064e8:	9305      	str	r3, [sp, #20]
 80064ea:	e07f      	b.n	80065ec <_strtod_l+0x614>
 80064ec:	07f2      	lsls	r2, r6, #31
 80064ee:	d505      	bpl.n	80064fc <_strtod_l+0x524>
 80064f0:	9b05      	ldr	r3, [sp, #20]
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f85f 	bl	80005b8 <__aeabi_dmul>
 80064fa:	2301      	movs	r3, #1
 80064fc:	9a05      	ldr	r2, [sp, #20]
 80064fe:	3701      	adds	r7, #1
 8006500:	3208      	adds	r2, #8
 8006502:	1076      	asrs	r6, r6, #1
 8006504:	9205      	str	r2, [sp, #20]
 8006506:	e7cd      	b.n	80064a4 <_strtod_l+0x4cc>
 8006508:	d0ed      	beq.n	80064e6 <_strtod_l+0x50e>
 800650a:	4276      	negs	r6, r6
 800650c:	f016 020f 	ands.w	r2, r6, #15
 8006510:	d00a      	beq.n	8006528 <_strtod_l+0x550>
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <_strtod_l+0x590>)
 8006514:	4640      	mov	r0, r8
 8006516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800651a:	4649      	mov	r1, r9
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f7fa f974 	bl	800080c <__aeabi_ddiv>
 8006524:	4680      	mov	r8, r0
 8006526:	4689      	mov	r9, r1
 8006528:	1136      	asrs	r6, r6, #4
 800652a:	d0dc      	beq.n	80064e6 <_strtod_l+0x50e>
 800652c:	2e1f      	cmp	r6, #31
 800652e:	dd23      	ble.n	8006578 <_strtod_l+0x5a0>
 8006530:	f04f 0b00 	mov.w	fp, #0
 8006534:	f8cd b010 	str.w	fp, [sp, #16]
 8006538:	f8cd b020 	str.w	fp, [sp, #32]
 800653c:	f8cd b018 	str.w	fp, [sp, #24]
 8006540:	2322      	movs	r3, #34	; 0x22
 8006542:	f04f 0800 	mov.w	r8, #0
 8006546:	f04f 0900 	mov.w	r9, #0
 800654a:	f8ca 3000 	str.w	r3, [sl]
 800654e:	e789      	b.n	8006464 <_strtod_l+0x48c>
 8006550:	08009ba5 	.word	0x08009ba5
 8006554:	08009be8 	.word	0x08009be8
 8006558:	08009b9d 	.word	0x08009b9d
 800655c:	08009d2c 	.word	0x08009d2c
 8006560:	7ff00000 	.word	0x7ff00000
 8006564:	08009fd8 	.word	0x08009fd8
 8006568:	08009eb8 	.word	0x08009eb8
 800656c:	08009e90 	.word	0x08009e90
 8006570:	7ca00000 	.word	0x7ca00000
 8006574:	7fefffff 	.word	0x7fefffff
 8006578:	f016 0310 	ands.w	r3, r6, #16
 800657c:	bf18      	it	ne
 800657e:	236a      	movne	r3, #106	; 0x6a
 8006580:	4640      	mov	r0, r8
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	4649      	mov	r1, r9
 8006586:	2300      	movs	r3, #0
 8006588:	4fb0      	ldr	r7, [pc, #704]	; (800684c <_strtod_l+0x874>)
 800658a:	07f2      	lsls	r2, r6, #31
 800658c:	d504      	bpl.n	8006598 <_strtod_l+0x5c0>
 800658e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006592:	f7fa f811 	bl	80005b8 <__aeabi_dmul>
 8006596:	2301      	movs	r3, #1
 8006598:	1076      	asrs	r6, r6, #1
 800659a:	f107 0708 	add.w	r7, r7, #8
 800659e:	d1f4      	bne.n	800658a <_strtod_l+0x5b2>
 80065a0:	b10b      	cbz	r3, 80065a6 <_strtod_l+0x5ce>
 80065a2:	4680      	mov	r8, r0
 80065a4:	4689      	mov	r9, r1
 80065a6:	9b05      	ldr	r3, [sp, #20]
 80065a8:	b1c3      	cbz	r3, 80065dc <_strtod_l+0x604>
 80065aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80065ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	4649      	mov	r1, r9
 80065b6:	dd11      	ble.n	80065dc <_strtod_l+0x604>
 80065b8:	2b1f      	cmp	r3, #31
 80065ba:	f340 8127 	ble.w	800680c <_strtod_l+0x834>
 80065be:	2b34      	cmp	r3, #52	; 0x34
 80065c0:	bfd8      	it	le
 80065c2:	f04f 33ff 	movle.w	r3, #4294967295
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	bfcf      	iteee	gt
 80065cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80065d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80065d4:	fa03 f202 	lslle.w	r2, r3, r2
 80065d8:	ea02 0901 	andle.w	r9, r2, r1
 80065dc:	2200      	movs	r2, #0
 80065de:	2300      	movs	r3, #0
 80065e0:	4640      	mov	r0, r8
 80065e2:	4649      	mov	r1, r9
 80065e4:	f7fa fa50 	bl	8000a88 <__aeabi_dcmpeq>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d1a1      	bne.n	8006530 <_strtod_l+0x558>
 80065ec:	9b06      	ldr	r3, [sp, #24]
 80065ee:	465a      	mov	r2, fp
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	4650      	mov	r0, sl
 80065f4:	4623      	mov	r3, r4
 80065f6:	9908      	ldr	r1, [sp, #32]
 80065f8:	f001 fe0e 	bl	8008218 <__s2b>
 80065fc:	9008      	str	r0, [sp, #32]
 80065fe:	2800      	cmp	r0, #0
 8006600:	f43f af21 	beq.w	8006446 <_strtod_l+0x46e>
 8006604:	9b04      	ldr	r3, [sp, #16]
 8006606:	f04f 0b00 	mov.w	fp, #0
 800660a:	1b5d      	subs	r5, r3, r5
 800660c:	9b07      	ldr	r3, [sp, #28]
 800660e:	f8cd b010 	str.w	fp, [sp, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfb4      	ite	lt
 8006616:	462b      	movlt	r3, r5
 8006618:	2300      	movge	r3, #0
 800661a:	930e      	str	r3, [sp, #56]	; 0x38
 800661c:	9b07      	ldr	r3, [sp, #28]
 800661e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006622:	9314      	str	r3, [sp, #80]	; 0x50
 8006624:	9b08      	ldr	r3, [sp, #32]
 8006626:	4650      	mov	r0, sl
 8006628:	6859      	ldr	r1, [r3, #4]
 800662a:	f001 fd4d 	bl	80080c8 <_Balloc>
 800662e:	9006      	str	r0, [sp, #24]
 8006630:	2800      	cmp	r0, #0
 8006632:	f43f af10 	beq.w	8006456 <_strtod_l+0x47e>
 8006636:	9b08      	ldr	r3, [sp, #32]
 8006638:	300c      	adds	r0, #12
 800663a:	691a      	ldr	r2, [r3, #16]
 800663c:	f103 010c 	add.w	r1, r3, #12
 8006640:	3202      	adds	r2, #2
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	f7fe fdfe 	bl	8005244 <memcpy>
 8006648:	ab1c      	add	r3, sp, #112	; 0x70
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	ab1b      	add	r3, sp, #108	; 0x6c
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	4642      	mov	r2, r8
 8006652:	464b      	mov	r3, r9
 8006654:	4650      	mov	r0, sl
 8006656:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800665a:	f002 f91f 	bl	800889c <__d2b>
 800665e:	901a      	str	r0, [sp, #104]	; 0x68
 8006660:	2800      	cmp	r0, #0
 8006662:	f43f aef8 	beq.w	8006456 <_strtod_l+0x47e>
 8006666:	2101      	movs	r1, #1
 8006668:	4650      	mov	r0, sl
 800666a:	f001 fe6d 	bl	8008348 <__i2b>
 800666e:	4603      	mov	r3, r0
 8006670:	9004      	str	r0, [sp, #16]
 8006672:	2800      	cmp	r0, #0
 8006674:	f43f aeef 	beq.w	8006456 <_strtod_l+0x47e>
 8006678:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800667a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800667c:	2d00      	cmp	r5, #0
 800667e:	bfab      	itete	ge
 8006680:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006682:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006684:	18ee      	addge	r6, r5, r3
 8006686:	1b5c      	sublt	r4, r3, r5
 8006688:	9b05      	ldr	r3, [sp, #20]
 800668a:	bfa8      	it	ge
 800668c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800668e:	eba5 0503 	sub.w	r5, r5, r3
 8006692:	4415      	add	r5, r2
 8006694:	4b6e      	ldr	r3, [pc, #440]	; (8006850 <_strtod_l+0x878>)
 8006696:	f105 35ff 	add.w	r5, r5, #4294967295
 800669a:	bfb8      	it	lt
 800669c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800669e:	429d      	cmp	r5, r3
 80066a0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80066a4:	f280 80c4 	bge.w	8006830 <_strtod_l+0x858>
 80066a8:	1b5b      	subs	r3, r3, r5
 80066aa:	2b1f      	cmp	r3, #31
 80066ac:	f04f 0701 	mov.w	r7, #1
 80066b0:	eba2 0203 	sub.w	r2, r2, r3
 80066b4:	f300 80b1 	bgt.w	800681a <_strtod_l+0x842>
 80066b8:	2500      	movs	r5, #0
 80066ba:	fa07 f303 	lsl.w	r3, r7, r3
 80066be:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c0:	18b7      	adds	r7, r6, r2
 80066c2:	9b05      	ldr	r3, [sp, #20]
 80066c4:	42be      	cmp	r6, r7
 80066c6:	4414      	add	r4, r2
 80066c8:	441c      	add	r4, r3
 80066ca:	4633      	mov	r3, r6
 80066cc:	bfa8      	it	ge
 80066ce:	463b      	movge	r3, r7
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	bfa8      	it	ge
 80066d4:	4623      	movge	r3, r4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfc2      	ittt	gt
 80066da:	1aff      	subgt	r7, r7, r3
 80066dc:	1ae4      	subgt	r4, r4, r3
 80066de:	1af6      	subgt	r6, r6, r3
 80066e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	dd17      	ble.n	8006716 <_strtod_l+0x73e>
 80066e6:	461a      	mov	r2, r3
 80066e8:	4650      	mov	r0, sl
 80066ea:	9904      	ldr	r1, [sp, #16]
 80066ec:	f001 feea 	bl	80084c4 <__pow5mult>
 80066f0:	9004      	str	r0, [sp, #16]
 80066f2:	2800      	cmp	r0, #0
 80066f4:	f43f aeaf 	beq.w	8006456 <_strtod_l+0x47e>
 80066f8:	4601      	mov	r1, r0
 80066fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80066fc:	4650      	mov	r0, sl
 80066fe:	f001 fe39 	bl	8008374 <__multiply>
 8006702:	9009      	str	r0, [sp, #36]	; 0x24
 8006704:	2800      	cmp	r0, #0
 8006706:	f43f aea6 	beq.w	8006456 <_strtod_l+0x47e>
 800670a:	4650      	mov	r0, sl
 800670c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800670e:	f001 fd1b 	bl	8008148 <_Bfree>
 8006712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006714:	931a      	str	r3, [sp, #104]	; 0x68
 8006716:	2f00      	cmp	r7, #0
 8006718:	f300 808e 	bgt.w	8006838 <_strtod_l+0x860>
 800671c:	9b07      	ldr	r3, [sp, #28]
 800671e:	2b00      	cmp	r3, #0
 8006720:	dd08      	ble.n	8006734 <_strtod_l+0x75c>
 8006722:	4650      	mov	r0, sl
 8006724:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006726:	9906      	ldr	r1, [sp, #24]
 8006728:	f001 fecc 	bl	80084c4 <__pow5mult>
 800672c:	9006      	str	r0, [sp, #24]
 800672e:	2800      	cmp	r0, #0
 8006730:	f43f ae91 	beq.w	8006456 <_strtod_l+0x47e>
 8006734:	2c00      	cmp	r4, #0
 8006736:	dd08      	ble.n	800674a <_strtod_l+0x772>
 8006738:	4622      	mov	r2, r4
 800673a:	4650      	mov	r0, sl
 800673c:	9906      	ldr	r1, [sp, #24]
 800673e:	f001 ff1b 	bl	8008578 <__lshift>
 8006742:	9006      	str	r0, [sp, #24]
 8006744:	2800      	cmp	r0, #0
 8006746:	f43f ae86 	beq.w	8006456 <_strtod_l+0x47e>
 800674a:	2e00      	cmp	r6, #0
 800674c:	dd08      	ble.n	8006760 <_strtod_l+0x788>
 800674e:	4632      	mov	r2, r6
 8006750:	4650      	mov	r0, sl
 8006752:	9904      	ldr	r1, [sp, #16]
 8006754:	f001 ff10 	bl	8008578 <__lshift>
 8006758:	9004      	str	r0, [sp, #16]
 800675a:	2800      	cmp	r0, #0
 800675c:	f43f ae7b 	beq.w	8006456 <_strtod_l+0x47e>
 8006760:	4650      	mov	r0, sl
 8006762:	9a06      	ldr	r2, [sp, #24]
 8006764:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006766:	f001 ff93 	bl	8008690 <__mdiff>
 800676a:	4683      	mov	fp, r0
 800676c:	2800      	cmp	r0, #0
 800676e:	f43f ae72 	beq.w	8006456 <_strtod_l+0x47e>
 8006772:	2400      	movs	r4, #0
 8006774:	68c3      	ldr	r3, [r0, #12]
 8006776:	9904      	ldr	r1, [sp, #16]
 8006778:	60c4      	str	r4, [r0, #12]
 800677a:	930b      	str	r3, [sp, #44]	; 0x2c
 800677c:	f001 ff6c 	bl	8008658 <__mcmp>
 8006780:	42a0      	cmp	r0, r4
 8006782:	da6b      	bge.n	800685c <_strtod_l+0x884>
 8006784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006786:	ea53 0308 	orrs.w	r3, r3, r8
 800678a:	f040 8091 	bne.w	80068b0 <_strtod_l+0x8d8>
 800678e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006792:	2b00      	cmp	r3, #0
 8006794:	f040 808c 	bne.w	80068b0 <_strtod_l+0x8d8>
 8006798:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800679c:	0d1b      	lsrs	r3, r3, #20
 800679e:	051b      	lsls	r3, r3, #20
 80067a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80067a4:	f240 8084 	bls.w	80068b0 <_strtod_l+0x8d8>
 80067a8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80067ac:	b91b      	cbnz	r3, 80067b6 <_strtod_l+0x7de>
 80067ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	dd7c      	ble.n	80068b0 <_strtod_l+0x8d8>
 80067b6:	4659      	mov	r1, fp
 80067b8:	2201      	movs	r2, #1
 80067ba:	4650      	mov	r0, sl
 80067bc:	f001 fedc 	bl	8008578 <__lshift>
 80067c0:	9904      	ldr	r1, [sp, #16]
 80067c2:	4683      	mov	fp, r0
 80067c4:	f001 ff48 	bl	8008658 <__mcmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	dd71      	ble.n	80068b0 <_strtod_l+0x8d8>
 80067cc:	9905      	ldr	r1, [sp, #20]
 80067ce:	464b      	mov	r3, r9
 80067d0:	4a20      	ldr	r2, [pc, #128]	; (8006854 <_strtod_l+0x87c>)
 80067d2:	2900      	cmp	r1, #0
 80067d4:	f000 808c 	beq.w	80068f0 <_strtod_l+0x918>
 80067d8:	ea02 0109 	and.w	r1, r2, r9
 80067dc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80067e0:	f300 8086 	bgt.w	80068f0 <_strtod_l+0x918>
 80067e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80067e8:	f77f aeaa 	ble.w	8006540 <_strtod_l+0x568>
 80067ec:	4640      	mov	r0, r8
 80067ee:	4649      	mov	r1, r9
 80067f0:	4b19      	ldr	r3, [pc, #100]	; (8006858 <_strtod_l+0x880>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	f7f9 fee0 	bl	80005b8 <__aeabi_dmul>
 80067f8:	460b      	mov	r3, r1
 80067fa:	4303      	orrs	r3, r0
 80067fc:	bf08      	it	eq
 80067fe:	2322      	moveq	r3, #34	; 0x22
 8006800:	4680      	mov	r8, r0
 8006802:	4689      	mov	r9, r1
 8006804:	bf08      	it	eq
 8006806:	f8ca 3000 	streq.w	r3, [sl]
 800680a:	e62f      	b.n	800646c <_strtod_l+0x494>
 800680c:	f04f 32ff 	mov.w	r2, #4294967295
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	ea03 0808 	and.w	r8, r3, r8
 8006818:	e6e0      	b.n	80065dc <_strtod_l+0x604>
 800681a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800681e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006822:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006826:	35e2      	adds	r5, #226	; 0xe2
 8006828:	fa07 f505 	lsl.w	r5, r7, r5
 800682c:	970f      	str	r7, [sp, #60]	; 0x3c
 800682e:	e747      	b.n	80066c0 <_strtod_l+0x6e8>
 8006830:	2301      	movs	r3, #1
 8006832:	2500      	movs	r5, #0
 8006834:	930f      	str	r3, [sp, #60]	; 0x3c
 8006836:	e743      	b.n	80066c0 <_strtod_l+0x6e8>
 8006838:	463a      	mov	r2, r7
 800683a:	4650      	mov	r0, sl
 800683c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800683e:	f001 fe9b 	bl	8008578 <__lshift>
 8006842:	901a      	str	r0, [sp, #104]	; 0x68
 8006844:	2800      	cmp	r0, #0
 8006846:	f47f af69 	bne.w	800671c <_strtod_l+0x744>
 800684a:	e604      	b.n	8006456 <_strtod_l+0x47e>
 800684c:	08009c00 	.word	0x08009c00
 8006850:	fffffc02 	.word	0xfffffc02
 8006854:	7ff00000 	.word	0x7ff00000
 8006858:	39500000 	.word	0x39500000
 800685c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006860:	d165      	bne.n	800692e <_strtod_l+0x956>
 8006862:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006864:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006868:	b35a      	cbz	r2, 80068c2 <_strtod_l+0x8ea>
 800686a:	4a99      	ldr	r2, [pc, #612]	; (8006ad0 <_strtod_l+0xaf8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d12b      	bne.n	80068c8 <_strtod_l+0x8f0>
 8006870:	9b05      	ldr	r3, [sp, #20]
 8006872:	4641      	mov	r1, r8
 8006874:	b303      	cbz	r3, 80068b8 <_strtod_l+0x8e0>
 8006876:	464a      	mov	r2, r9
 8006878:	4b96      	ldr	r3, [pc, #600]	; (8006ad4 <_strtod_l+0xafc>)
 800687a:	4013      	ands	r3, r2
 800687c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006880:	f04f 32ff 	mov.w	r2, #4294967295
 8006884:	d81b      	bhi.n	80068be <_strtod_l+0x8e6>
 8006886:	0d1b      	lsrs	r3, r3, #20
 8006888:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	4299      	cmp	r1, r3
 8006892:	d119      	bne.n	80068c8 <_strtod_l+0x8f0>
 8006894:	4b90      	ldr	r3, [pc, #576]	; (8006ad8 <_strtod_l+0xb00>)
 8006896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006898:	429a      	cmp	r2, r3
 800689a:	d102      	bne.n	80068a2 <_strtod_l+0x8ca>
 800689c:	3101      	adds	r1, #1
 800689e:	f43f adda 	beq.w	8006456 <_strtod_l+0x47e>
 80068a2:	f04f 0800 	mov.w	r8, #0
 80068a6:	4b8b      	ldr	r3, [pc, #556]	; (8006ad4 <_strtod_l+0xafc>)
 80068a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068aa:	401a      	ands	r2, r3
 80068ac:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80068b0:	9b05      	ldr	r3, [sp, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d19a      	bne.n	80067ec <_strtod_l+0x814>
 80068b6:	e5d9      	b.n	800646c <_strtod_l+0x494>
 80068b8:	f04f 33ff 	mov.w	r3, #4294967295
 80068bc:	e7e8      	b.n	8006890 <_strtod_l+0x8b8>
 80068be:	4613      	mov	r3, r2
 80068c0:	e7e6      	b.n	8006890 <_strtod_l+0x8b8>
 80068c2:	ea53 0308 	orrs.w	r3, r3, r8
 80068c6:	d081      	beq.n	80067cc <_strtod_l+0x7f4>
 80068c8:	b1e5      	cbz	r5, 8006904 <_strtod_l+0x92c>
 80068ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068cc:	421d      	tst	r5, r3
 80068ce:	d0ef      	beq.n	80068b0 <_strtod_l+0x8d8>
 80068d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	9a05      	ldr	r2, [sp, #20]
 80068d8:	b1c3      	cbz	r3, 800690c <_strtod_l+0x934>
 80068da:	f7ff fb5b 	bl	8005f94 <sulp>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068e6:	f7f9 fcb1 	bl	800024c <__adddf3>
 80068ea:	4680      	mov	r8, r0
 80068ec:	4689      	mov	r9, r1
 80068ee:	e7df      	b.n	80068b0 <_strtod_l+0x8d8>
 80068f0:	4013      	ands	r3, r2
 80068f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80068f6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80068fa:	f04f 38ff 	mov.w	r8, #4294967295
 80068fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006902:	e7d5      	b.n	80068b0 <_strtod_l+0x8d8>
 8006904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006906:	ea13 0f08 	tst.w	r3, r8
 800690a:	e7e0      	b.n	80068ce <_strtod_l+0x8f6>
 800690c:	f7ff fb42 	bl	8005f94 <sulp>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006918:	f7f9 fc96 	bl	8000248 <__aeabi_dsub>
 800691c:	2200      	movs	r2, #0
 800691e:	2300      	movs	r3, #0
 8006920:	4680      	mov	r8, r0
 8006922:	4689      	mov	r9, r1
 8006924:	f7fa f8b0 	bl	8000a88 <__aeabi_dcmpeq>
 8006928:	2800      	cmp	r0, #0
 800692a:	d0c1      	beq.n	80068b0 <_strtod_l+0x8d8>
 800692c:	e608      	b.n	8006540 <_strtod_l+0x568>
 800692e:	4658      	mov	r0, fp
 8006930:	9904      	ldr	r1, [sp, #16]
 8006932:	f002 f80f 	bl	8008954 <__ratio>
 8006936:	2200      	movs	r2, #0
 8006938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	f7fa f8b6 	bl	8000ab0 <__aeabi_dcmple>
 8006944:	2800      	cmp	r0, #0
 8006946:	d070      	beq.n	8006a2a <_strtod_l+0xa52>
 8006948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d042      	beq.n	80069d4 <_strtod_l+0x9fc>
 800694e:	2600      	movs	r6, #0
 8006950:	4f62      	ldr	r7, [pc, #392]	; (8006adc <_strtod_l+0xb04>)
 8006952:	4d62      	ldr	r5, [pc, #392]	; (8006adc <_strtod_l+0xb04>)
 8006954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800695a:	0d1b      	lsrs	r3, r3, #20
 800695c:	051b      	lsls	r3, r3, #20
 800695e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006962:	4b5f      	ldr	r3, [pc, #380]	; (8006ae0 <_strtod_l+0xb08>)
 8006964:	429a      	cmp	r2, r3
 8006966:	f040 80c3 	bne.w	8006af0 <_strtod_l+0xb18>
 800696a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696c:	4640      	mov	r0, r8
 800696e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006972:	4649      	mov	r1, r9
 8006974:	f001 ff18 	bl	80087a8 <__ulp>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4630      	mov	r0, r6
 800697e:	4639      	mov	r1, r7
 8006980:	f7f9 fe1a 	bl	80005b8 <__aeabi_dmul>
 8006984:	4642      	mov	r2, r8
 8006986:	464b      	mov	r3, r9
 8006988:	f7f9 fc60 	bl	800024c <__adddf3>
 800698c:	460b      	mov	r3, r1
 800698e:	4951      	ldr	r1, [pc, #324]	; (8006ad4 <_strtod_l+0xafc>)
 8006990:	4a54      	ldr	r2, [pc, #336]	; (8006ae4 <_strtod_l+0xb0c>)
 8006992:	4019      	ands	r1, r3
 8006994:	4291      	cmp	r1, r2
 8006996:	4680      	mov	r8, r0
 8006998:	d95d      	bls.n	8006a56 <_strtod_l+0xa7e>
 800699a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800699c:	4b4e      	ldr	r3, [pc, #312]	; (8006ad8 <_strtod_l+0xb00>)
 800699e:	429a      	cmp	r2, r3
 80069a0:	d103      	bne.n	80069aa <_strtod_l+0x9d2>
 80069a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069a4:	3301      	adds	r3, #1
 80069a6:	f43f ad56 	beq.w	8006456 <_strtod_l+0x47e>
 80069aa:	f04f 38ff 	mov.w	r8, #4294967295
 80069ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006ad8 <_strtod_l+0xb00>
 80069b2:	4650      	mov	r0, sl
 80069b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069b6:	f001 fbc7 	bl	8008148 <_Bfree>
 80069ba:	4650      	mov	r0, sl
 80069bc:	9906      	ldr	r1, [sp, #24]
 80069be:	f001 fbc3 	bl	8008148 <_Bfree>
 80069c2:	4650      	mov	r0, sl
 80069c4:	9904      	ldr	r1, [sp, #16]
 80069c6:	f001 fbbf 	bl	8008148 <_Bfree>
 80069ca:	4659      	mov	r1, fp
 80069cc:	4650      	mov	r0, sl
 80069ce:	f001 fbbb 	bl	8008148 <_Bfree>
 80069d2:	e627      	b.n	8006624 <_strtod_l+0x64c>
 80069d4:	f1b8 0f00 	cmp.w	r8, #0
 80069d8:	d119      	bne.n	8006a0e <_strtod_l+0xa36>
 80069da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e0:	b9e3      	cbnz	r3, 8006a1c <_strtod_l+0xa44>
 80069e2:	2200      	movs	r2, #0
 80069e4:	4630      	mov	r0, r6
 80069e6:	4639      	mov	r1, r7
 80069e8:	4b3c      	ldr	r3, [pc, #240]	; (8006adc <_strtod_l+0xb04>)
 80069ea:	f7fa f857 	bl	8000a9c <__aeabi_dcmplt>
 80069ee:	b9c8      	cbnz	r0, 8006a24 <_strtod_l+0xa4c>
 80069f0:	2200      	movs	r2, #0
 80069f2:	4630      	mov	r0, r6
 80069f4:	4639      	mov	r1, r7
 80069f6:	4b3c      	ldr	r3, [pc, #240]	; (8006ae8 <_strtod_l+0xb10>)
 80069f8:	f7f9 fdde 	bl	80005b8 <__aeabi_dmul>
 80069fc:	4604      	mov	r4, r0
 80069fe:	460d      	mov	r5, r1
 8006a00:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006a04:	9416      	str	r4, [sp, #88]	; 0x58
 8006a06:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a08:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006a0c:	e7a2      	b.n	8006954 <_strtod_l+0x97c>
 8006a0e:	f1b8 0f01 	cmp.w	r8, #1
 8006a12:	d103      	bne.n	8006a1c <_strtod_l+0xa44>
 8006a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f43f ad92 	beq.w	8006540 <_strtod_l+0x568>
 8006a1c:	2600      	movs	r6, #0
 8006a1e:	2400      	movs	r4, #0
 8006a20:	4f32      	ldr	r7, [pc, #200]	; (8006aec <_strtod_l+0xb14>)
 8006a22:	e796      	b.n	8006952 <_strtod_l+0x97a>
 8006a24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006a26:	4d30      	ldr	r5, [pc, #192]	; (8006ae8 <_strtod_l+0xb10>)
 8006a28:	e7ea      	b.n	8006a00 <_strtod_l+0xa28>
 8006a2a:	4b2f      	ldr	r3, [pc, #188]	; (8006ae8 <_strtod_l+0xb10>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	4630      	mov	r0, r6
 8006a30:	4639      	mov	r1, r7
 8006a32:	f7f9 fdc1 	bl	80005b8 <__aeabi_dmul>
 8006a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a38:	4604      	mov	r4, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	b933      	cbnz	r3, 8006a4c <_strtod_l+0xa74>
 8006a3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a42:	9010      	str	r0, [sp, #64]	; 0x40
 8006a44:	9311      	str	r3, [sp, #68]	; 0x44
 8006a46:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a4a:	e783      	b.n	8006954 <_strtod_l+0x97c>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006a54:	e7f7      	b.n	8006a46 <_strtod_l+0xa6e>
 8006a56:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1a8      	bne.n	80069b2 <_strtod_l+0x9da>
 8006a60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a66:	0d1b      	lsrs	r3, r3, #20
 8006a68:	051b      	lsls	r3, r3, #20
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d1a1      	bne.n	80069b2 <_strtod_l+0x9da>
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7fa f909 	bl	8000c88 <__aeabi_d2lz>
 8006a76:	f7f9 fd71 	bl	800055c <__aeabi_l2d>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7f9 fbe1 	bl	8000248 <__aeabi_dsub>
 8006a86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a8c:	ea43 0308 	orr.w	r3, r3, r8
 8006a90:	4313      	orrs	r3, r2
 8006a92:	4604      	mov	r4, r0
 8006a94:	460d      	mov	r5, r1
 8006a96:	d066      	beq.n	8006b66 <_strtod_l+0xb8e>
 8006a98:	a309      	add	r3, pc, #36	; (adr r3, 8006ac0 <_strtod_l+0xae8>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fffd 	bl	8000a9c <__aeabi_dcmplt>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f47f ace2 	bne.w	800646c <_strtod_l+0x494>
 8006aa8:	a307      	add	r3, pc, #28	; (adr r3, 8006ac8 <_strtod_l+0xaf0>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	f7fa f811 	bl	8000ad8 <__aeabi_dcmpgt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f43f af7b 	beq.w	80069b2 <_strtod_l+0x9da>
 8006abc:	e4d6      	b.n	800646c <_strtod_l+0x494>
 8006abe:	bf00      	nop
 8006ac0:	94a03595 	.word	0x94a03595
 8006ac4:	3fdfffff 	.word	0x3fdfffff
 8006ac8:	35afe535 	.word	0x35afe535
 8006acc:	3fe00000 	.word	0x3fe00000
 8006ad0:	000fffff 	.word	0x000fffff
 8006ad4:	7ff00000 	.word	0x7ff00000
 8006ad8:	7fefffff 	.word	0x7fefffff
 8006adc:	3ff00000 	.word	0x3ff00000
 8006ae0:	7fe00000 	.word	0x7fe00000
 8006ae4:	7c9fffff 	.word	0x7c9fffff
 8006ae8:	3fe00000 	.word	0x3fe00000
 8006aec:	bff00000 	.word	0xbff00000
 8006af0:	9b05      	ldr	r3, [sp, #20]
 8006af2:	b313      	cbz	r3, 8006b3a <_strtod_l+0xb62>
 8006af4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006af6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006afa:	d81e      	bhi.n	8006b3a <_strtod_l+0xb62>
 8006afc:	a326      	add	r3, pc, #152	; (adr r3, 8006b98 <_strtod_l+0xbc0>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	4620      	mov	r0, r4
 8006b04:	4629      	mov	r1, r5
 8006b06:	f7f9 ffd3 	bl	8000ab0 <__aeabi_dcmple>
 8006b0a:	b190      	cbz	r0, 8006b32 <_strtod_l+0xb5a>
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7fa f82a 	bl	8000b68 <__aeabi_d2uiz>
 8006b14:	2801      	cmp	r0, #1
 8006b16:	bf38      	it	cc
 8006b18:	2001      	movcc	r0, #1
 8006b1a:	f7f9 fcd3 	bl	80004c4 <__aeabi_ui2d>
 8006b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	b9d3      	cbnz	r3, 8006b5c <_strtod_l+0xb84>
 8006b26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b2a:	9012      	str	r0, [sp, #72]	; 0x48
 8006b2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b2e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006b32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b34:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006b38:	1a9f      	subs	r7, r3, r2
 8006b3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b3e:	f001 fe33 	bl	80087a8 <__ulp>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4630      	mov	r0, r6
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7f9 fd35 	bl	80005b8 <__aeabi_dmul>
 8006b4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b52:	f7f9 fb7b 	bl	800024c <__adddf3>
 8006b56:	4680      	mov	r8, r0
 8006b58:	4689      	mov	r9, r1
 8006b5a:	e77e      	b.n	8006a5a <_strtod_l+0xa82>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006b64:	e7e3      	b.n	8006b2e <_strtod_l+0xb56>
 8006b66:	a30e      	add	r3, pc, #56	; (adr r3, 8006ba0 <_strtod_l+0xbc8>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 ff96 	bl	8000a9c <__aeabi_dcmplt>
 8006b70:	e7a1      	b.n	8006ab6 <_strtod_l+0xade>
 8006b72:	2300      	movs	r3, #0
 8006b74:	930a      	str	r3, [sp, #40]	; 0x28
 8006b76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	f7ff ba71 	b.w	8006062 <_strtod_l+0x8a>
 8006b80:	2a65      	cmp	r2, #101	; 0x65
 8006b82:	f43f ab63 	beq.w	800624c <_strtod_l+0x274>
 8006b86:	2a45      	cmp	r2, #69	; 0x45
 8006b88:	f43f ab60 	beq.w	800624c <_strtod_l+0x274>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f7ff bb95 	b.w	80062bc <_strtod_l+0x2e4>
 8006b92:	bf00      	nop
 8006b94:	f3af 8000 	nop.w
 8006b98:	ffc00000 	.word	0xffc00000
 8006b9c:	41dfffff 	.word	0x41dfffff
 8006ba0:	94a03595 	.word	0x94a03595
 8006ba4:	3fcfffff 	.word	0x3fcfffff

08006ba8 <_strtod_r>:
 8006ba8:	4b01      	ldr	r3, [pc, #4]	; (8006bb0 <_strtod_r+0x8>)
 8006baa:	f7ff ba15 	b.w	8005fd8 <_strtod_l>
 8006bae:	bf00      	nop
 8006bb0:	20000078 	.word	0x20000078

08006bb4 <_strtol_l.constprop.0>:
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bba:	4680      	mov	r8, r0
 8006bbc:	d001      	beq.n	8006bc2 <_strtol_l.constprop.0+0xe>
 8006bbe:	2b24      	cmp	r3, #36	; 0x24
 8006bc0:	d906      	bls.n	8006bd0 <_strtol_l.constprop.0+0x1c>
 8006bc2:	f7fe fb15 	bl	80051f0 <__errno>
 8006bc6:	2316      	movs	r3, #22
 8006bc8:	6003      	str	r3, [r0, #0]
 8006bca:	2000      	movs	r0, #0
 8006bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd0:	460d      	mov	r5, r1
 8006bd2:	4f35      	ldr	r7, [pc, #212]	; (8006ca8 <_strtol_l.constprop.0+0xf4>)
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bda:	5de6      	ldrb	r6, [r4, r7]
 8006bdc:	f016 0608 	ands.w	r6, r6, #8
 8006be0:	d1f8      	bne.n	8006bd4 <_strtol_l.constprop.0+0x20>
 8006be2:	2c2d      	cmp	r4, #45	; 0x2d
 8006be4:	d12f      	bne.n	8006c46 <_strtol_l.constprop.0+0x92>
 8006be6:	2601      	movs	r6, #1
 8006be8:	782c      	ldrb	r4, [r5, #0]
 8006bea:	1c85      	adds	r5, r0, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d057      	beq.n	8006ca0 <_strtol_l.constprop.0+0xec>
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d109      	bne.n	8006c08 <_strtol_l.constprop.0+0x54>
 8006bf4:	2c30      	cmp	r4, #48	; 0x30
 8006bf6:	d107      	bne.n	8006c08 <_strtol_l.constprop.0+0x54>
 8006bf8:	7828      	ldrb	r0, [r5, #0]
 8006bfa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006bfe:	2858      	cmp	r0, #88	; 0x58
 8006c00:	d149      	bne.n	8006c96 <_strtol_l.constprop.0+0xe2>
 8006c02:	2310      	movs	r3, #16
 8006c04:	786c      	ldrb	r4, [r5, #1]
 8006c06:	3502      	adds	r5, #2
 8006c08:	2700      	movs	r7, #0
 8006c0a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006c0e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006c12:	fbbe f9f3 	udiv	r9, lr, r3
 8006c16:	4638      	mov	r0, r7
 8006c18:	fb03 ea19 	mls	sl, r3, r9, lr
 8006c1c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006c20:	f1bc 0f09 	cmp.w	ip, #9
 8006c24:	d814      	bhi.n	8006c50 <_strtol_l.constprop.0+0x9c>
 8006c26:	4664      	mov	r4, ip
 8006c28:	42a3      	cmp	r3, r4
 8006c2a:	dd22      	ble.n	8006c72 <_strtol_l.constprop.0+0xbe>
 8006c2c:	2f00      	cmp	r7, #0
 8006c2e:	db1d      	blt.n	8006c6c <_strtol_l.constprop.0+0xb8>
 8006c30:	4581      	cmp	r9, r0
 8006c32:	d31b      	bcc.n	8006c6c <_strtol_l.constprop.0+0xb8>
 8006c34:	d101      	bne.n	8006c3a <_strtol_l.constprop.0+0x86>
 8006c36:	45a2      	cmp	sl, r4
 8006c38:	db18      	blt.n	8006c6c <_strtol_l.constprop.0+0xb8>
 8006c3a:	2701      	movs	r7, #1
 8006c3c:	fb00 4003 	mla	r0, r0, r3, r4
 8006c40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c44:	e7ea      	b.n	8006c1c <_strtol_l.constprop.0+0x68>
 8006c46:	2c2b      	cmp	r4, #43	; 0x2b
 8006c48:	bf04      	itt	eq
 8006c4a:	782c      	ldrbeq	r4, [r5, #0]
 8006c4c:	1c85      	addeq	r5, r0, #2
 8006c4e:	e7cd      	b.n	8006bec <_strtol_l.constprop.0+0x38>
 8006c50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006c54:	f1bc 0f19 	cmp.w	ip, #25
 8006c58:	d801      	bhi.n	8006c5e <_strtol_l.constprop.0+0xaa>
 8006c5a:	3c37      	subs	r4, #55	; 0x37
 8006c5c:	e7e4      	b.n	8006c28 <_strtol_l.constprop.0+0x74>
 8006c5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006c62:	f1bc 0f19 	cmp.w	ip, #25
 8006c66:	d804      	bhi.n	8006c72 <_strtol_l.constprop.0+0xbe>
 8006c68:	3c57      	subs	r4, #87	; 0x57
 8006c6a:	e7dd      	b.n	8006c28 <_strtol_l.constprop.0+0x74>
 8006c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c70:	e7e6      	b.n	8006c40 <_strtol_l.constprop.0+0x8c>
 8006c72:	2f00      	cmp	r7, #0
 8006c74:	da07      	bge.n	8006c86 <_strtol_l.constprop.0+0xd2>
 8006c76:	2322      	movs	r3, #34	; 0x22
 8006c78:	4670      	mov	r0, lr
 8006c7a:	f8c8 3000 	str.w	r3, [r8]
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	d0a4      	beq.n	8006bcc <_strtol_l.constprop.0+0x18>
 8006c82:	1e69      	subs	r1, r5, #1
 8006c84:	e005      	b.n	8006c92 <_strtol_l.constprop.0+0xde>
 8006c86:	b106      	cbz	r6, 8006c8a <_strtol_l.constprop.0+0xd6>
 8006c88:	4240      	negs	r0, r0
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	d09e      	beq.n	8006bcc <_strtol_l.constprop.0+0x18>
 8006c8e:	2f00      	cmp	r7, #0
 8006c90:	d1f7      	bne.n	8006c82 <_strtol_l.constprop.0+0xce>
 8006c92:	6011      	str	r1, [r2, #0]
 8006c94:	e79a      	b.n	8006bcc <_strtol_l.constprop.0+0x18>
 8006c96:	2430      	movs	r4, #48	; 0x30
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1b5      	bne.n	8006c08 <_strtol_l.constprop.0+0x54>
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	e7b3      	b.n	8006c08 <_strtol_l.constprop.0+0x54>
 8006ca0:	2c30      	cmp	r4, #48	; 0x30
 8006ca2:	d0a9      	beq.n	8006bf8 <_strtol_l.constprop.0+0x44>
 8006ca4:	230a      	movs	r3, #10
 8006ca6:	e7af      	b.n	8006c08 <_strtol_l.constprop.0+0x54>
 8006ca8:	08009c29 	.word	0x08009c29

08006cac <_strtol_r>:
 8006cac:	f7ff bf82 	b.w	8006bb4 <_strtol_l.constprop.0>

08006cb0 <quorem>:
 8006cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	6903      	ldr	r3, [r0, #16]
 8006cb6:	690c      	ldr	r4, [r1, #16]
 8006cb8:	4607      	mov	r7, r0
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	f2c0 8082 	blt.w	8006dc4 <quorem+0x114>
 8006cc0:	3c01      	subs	r4, #1
 8006cc2:	f100 0514 	add.w	r5, r0, #20
 8006cc6:	f101 0814 	add.w	r8, r1, #20
 8006cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ce0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ce8:	d331      	bcc.n	8006d4e <quorem+0x9e>
 8006cea:	f04f 0e00 	mov.w	lr, #0
 8006cee:	4640      	mov	r0, r8
 8006cf0:	46ac      	mov	ip, r5
 8006cf2:	46f2      	mov	sl, lr
 8006cf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cf8:	b293      	uxth	r3, r2
 8006cfa:	fb06 e303 	mla	r3, r6, r3, lr
 8006cfe:	0c12      	lsrs	r2, r2, #16
 8006d00:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	fb06 e202 	mla	r2, r6, r2, lr
 8006d0a:	ebaa 0303 	sub.w	r3, sl, r3
 8006d0e:	f8dc a000 	ldr.w	sl, [ip]
 8006d12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d16:	fa1f fa8a 	uxth.w	sl, sl
 8006d1a:	4453      	add	r3, sl
 8006d1c:	f8dc a000 	ldr.w	sl, [ip]
 8006d20:	b292      	uxth	r2, r2
 8006d22:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d30:	4581      	cmp	r9, r0
 8006d32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d36:	f84c 3b04 	str.w	r3, [ip], #4
 8006d3a:	d2db      	bcs.n	8006cf4 <quorem+0x44>
 8006d3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d40:	b92b      	cbnz	r3, 8006d4e <quorem+0x9e>
 8006d42:	9b01      	ldr	r3, [sp, #4]
 8006d44:	3b04      	subs	r3, #4
 8006d46:	429d      	cmp	r5, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	d32f      	bcc.n	8006dac <quorem+0xfc>
 8006d4c:	613c      	str	r4, [r7, #16]
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f001 fc82 	bl	8008658 <__mcmp>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	db25      	blt.n	8006da4 <quorem+0xf4>
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f04f 0c00 	mov.w	ip, #0
 8006d5e:	3601      	adds	r6, #1
 8006d60:	f858 1b04 	ldr.w	r1, [r8], #4
 8006d64:	f8d0 e000 	ldr.w	lr, [r0]
 8006d68:	b28b      	uxth	r3, r1
 8006d6a:	ebac 0303 	sub.w	r3, ip, r3
 8006d6e:	fa1f f28e 	uxth.w	r2, lr
 8006d72:	4413      	add	r3, r2
 8006d74:	0c0a      	lsrs	r2, r1, #16
 8006d76:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d84:	45c1      	cmp	r9, r8
 8006d86:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d8a:	f840 3b04 	str.w	r3, [r0], #4
 8006d8e:	d2e7      	bcs.n	8006d60 <quorem+0xb0>
 8006d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d98:	b922      	cbnz	r2, 8006da4 <quorem+0xf4>
 8006d9a:	3b04      	subs	r3, #4
 8006d9c:	429d      	cmp	r5, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	d30a      	bcc.n	8006db8 <quorem+0x108>
 8006da2:	613c      	str	r4, [r7, #16]
 8006da4:	4630      	mov	r0, r6
 8006da6:	b003      	add	sp, #12
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	3b04      	subs	r3, #4
 8006db0:	2a00      	cmp	r2, #0
 8006db2:	d1cb      	bne.n	8006d4c <quorem+0x9c>
 8006db4:	3c01      	subs	r4, #1
 8006db6:	e7c6      	b.n	8006d46 <quorem+0x96>
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	3b04      	subs	r3, #4
 8006dbc:	2a00      	cmp	r2, #0
 8006dbe:	d1f0      	bne.n	8006da2 <quorem+0xf2>
 8006dc0:	3c01      	subs	r4, #1
 8006dc2:	e7eb      	b.n	8006d9c <quorem+0xec>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	e7ee      	b.n	8006da6 <quorem+0xf6>

08006dc8 <_dtoa_r>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	4616      	mov	r6, r2
 8006dce:	461f      	mov	r7, r3
 8006dd0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006dd2:	b099      	sub	sp, #100	; 0x64
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006dda:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006dde:	b974      	cbnz	r4, 8006dfe <_dtoa_r+0x36>
 8006de0:	2010      	movs	r0, #16
 8006de2:	f001 f949 	bl	8008078 <malloc>
 8006de6:	4602      	mov	r2, r0
 8006de8:	6268      	str	r0, [r5, #36]	; 0x24
 8006dea:	b920      	cbnz	r0, 8006df6 <_dtoa_r+0x2e>
 8006dec:	21ea      	movs	r1, #234	; 0xea
 8006dee:	4ba8      	ldr	r3, [pc, #672]	; (8007090 <_dtoa_r+0x2c8>)
 8006df0:	48a8      	ldr	r0, [pc, #672]	; (8007094 <_dtoa_r+0x2cc>)
 8006df2:	f002 f8a5 	bl	8008f40 <__assert_func>
 8006df6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dfa:	6004      	str	r4, [r0, #0]
 8006dfc:	60c4      	str	r4, [r0, #12]
 8006dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e00:	6819      	ldr	r1, [r3, #0]
 8006e02:	b151      	cbz	r1, 8006e1a <_dtoa_r+0x52>
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	2301      	movs	r3, #1
 8006e08:	4093      	lsls	r3, r2
 8006e0a:	604a      	str	r2, [r1, #4]
 8006e0c:	608b      	str	r3, [r1, #8]
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f001 f99a 	bl	8008148 <_Bfree>
 8006e14:	2200      	movs	r2, #0
 8006e16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	1e3b      	subs	r3, r7, #0
 8006e1c:	bfaf      	iteee	ge
 8006e1e:	2300      	movge	r3, #0
 8006e20:	2201      	movlt	r2, #1
 8006e22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e26:	9305      	strlt	r3, [sp, #20]
 8006e28:	bfa8      	it	ge
 8006e2a:	f8c8 3000 	strge.w	r3, [r8]
 8006e2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006e32:	4b99      	ldr	r3, [pc, #612]	; (8007098 <_dtoa_r+0x2d0>)
 8006e34:	bfb8      	it	lt
 8006e36:	f8c8 2000 	strlt.w	r2, [r8]
 8006e3a:	ea33 0309 	bics.w	r3, r3, r9
 8006e3e:	d119      	bne.n	8006e74 <_dtoa_r+0xac>
 8006e40:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e4c:	4333      	orrs	r3, r6
 8006e4e:	f000 857f 	beq.w	8007950 <_dtoa_r+0xb88>
 8006e52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e54:	b953      	cbnz	r3, 8006e6c <_dtoa_r+0xa4>
 8006e56:	4b91      	ldr	r3, [pc, #580]	; (800709c <_dtoa_r+0x2d4>)
 8006e58:	e022      	b.n	8006ea0 <_dtoa_r+0xd8>
 8006e5a:	4b91      	ldr	r3, [pc, #580]	; (80070a0 <_dtoa_r+0x2d8>)
 8006e5c:	9303      	str	r3, [sp, #12]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	9803      	ldr	r0, [sp, #12]
 8006e66:	b019      	add	sp, #100	; 0x64
 8006e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	4b8b      	ldr	r3, [pc, #556]	; (800709c <_dtoa_r+0x2d4>)
 8006e6e:	9303      	str	r3, [sp, #12]
 8006e70:	3303      	adds	r3, #3
 8006e72:	e7f5      	b.n	8006e60 <_dtoa_r+0x98>
 8006e74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e80:	2200      	movs	r2, #0
 8006e82:	2300      	movs	r3, #0
 8006e84:	f7f9 fe00 	bl	8000a88 <__aeabi_dcmpeq>
 8006e88:	4680      	mov	r8, r0
 8006e8a:	b158      	cbz	r0, 8006ea4 <_dtoa_r+0xdc>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8558 	beq.w	800794a <_dtoa_r+0xb82>
 8006e9a:	4882      	ldr	r0, [pc, #520]	; (80070a4 <_dtoa_r+0x2dc>)
 8006e9c:	6018      	str	r0, [r3, #0]
 8006e9e:	1e43      	subs	r3, r0, #1
 8006ea0:	9303      	str	r3, [sp, #12]
 8006ea2:	e7df      	b.n	8006e64 <_dtoa_r+0x9c>
 8006ea4:	ab16      	add	r3, sp, #88	; 0x58
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	ab17      	add	r3, sp, #92	; 0x5c
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	4628      	mov	r0, r5
 8006eae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006eb2:	f001 fcf3 	bl	800889c <__d2b>
 8006eb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006eba:	4683      	mov	fp, r0
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	d07f      	beq.n	8006fc0 <_dtoa_r+0x1f8>
 8006ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ece:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006ed2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006ed6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006eda:	2200      	movs	r2, #0
 8006edc:	4b72      	ldr	r3, [pc, #456]	; (80070a8 <_dtoa_r+0x2e0>)
 8006ede:	f7f9 f9b3 	bl	8000248 <__aeabi_dsub>
 8006ee2:	a365      	add	r3, pc, #404	; (adr r3, 8007078 <_dtoa_r+0x2b0>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	f7f9 fb66 	bl	80005b8 <__aeabi_dmul>
 8006eec:	a364      	add	r3, pc, #400	; (adr r3, 8007080 <_dtoa_r+0x2b8>)
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	f7f9 f9ab 	bl	800024c <__adddf3>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	4620      	mov	r0, r4
 8006efa:	460f      	mov	r7, r1
 8006efc:	f7f9 faf2 	bl	80004e4 <__aeabi_i2d>
 8006f00:	a361      	add	r3, pc, #388	; (adr r3, 8007088 <_dtoa_r+0x2c0>)
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	f7f9 fb57 	bl	80005b8 <__aeabi_dmul>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4630      	mov	r0, r6
 8006f10:	4639      	mov	r1, r7
 8006f12:	f7f9 f99b 	bl	800024c <__adddf3>
 8006f16:	4606      	mov	r6, r0
 8006f18:	460f      	mov	r7, r1
 8006f1a:	f7f9 fdfd 	bl	8000b18 <__aeabi_d2iz>
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4682      	mov	sl, r0
 8006f22:	2300      	movs	r3, #0
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f7f9 fdb8 	bl	8000a9c <__aeabi_dcmplt>
 8006f2c:	b148      	cbz	r0, 8006f42 <_dtoa_r+0x17a>
 8006f2e:	4650      	mov	r0, sl
 8006f30:	f7f9 fad8 	bl	80004e4 <__aeabi_i2d>
 8006f34:	4632      	mov	r2, r6
 8006f36:	463b      	mov	r3, r7
 8006f38:	f7f9 fda6 	bl	8000a88 <__aeabi_dcmpeq>
 8006f3c:	b908      	cbnz	r0, 8006f42 <_dtoa_r+0x17a>
 8006f3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f42:	f1ba 0f16 	cmp.w	sl, #22
 8006f46:	d858      	bhi.n	8006ffa <_dtoa_r+0x232>
 8006f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f4c:	4b57      	ldr	r3, [pc, #348]	; (80070ac <_dtoa_r+0x2e4>)
 8006f4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f7f9 fda1 	bl	8000a9c <__aeabi_dcmplt>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d04f      	beq.n	8006ffe <_dtoa_r+0x236>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f64:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f68:	1b1c      	subs	r4, r3, r4
 8006f6a:	1e63      	subs	r3, r4, #1
 8006f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6e:	bf49      	itett	mi
 8006f70:	f1c4 0301 	rsbmi	r3, r4, #1
 8006f74:	2300      	movpl	r3, #0
 8006f76:	9306      	strmi	r3, [sp, #24]
 8006f78:	2300      	movmi	r3, #0
 8006f7a:	bf54      	ite	pl
 8006f7c:	9306      	strpl	r3, [sp, #24]
 8006f7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006f80:	f1ba 0f00 	cmp.w	sl, #0
 8006f84:	db3d      	blt.n	8007002 <_dtoa_r+0x23a>
 8006f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f88:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006f8c:	4453      	add	r3, sl
 8006f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f90:	2300      	movs	r3, #0
 8006f92:	930a      	str	r3, [sp, #40]	; 0x28
 8006f94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f96:	2b09      	cmp	r3, #9
 8006f98:	f200 808c 	bhi.w	80070b4 <_dtoa_r+0x2ec>
 8006f9c:	2b05      	cmp	r3, #5
 8006f9e:	bfc4      	itt	gt
 8006fa0:	3b04      	subgt	r3, #4
 8006fa2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fa6:	bfc8      	it	gt
 8006fa8:	2400      	movgt	r4, #0
 8006faa:	f1a3 0302 	sub.w	r3, r3, #2
 8006fae:	bfd8      	it	le
 8006fb0:	2401      	movle	r4, #1
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	f200 808a 	bhi.w	80070cc <_dtoa_r+0x304>
 8006fb8:	e8df f003 	tbb	[pc, r3]
 8006fbc:	5b4d4f2d 	.word	0x5b4d4f2d
 8006fc0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006fc4:	441c      	add	r4, r3
 8006fc6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	bfc3      	ittte	gt
 8006fce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fd2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006fd6:	fa09 f303 	lslgt.w	r3, r9, r3
 8006fda:	f1c3 0320 	rsble	r3, r3, #32
 8006fde:	bfc6      	itte	gt
 8006fe0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006fe4:	4318      	orrgt	r0, r3
 8006fe6:	fa06 f003 	lslle.w	r0, r6, r3
 8006fea:	f7f9 fa6b 	bl	80004c4 <__aeabi_ui2d>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006ff4:	3c01      	subs	r4, #1
 8006ff6:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ff8:	e76f      	b.n	8006eda <_dtoa_r+0x112>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e7b2      	b.n	8006f64 <_dtoa_r+0x19c>
 8006ffe:	900f      	str	r0, [sp, #60]	; 0x3c
 8007000:	e7b1      	b.n	8006f66 <_dtoa_r+0x19e>
 8007002:	9b06      	ldr	r3, [sp, #24]
 8007004:	eba3 030a 	sub.w	r3, r3, sl
 8007008:	9306      	str	r3, [sp, #24]
 800700a:	f1ca 0300 	rsb	r3, sl, #0
 800700e:	930a      	str	r3, [sp, #40]	; 0x28
 8007010:	2300      	movs	r3, #0
 8007012:	930e      	str	r3, [sp, #56]	; 0x38
 8007014:	e7be      	b.n	8006f94 <_dtoa_r+0x1cc>
 8007016:	2300      	movs	r3, #0
 8007018:	930b      	str	r3, [sp, #44]	; 0x2c
 800701a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800701c:	2b00      	cmp	r3, #0
 800701e:	dc58      	bgt.n	80070d2 <_dtoa_r+0x30a>
 8007020:	f04f 0901 	mov.w	r9, #1
 8007024:	464b      	mov	r3, r9
 8007026:	f8cd 9020 	str.w	r9, [sp, #32]
 800702a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800702e:	2200      	movs	r2, #0
 8007030:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007032:	6042      	str	r2, [r0, #4]
 8007034:	2204      	movs	r2, #4
 8007036:	f102 0614 	add.w	r6, r2, #20
 800703a:	429e      	cmp	r6, r3
 800703c:	6841      	ldr	r1, [r0, #4]
 800703e:	d94e      	bls.n	80070de <_dtoa_r+0x316>
 8007040:	4628      	mov	r0, r5
 8007042:	f001 f841 	bl	80080c8 <_Balloc>
 8007046:	9003      	str	r0, [sp, #12]
 8007048:	2800      	cmp	r0, #0
 800704a:	d14c      	bne.n	80070e6 <_dtoa_r+0x31e>
 800704c:	4602      	mov	r2, r0
 800704e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007052:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <_dtoa_r+0x2e8>)
 8007054:	e6cc      	b.n	8006df0 <_dtoa_r+0x28>
 8007056:	2301      	movs	r3, #1
 8007058:	e7de      	b.n	8007018 <_dtoa_r+0x250>
 800705a:	2300      	movs	r3, #0
 800705c:	930b      	str	r3, [sp, #44]	; 0x2c
 800705e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007060:	eb0a 0903 	add.w	r9, sl, r3
 8007064:	f109 0301 	add.w	r3, r9, #1
 8007068:	2b01      	cmp	r3, #1
 800706a:	9308      	str	r3, [sp, #32]
 800706c:	bfb8      	it	lt
 800706e:	2301      	movlt	r3, #1
 8007070:	e7dd      	b.n	800702e <_dtoa_r+0x266>
 8007072:	2301      	movs	r3, #1
 8007074:	e7f2      	b.n	800705c <_dtoa_r+0x294>
 8007076:	bf00      	nop
 8007078:	636f4361 	.word	0x636f4361
 800707c:	3fd287a7 	.word	0x3fd287a7
 8007080:	8b60c8b3 	.word	0x8b60c8b3
 8007084:	3fc68a28 	.word	0x3fc68a28
 8007088:	509f79fb 	.word	0x509f79fb
 800708c:	3fd34413 	.word	0x3fd34413
 8007090:	08009d36 	.word	0x08009d36
 8007094:	08009d4d 	.word	0x08009d4d
 8007098:	7ff00000 	.word	0x7ff00000
 800709c:	08009d32 	.word	0x08009d32
 80070a0:	08009d29 	.word	0x08009d29
 80070a4:	08009ba9 	.word	0x08009ba9
 80070a8:	3ff80000 	.word	0x3ff80000
 80070ac:	08009eb8 	.word	0x08009eb8
 80070b0:	08009da8 	.word	0x08009da8
 80070b4:	2401      	movs	r4, #1
 80070b6:	2300      	movs	r3, #0
 80070b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80070ba:	9322      	str	r3, [sp, #136]	; 0x88
 80070bc:	f04f 39ff 	mov.w	r9, #4294967295
 80070c0:	2200      	movs	r2, #0
 80070c2:	2312      	movs	r3, #18
 80070c4:	f8cd 9020 	str.w	r9, [sp, #32]
 80070c8:	9223      	str	r2, [sp, #140]	; 0x8c
 80070ca:	e7b0      	b.n	800702e <_dtoa_r+0x266>
 80070cc:	2301      	movs	r3, #1
 80070ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80070d0:	e7f4      	b.n	80070bc <_dtoa_r+0x2f4>
 80070d2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80070d6:	464b      	mov	r3, r9
 80070d8:	f8cd 9020 	str.w	r9, [sp, #32]
 80070dc:	e7a7      	b.n	800702e <_dtoa_r+0x266>
 80070de:	3101      	adds	r1, #1
 80070e0:	6041      	str	r1, [r0, #4]
 80070e2:	0052      	lsls	r2, r2, #1
 80070e4:	e7a7      	b.n	8007036 <_dtoa_r+0x26e>
 80070e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070e8:	9a03      	ldr	r2, [sp, #12]
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	9b08      	ldr	r3, [sp, #32]
 80070ee:	2b0e      	cmp	r3, #14
 80070f0:	f200 80a8 	bhi.w	8007244 <_dtoa_r+0x47c>
 80070f4:	2c00      	cmp	r4, #0
 80070f6:	f000 80a5 	beq.w	8007244 <_dtoa_r+0x47c>
 80070fa:	f1ba 0f00 	cmp.w	sl, #0
 80070fe:	dd34      	ble.n	800716a <_dtoa_r+0x3a2>
 8007100:	4a9a      	ldr	r2, [pc, #616]	; (800736c <_dtoa_r+0x5a4>)
 8007102:	f00a 030f 	and.w	r3, sl, #15
 8007106:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800710a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800710e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007112:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007116:	ea4f 142a 	mov.w	r4, sl, asr #4
 800711a:	d016      	beq.n	800714a <_dtoa_r+0x382>
 800711c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007120:	4b93      	ldr	r3, [pc, #588]	; (8007370 <_dtoa_r+0x5a8>)
 8007122:	2703      	movs	r7, #3
 8007124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007128:	f7f9 fb70 	bl	800080c <__aeabi_ddiv>
 800712c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007130:	f004 040f 	and.w	r4, r4, #15
 8007134:	4e8e      	ldr	r6, [pc, #568]	; (8007370 <_dtoa_r+0x5a8>)
 8007136:	b954      	cbnz	r4, 800714e <_dtoa_r+0x386>
 8007138:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800713c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007140:	f7f9 fb64 	bl	800080c <__aeabi_ddiv>
 8007144:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007148:	e029      	b.n	800719e <_dtoa_r+0x3d6>
 800714a:	2702      	movs	r7, #2
 800714c:	e7f2      	b.n	8007134 <_dtoa_r+0x36c>
 800714e:	07e1      	lsls	r1, r4, #31
 8007150:	d508      	bpl.n	8007164 <_dtoa_r+0x39c>
 8007152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007156:	e9d6 2300 	ldrd	r2, r3, [r6]
 800715a:	f7f9 fa2d 	bl	80005b8 <__aeabi_dmul>
 800715e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007162:	3701      	adds	r7, #1
 8007164:	1064      	asrs	r4, r4, #1
 8007166:	3608      	adds	r6, #8
 8007168:	e7e5      	b.n	8007136 <_dtoa_r+0x36e>
 800716a:	f000 80a5 	beq.w	80072b8 <_dtoa_r+0x4f0>
 800716e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007172:	f1ca 0400 	rsb	r4, sl, #0
 8007176:	4b7d      	ldr	r3, [pc, #500]	; (800736c <_dtoa_r+0x5a4>)
 8007178:	f004 020f 	and.w	r2, r4, #15
 800717c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f7f9 fa18 	bl	80005b8 <__aeabi_dmul>
 8007188:	2702      	movs	r7, #2
 800718a:	2300      	movs	r3, #0
 800718c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007190:	4e77      	ldr	r6, [pc, #476]	; (8007370 <_dtoa_r+0x5a8>)
 8007192:	1124      	asrs	r4, r4, #4
 8007194:	2c00      	cmp	r4, #0
 8007196:	f040 8084 	bne.w	80072a2 <_dtoa_r+0x4da>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1d2      	bne.n	8007144 <_dtoa_r+0x37c>
 800719e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 808b 	beq.w	80072bc <_dtoa_r+0x4f4>
 80071a6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80071ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071b2:	2200      	movs	r2, #0
 80071b4:	4b6f      	ldr	r3, [pc, #444]	; (8007374 <_dtoa_r+0x5ac>)
 80071b6:	f7f9 fc71 	bl	8000a9c <__aeabi_dcmplt>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d07e      	beq.n	80072bc <_dtoa_r+0x4f4>
 80071be:	9b08      	ldr	r3, [sp, #32]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d07b      	beq.n	80072bc <_dtoa_r+0x4f4>
 80071c4:	f1b9 0f00 	cmp.w	r9, #0
 80071c8:	dd38      	ble.n	800723c <_dtoa_r+0x474>
 80071ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071ce:	2200      	movs	r2, #0
 80071d0:	4b69      	ldr	r3, [pc, #420]	; (8007378 <_dtoa_r+0x5b0>)
 80071d2:	f7f9 f9f1 	bl	80005b8 <__aeabi_dmul>
 80071d6:	464c      	mov	r4, r9
 80071d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071dc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80071e0:	3701      	adds	r7, #1
 80071e2:	4638      	mov	r0, r7
 80071e4:	f7f9 f97e 	bl	80004e4 <__aeabi_i2d>
 80071e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ec:	f7f9 f9e4 	bl	80005b8 <__aeabi_dmul>
 80071f0:	2200      	movs	r2, #0
 80071f2:	4b62      	ldr	r3, [pc, #392]	; (800737c <_dtoa_r+0x5b4>)
 80071f4:	f7f9 f82a 	bl	800024c <__adddf3>
 80071f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80071fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007200:	9611      	str	r6, [sp, #68]	; 0x44
 8007202:	2c00      	cmp	r4, #0
 8007204:	d15d      	bne.n	80072c2 <_dtoa_r+0x4fa>
 8007206:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800720a:	2200      	movs	r2, #0
 800720c:	4b5c      	ldr	r3, [pc, #368]	; (8007380 <_dtoa_r+0x5b8>)
 800720e:	f7f9 f81b 	bl	8000248 <__aeabi_dsub>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800721a:	4633      	mov	r3, r6
 800721c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800721e:	f7f9 fc5b 	bl	8000ad8 <__aeabi_dcmpgt>
 8007222:	2800      	cmp	r0, #0
 8007224:	f040 829c 	bne.w	8007760 <_dtoa_r+0x998>
 8007228:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800722c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800722e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007232:	f7f9 fc33 	bl	8000a9c <__aeabi_dcmplt>
 8007236:	2800      	cmp	r0, #0
 8007238:	f040 8290 	bne.w	800775c <_dtoa_r+0x994>
 800723c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007240:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007244:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007246:	2b00      	cmp	r3, #0
 8007248:	f2c0 8152 	blt.w	80074f0 <_dtoa_r+0x728>
 800724c:	f1ba 0f0e 	cmp.w	sl, #14
 8007250:	f300 814e 	bgt.w	80074f0 <_dtoa_r+0x728>
 8007254:	4b45      	ldr	r3, [pc, #276]	; (800736c <_dtoa_r+0x5a4>)
 8007256:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800725a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800725e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007262:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007264:	2b00      	cmp	r3, #0
 8007266:	f280 80db 	bge.w	8007420 <_dtoa_r+0x658>
 800726a:	9b08      	ldr	r3, [sp, #32]
 800726c:	2b00      	cmp	r3, #0
 800726e:	f300 80d7 	bgt.w	8007420 <_dtoa_r+0x658>
 8007272:	f040 8272 	bne.w	800775a <_dtoa_r+0x992>
 8007276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800727a:	2200      	movs	r2, #0
 800727c:	4b40      	ldr	r3, [pc, #256]	; (8007380 <_dtoa_r+0x5b8>)
 800727e:	f7f9 f99b 	bl	80005b8 <__aeabi_dmul>
 8007282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007286:	f7f9 fc1d 	bl	8000ac4 <__aeabi_dcmpge>
 800728a:	9c08      	ldr	r4, [sp, #32]
 800728c:	4626      	mov	r6, r4
 800728e:	2800      	cmp	r0, #0
 8007290:	f040 8248 	bne.w	8007724 <_dtoa_r+0x95c>
 8007294:	2331      	movs	r3, #49	; 0x31
 8007296:	9f03      	ldr	r7, [sp, #12]
 8007298:	f10a 0a01 	add.w	sl, sl, #1
 800729c:	f807 3b01 	strb.w	r3, [r7], #1
 80072a0:	e244      	b.n	800772c <_dtoa_r+0x964>
 80072a2:	07e2      	lsls	r2, r4, #31
 80072a4:	d505      	bpl.n	80072b2 <_dtoa_r+0x4ea>
 80072a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072aa:	f7f9 f985 	bl	80005b8 <__aeabi_dmul>
 80072ae:	2301      	movs	r3, #1
 80072b0:	3701      	adds	r7, #1
 80072b2:	1064      	asrs	r4, r4, #1
 80072b4:	3608      	adds	r6, #8
 80072b6:	e76d      	b.n	8007194 <_dtoa_r+0x3cc>
 80072b8:	2702      	movs	r7, #2
 80072ba:	e770      	b.n	800719e <_dtoa_r+0x3d6>
 80072bc:	46d0      	mov	r8, sl
 80072be:	9c08      	ldr	r4, [sp, #32]
 80072c0:	e78f      	b.n	80071e2 <_dtoa_r+0x41a>
 80072c2:	9903      	ldr	r1, [sp, #12]
 80072c4:	4b29      	ldr	r3, [pc, #164]	; (800736c <_dtoa_r+0x5a4>)
 80072c6:	4421      	add	r1, r4
 80072c8:	9112      	str	r1, [sp, #72]	; 0x48
 80072ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072d0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80072d4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072d8:	2900      	cmp	r1, #0
 80072da:	d055      	beq.n	8007388 <_dtoa_r+0x5c0>
 80072dc:	2000      	movs	r0, #0
 80072de:	4929      	ldr	r1, [pc, #164]	; (8007384 <_dtoa_r+0x5bc>)
 80072e0:	f7f9 fa94 	bl	800080c <__aeabi_ddiv>
 80072e4:	463b      	mov	r3, r7
 80072e6:	4632      	mov	r2, r6
 80072e8:	f7f8 ffae 	bl	8000248 <__aeabi_dsub>
 80072ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072f0:	9f03      	ldr	r7, [sp, #12]
 80072f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072f6:	f7f9 fc0f 	bl	8000b18 <__aeabi_d2iz>
 80072fa:	4604      	mov	r4, r0
 80072fc:	f7f9 f8f2 	bl	80004e4 <__aeabi_i2d>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007308:	f7f8 ff9e 	bl	8000248 <__aeabi_dsub>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	3430      	adds	r4, #48	; 0x30
 8007312:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800731a:	f807 4b01 	strb.w	r4, [r7], #1
 800731e:	f7f9 fbbd 	bl	8000a9c <__aeabi_dcmplt>
 8007322:	2800      	cmp	r0, #0
 8007324:	d174      	bne.n	8007410 <_dtoa_r+0x648>
 8007326:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800732a:	2000      	movs	r0, #0
 800732c:	4911      	ldr	r1, [pc, #68]	; (8007374 <_dtoa_r+0x5ac>)
 800732e:	f7f8 ff8b 	bl	8000248 <__aeabi_dsub>
 8007332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007336:	f7f9 fbb1 	bl	8000a9c <__aeabi_dcmplt>
 800733a:	2800      	cmp	r0, #0
 800733c:	f040 80b7 	bne.w	80074ae <_dtoa_r+0x6e6>
 8007340:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007342:	429f      	cmp	r7, r3
 8007344:	f43f af7a 	beq.w	800723c <_dtoa_r+0x474>
 8007348:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800734c:	2200      	movs	r2, #0
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <_dtoa_r+0x5b0>)
 8007350:	f7f9 f932 	bl	80005b8 <__aeabi_dmul>
 8007354:	2200      	movs	r2, #0
 8007356:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800735a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <_dtoa_r+0x5b0>)
 8007360:	f7f9 f92a 	bl	80005b8 <__aeabi_dmul>
 8007364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007368:	e7c3      	b.n	80072f2 <_dtoa_r+0x52a>
 800736a:	bf00      	nop
 800736c:	08009eb8 	.word	0x08009eb8
 8007370:	08009e90 	.word	0x08009e90
 8007374:	3ff00000 	.word	0x3ff00000
 8007378:	40240000 	.word	0x40240000
 800737c:	401c0000 	.word	0x401c0000
 8007380:	40140000 	.word	0x40140000
 8007384:	3fe00000 	.word	0x3fe00000
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	f7f9 f914 	bl	80005b8 <__aeabi_dmul>
 8007390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007392:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007396:	9c03      	ldr	r4, [sp, #12]
 8007398:	9314      	str	r3, [sp, #80]	; 0x50
 800739a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800739e:	f7f9 fbbb 	bl	8000b18 <__aeabi_d2iz>
 80073a2:	9015      	str	r0, [sp, #84]	; 0x54
 80073a4:	f7f9 f89e 	bl	80004e4 <__aeabi_i2d>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073b0:	f7f8 ff4a 	bl	8000248 <__aeabi_dsub>
 80073b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073b6:	4606      	mov	r6, r0
 80073b8:	3330      	adds	r3, #48	; 0x30
 80073ba:	f804 3b01 	strb.w	r3, [r4], #1
 80073be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073c0:	460f      	mov	r7, r1
 80073c2:	429c      	cmp	r4, r3
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	d124      	bne.n	8007414 <_dtoa_r+0x64c>
 80073ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073ce:	4bb0      	ldr	r3, [pc, #704]	; (8007690 <_dtoa_r+0x8c8>)
 80073d0:	f7f8 ff3c 	bl	800024c <__adddf3>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f9 fb7c 	bl	8000ad8 <__aeabi_dcmpgt>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d163      	bne.n	80074ac <_dtoa_r+0x6e4>
 80073e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073e8:	2000      	movs	r0, #0
 80073ea:	49a9      	ldr	r1, [pc, #676]	; (8007690 <_dtoa_r+0x8c8>)
 80073ec:	f7f8 ff2c 	bl	8000248 <__aeabi_dsub>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4630      	mov	r0, r6
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f9 fb50 	bl	8000a9c <__aeabi_dcmplt>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f43f af1d 	beq.w	800723c <_dtoa_r+0x474>
 8007402:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007404:	1e7b      	subs	r3, r7, #1
 8007406:	9314      	str	r3, [sp, #80]	; 0x50
 8007408:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800740c:	2b30      	cmp	r3, #48	; 0x30
 800740e:	d0f8      	beq.n	8007402 <_dtoa_r+0x63a>
 8007410:	46c2      	mov	sl, r8
 8007412:	e03b      	b.n	800748c <_dtoa_r+0x6c4>
 8007414:	4b9f      	ldr	r3, [pc, #636]	; (8007694 <_dtoa_r+0x8cc>)
 8007416:	f7f9 f8cf 	bl	80005b8 <__aeabi_dmul>
 800741a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800741e:	e7bc      	b.n	800739a <_dtoa_r+0x5d2>
 8007420:	9f03      	ldr	r7, [sp, #12]
 8007422:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007426:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800742a:	4640      	mov	r0, r8
 800742c:	4649      	mov	r1, r9
 800742e:	f7f9 f9ed 	bl	800080c <__aeabi_ddiv>
 8007432:	f7f9 fb71 	bl	8000b18 <__aeabi_d2iz>
 8007436:	4604      	mov	r4, r0
 8007438:	f7f9 f854 	bl	80004e4 <__aeabi_i2d>
 800743c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007440:	f7f9 f8ba 	bl	80005b8 <__aeabi_dmul>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4640      	mov	r0, r8
 800744a:	4649      	mov	r1, r9
 800744c:	f7f8 fefc 	bl	8000248 <__aeabi_dsub>
 8007450:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007454:	f807 6b01 	strb.w	r6, [r7], #1
 8007458:	9e03      	ldr	r6, [sp, #12]
 800745a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800745e:	1bbe      	subs	r6, r7, r6
 8007460:	45b4      	cmp	ip, r6
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	d136      	bne.n	80074d6 <_dtoa_r+0x70e>
 8007468:	f7f8 fef0 	bl	800024c <__adddf3>
 800746c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007470:	4680      	mov	r8, r0
 8007472:	4689      	mov	r9, r1
 8007474:	f7f9 fb30 	bl	8000ad8 <__aeabi_dcmpgt>
 8007478:	bb58      	cbnz	r0, 80074d2 <_dtoa_r+0x70a>
 800747a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800747e:	4640      	mov	r0, r8
 8007480:	4649      	mov	r1, r9
 8007482:	f7f9 fb01 	bl	8000a88 <__aeabi_dcmpeq>
 8007486:	b108      	cbz	r0, 800748c <_dtoa_r+0x6c4>
 8007488:	07e1      	lsls	r1, r4, #31
 800748a:	d422      	bmi.n	80074d2 <_dtoa_r+0x70a>
 800748c:	4628      	mov	r0, r5
 800748e:	4659      	mov	r1, fp
 8007490:	f000 fe5a 	bl	8008148 <_Bfree>
 8007494:	2300      	movs	r3, #0
 8007496:	703b      	strb	r3, [r7, #0]
 8007498:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800749a:	f10a 0001 	add.w	r0, sl, #1
 800749e:	6018      	str	r0, [r3, #0]
 80074a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f43f acde 	beq.w	8006e64 <_dtoa_r+0x9c>
 80074a8:	601f      	str	r7, [r3, #0]
 80074aa:	e4db      	b.n	8006e64 <_dtoa_r+0x9c>
 80074ac:	4627      	mov	r7, r4
 80074ae:	463b      	mov	r3, r7
 80074b0:	461f      	mov	r7, r3
 80074b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074b6:	2a39      	cmp	r2, #57	; 0x39
 80074b8:	d107      	bne.n	80074ca <_dtoa_r+0x702>
 80074ba:	9a03      	ldr	r2, [sp, #12]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d1f7      	bne.n	80074b0 <_dtoa_r+0x6e8>
 80074c0:	2230      	movs	r2, #48	; 0x30
 80074c2:	9903      	ldr	r1, [sp, #12]
 80074c4:	f108 0801 	add.w	r8, r8, #1
 80074c8:	700a      	strb	r2, [r1, #0]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	3201      	adds	r2, #1
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	e79e      	b.n	8007410 <_dtoa_r+0x648>
 80074d2:	46d0      	mov	r8, sl
 80074d4:	e7eb      	b.n	80074ae <_dtoa_r+0x6e6>
 80074d6:	2200      	movs	r2, #0
 80074d8:	4b6e      	ldr	r3, [pc, #440]	; (8007694 <_dtoa_r+0x8cc>)
 80074da:	f7f9 f86d 	bl	80005b8 <__aeabi_dmul>
 80074de:	2200      	movs	r2, #0
 80074e0:	2300      	movs	r3, #0
 80074e2:	4680      	mov	r8, r0
 80074e4:	4689      	mov	r9, r1
 80074e6:	f7f9 facf 	bl	8000a88 <__aeabi_dcmpeq>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d09b      	beq.n	8007426 <_dtoa_r+0x65e>
 80074ee:	e7cd      	b.n	800748c <_dtoa_r+0x6c4>
 80074f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	f000 80d0 	beq.w	8007698 <_dtoa_r+0x8d0>
 80074f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80074fa:	2a01      	cmp	r2, #1
 80074fc:	f300 80ae 	bgt.w	800765c <_dtoa_r+0x894>
 8007500:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007502:	2a00      	cmp	r2, #0
 8007504:	f000 80a6 	beq.w	8007654 <_dtoa_r+0x88c>
 8007508:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800750c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800750e:	9f06      	ldr	r7, [sp, #24]
 8007510:	9a06      	ldr	r2, [sp, #24]
 8007512:	2101      	movs	r1, #1
 8007514:	441a      	add	r2, r3
 8007516:	9206      	str	r2, [sp, #24]
 8007518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800751a:	4628      	mov	r0, r5
 800751c:	441a      	add	r2, r3
 800751e:	9209      	str	r2, [sp, #36]	; 0x24
 8007520:	f000 ff12 	bl	8008348 <__i2b>
 8007524:	4606      	mov	r6, r0
 8007526:	2f00      	cmp	r7, #0
 8007528:	dd0c      	ble.n	8007544 <_dtoa_r+0x77c>
 800752a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752c:	2b00      	cmp	r3, #0
 800752e:	dd09      	ble.n	8007544 <_dtoa_r+0x77c>
 8007530:	42bb      	cmp	r3, r7
 8007532:	bfa8      	it	ge
 8007534:	463b      	movge	r3, r7
 8007536:	9a06      	ldr	r2, [sp, #24]
 8007538:	1aff      	subs	r7, r7, r3
 800753a:	1ad2      	subs	r2, r2, r3
 800753c:	9206      	str	r2, [sp, #24]
 800753e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	9309      	str	r3, [sp, #36]	; 0x24
 8007544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007546:	b1f3      	cbz	r3, 8007586 <_dtoa_r+0x7be>
 8007548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 80a8 	beq.w	80076a0 <_dtoa_r+0x8d8>
 8007550:	2c00      	cmp	r4, #0
 8007552:	dd10      	ble.n	8007576 <_dtoa_r+0x7ae>
 8007554:	4631      	mov	r1, r6
 8007556:	4622      	mov	r2, r4
 8007558:	4628      	mov	r0, r5
 800755a:	f000 ffb3 	bl	80084c4 <__pow5mult>
 800755e:	465a      	mov	r2, fp
 8007560:	4601      	mov	r1, r0
 8007562:	4606      	mov	r6, r0
 8007564:	4628      	mov	r0, r5
 8007566:	f000 ff05 	bl	8008374 <__multiply>
 800756a:	4680      	mov	r8, r0
 800756c:	4659      	mov	r1, fp
 800756e:	4628      	mov	r0, r5
 8007570:	f000 fdea 	bl	8008148 <_Bfree>
 8007574:	46c3      	mov	fp, r8
 8007576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007578:	1b1a      	subs	r2, r3, r4
 800757a:	d004      	beq.n	8007586 <_dtoa_r+0x7be>
 800757c:	4659      	mov	r1, fp
 800757e:	4628      	mov	r0, r5
 8007580:	f000 ffa0 	bl	80084c4 <__pow5mult>
 8007584:	4683      	mov	fp, r0
 8007586:	2101      	movs	r1, #1
 8007588:	4628      	mov	r0, r5
 800758a:	f000 fedd 	bl	8008348 <__i2b>
 800758e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007590:	4604      	mov	r4, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	f340 8086 	ble.w	80076a4 <_dtoa_r+0x8dc>
 8007598:	461a      	mov	r2, r3
 800759a:	4601      	mov	r1, r0
 800759c:	4628      	mov	r0, r5
 800759e:	f000 ff91 	bl	80084c4 <__pow5mult>
 80075a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075a4:	4604      	mov	r4, r0
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	dd7f      	ble.n	80076aa <_dtoa_r+0x8e2>
 80075aa:	f04f 0800 	mov.w	r8, #0
 80075ae:	6923      	ldr	r3, [r4, #16]
 80075b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075b4:	6918      	ldr	r0, [r3, #16]
 80075b6:	f000 fe79 	bl	80082ac <__hi0bits>
 80075ba:	f1c0 0020 	rsb	r0, r0, #32
 80075be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c0:	4418      	add	r0, r3
 80075c2:	f010 001f 	ands.w	r0, r0, #31
 80075c6:	f000 8092 	beq.w	80076ee <_dtoa_r+0x926>
 80075ca:	f1c0 0320 	rsb	r3, r0, #32
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	f340 808a 	ble.w	80076e8 <_dtoa_r+0x920>
 80075d4:	f1c0 001c 	rsb	r0, r0, #28
 80075d8:	9b06      	ldr	r3, [sp, #24]
 80075da:	4407      	add	r7, r0
 80075dc:	4403      	add	r3, r0
 80075de:	9306      	str	r3, [sp, #24]
 80075e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e2:	4403      	add	r3, r0
 80075e4:	9309      	str	r3, [sp, #36]	; 0x24
 80075e6:	9b06      	ldr	r3, [sp, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	dd05      	ble.n	80075f8 <_dtoa_r+0x830>
 80075ec:	4659      	mov	r1, fp
 80075ee:	461a      	mov	r2, r3
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 ffc1 	bl	8008578 <__lshift>
 80075f6:	4683      	mov	fp, r0
 80075f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	dd05      	ble.n	800760a <_dtoa_r+0x842>
 80075fe:	4621      	mov	r1, r4
 8007600:	461a      	mov	r2, r3
 8007602:	4628      	mov	r0, r5
 8007604:	f000 ffb8 	bl	8008578 <__lshift>
 8007608:	4604      	mov	r4, r0
 800760a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800760c:	2b00      	cmp	r3, #0
 800760e:	d070      	beq.n	80076f2 <_dtoa_r+0x92a>
 8007610:	4621      	mov	r1, r4
 8007612:	4658      	mov	r0, fp
 8007614:	f001 f820 	bl	8008658 <__mcmp>
 8007618:	2800      	cmp	r0, #0
 800761a:	da6a      	bge.n	80076f2 <_dtoa_r+0x92a>
 800761c:	2300      	movs	r3, #0
 800761e:	4659      	mov	r1, fp
 8007620:	220a      	movs	r2, #10
 8007622:	4628      	mov	r0, r5
 8007624:	f000 fdb2 	bl	800818c <__multadd>
 8007628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762a:	4683      	mov	fp, r0
 800762c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8194 	beq.w	800795e <_dtoa_r+0xb96>
 8007636:	4631      	mov	r1, r6
 8007638:	2300      	movs	r3, #0
 800763a:	220a      	movs	r2, #10
 800763c:	4628      	mov	r0, r5
 800763e:	f000 fda5 	bl	800818c <__multadd>
 8007642:	f1b9 0f00 	cmp.w	r9, #0
 8007646:	4606      	mov	r6, r0
 8007648:	f300 8093 	bgt.w	8007772 <_dtoa_r+0x9aa>
 800764c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800764e:	2b02      	cmp	r3, #2
 8007650:	dc57      	bgt.n	8007702 <_dtoa_r+0x93a>
 8007652:	e08e      	b.n	8007772 <_dtoa_r+0x9aa>
 8007654:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800765a:	e757      	b.n	800750c <_dtoa_r+0x744>
 800765c:	9b08      	ldr	r3, [sp, #32]
 800765e:	1e5c      	subs	r4, r3, #1
 8007660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007662:	42a3      	cmp	r3, r4
 8007664:	bfb7      	itett	lt
 8007666:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007668:	1b1c      	subge	r4, r3, r4
 800766a:	1ae2      	sublt	r2, r4, r3
 800766c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800766e:	bfbe      	ittt	lt
 8007670:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007672:	189b      	addlt	r3, r3, r2
 8007674:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007676:	9b08      	ldr	r3, [sp, #32]
 8007678:	bfb8      	it	lt
 800767a:	2400      	movlt	r4, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	bfbb      	ittet	lt
 8007680:	9b06      	ldrlt	r3, [sp, #24]
 8007682:	9a08      	ldrlt	r2, [sp, #32]
 8007684:	9f06      	ldrge	r7, [sp, #24]
 8007686:	1a9f      	sublt	r7, r3, r2
 8007688:	bfac      	ite	ge
 800768a:	9b08      	ldrge	r3, [sp, #32]
 800768c:	2300      	movlt	r3, #0
 800768e:	e73f      	b.n	8007510 <_dtoa_r+0x748>
 8007690:	3fe00000 	.word	0x3fe00000
 8007694:	40240000 	.word	0x40240000
 8007698:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800769a:	9f06      	ldr	r7, [sp, #24]
 800769c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800769e:	e742      	b.n	8007526 <_dtoa_r+0x75e>
 80076a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076a2:	e76b      	b.n	800757c <_dtoa_r+0x7b4>
 80076a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	dc19      	bgt.n	80076de <_dtoa_r+0x916>
 80076aa:	9b04      	ldr	r3, [sp, #16]
 80076ac:	b9bb      	cbnz	r3, 80076de <_dtoa_r+0x916>
 80076ae:	9b05      	ldr	r3, [sp, #20]
 80076b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076b4:	b99b      	cbnz	r3, 80076de <_dtoa_r+0x916>
 80076b6:	9b05      	ldr	r3, [sp, #20]
 80076b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076bc:	0d1b      	lsrs	r3, r3, #20
 80076be:	051b      	lsls	r3, r3, #20
 80076c0:	b183      	cbz	r3, 80076e4 <_dtoa_r+0x91c>
 80076c2:	f04f 0801 	mov.w	r8, #1
 80076c6:	9b06      	ldr	r3, [sp, #24]
 80076c8:	3301      	adds	r3, #1
 80076ca:	9306      	str	r3, [sp, #24]
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	3301      	adds	r3, #1
 80076d0:	9309      	str	r3, [sp, #36]	; 0x24
 80076d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f47f af6a 	bne.w	80075ae <_dtoa_r+0x7e6>
 80076da:	2001      	movs	r0, #1
 80076dc:	e76f      	b.n	80075be <_dtoa_r+0x7f6>
 80076de:	f04f 0800 	mov.w	r8, #0
 80076e2:	e7f6      	b.n	80076d2 <_dtoa_r+0x90a>
 80076e4:	4698      	mov	r8, r3
 80076e6:	e7f4      	b.n	80076d2 <_dtoa_r+0x90a>
 80076e8:	f43f af7d 	beq.w	80075e6 <_dtoa_r+0x81e>
 80076ec:	4618      	mov	r0, r3
 80076ee:	301c      	adds	r0, #28
 80076f0:	e772      	b.n	80075d8 <_dtoa_r+0x810>
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dc36      	bgt.n	8007766 <_dtoa_r+0x99e>
 80076f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	dd33      	ble.n	8007766 <_dtoa_r+0x99e>
 80076fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007702:	f1b9 0f00 	cmp.w	r9, #0
 8007706:	d10d      	bne.n	8007724 <_dtoa_r+0x95c>
 8007708:	4621      	mov	r1, r4
 800770a:	464b      	mov	r3, r9
 800770c:	2205      	movs	r2, #5
 800770e:	4628      	mov	r0, r5
 8007710:	f000 fd3c 	bl	800818c <__multadd>
 8007714:	4601      	mov	r1, r0
 8007716:	4604      	mov	r4, r0
 8007718:	4658      	mov	r0, fp
 800771a:	f000 ff9d 	bl	8008658 <__mcmp>
 800771e:	2800      	cmp	r0, #0
 8007720:	f73f adb8 	bgt.w	8007294 <_dtoa_r+0x4cc>
 8007724:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007726:	9f03      	ldr	r7, [sp, #12]
 8007728:	ea6f 0a03 	mvn.w	sl, r3
 800772c:	f04f 0800 	mov.w	r8, #0
 8007730:	4621      	mov	r1, r4
 8007732:	4628      	mov	r0, r5
 8007734:	f000 fd08 	bl	8008148 <_Bfree>
 8007738:	2e00      	cmp	r6, #0
 800773a:	f43f aea7 	beq.w	800748c <_dtoa_r+0x6c4>
 800773e:	f1b8 0f00 	cmp.w	r8, #0
 8007742:	d005      	beq.n	8007750 <_dtoa_r+0x988>
 8007744:	45b0      	cmp	r8, r6
 8007746:	d003      	beq.n	8007750 <_dtoa_r+0x988>
 8007748:	4641      	mov	r1, r8
 800774a:	4628      	mov	r0, r5
 800774c:	f000 fcfc 	bl	8008148 <_Bfree>
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	f000 fcf8 	bl	8008148 <_Bfree>
 8007758:	e698      	b.n	800748c <_dtoa_r+0x6c4>
 800775a:	2400      	movs	r4, #0
 800775c:	4626      	mov	r6, r4
 800775e:	e7e1      	b.n	8007724 <_dtoa_r+0x95c>
 8007760:	46c2      	mov	sl, r8
 8007762:	4626      	mov	r6, r4
 8007764:	e596      	b.n	8007294 <_dtoa_r+0x4cc>
 8007766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80fd 	beq.w	800796c <_dtoa_r+0xba4>
 8007772:	2f00      	cmp	r7, #0
 8007774:	dd05      	ble.n	8007782 <_dtoa_r+0x9ba>
 8007776:	4631      	mov	r1, r6
 8007778:	463a      	mov	r2, r7
 800777a:	4628      	mov	r0, r5
 800777c:	f000 fefc 	bl	8008578 <__lshift>
 8007780:	4606      	mov	r6, r0
 8007782:	f1b8 0f00 	cmp.w	r8, #0
 8007786:	d05c      	beq.n	8007842 <_dtoa_r+0xa7a>
 8007788:	4628      	mov	r0, r5
 800778a:	6871      	ldr	r1, [r6, #4]
 800778c:	f000 fc9c 	bl	80080c8 <_Balloc>
 8007790:	4607      	mov	r7, r0
 8007792:	b928      	cbnz	r0, 80077a0 <_dtoa_r+0x9d8>
 8007794:	4602      	mov	r2, r0
 8007796:	f240 21ea 	movw	r1, #746	; 0x2ea
 800779a:	4b7f      	ldr	r3, [pc, #508]	; (8007998 <_dtoa_r+0xbd0>)
 800779c:	f7ff bb28 	b.w	8006df0 <_dtoa_r+0x28>
 80077a0:	6932      	ldr	r2, [r6, #16]
 80077a2:	f106 010c 	add.w	r1, r6, #12
 80077a6:	3202      	adds	r2, #2
 80077a8:	0092      	lsls	r2, r2, #2
 80077aa:	300c      	adds	r0, #12
 80077ac:	f7fd fd4a 	bl	8005244 <memcpy>
 80077b0:	2201      	movs	r2, #1
 80077b2:	4639      	mov	r1, r7
 80077b4:	4628      	mov	r0, r5
 80077b6:	f000 fedf 	bl	8008578 <__lshift>
 80077ba:	46b0      	mov	r8, r6
 80077bc:	4606      	mov	r6, r0
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	9308      	str	r3, [sp, #32]
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	444b      	add	r3, r9
 80077c8:	930a      	str	r3, [sp, #40]	; 0x28
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	9309      	str	r3, [sp, #36]	; 0x24
 80077d2:	9b08      	ldr	r3, [sp, #32]
 80077d4:	4621      	mov	r1, r4
 80077d6:	3b01      	subs	r3, #1
 80077d8:	4658      	mov	r0, fp
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	f7ff fa68 	bl	8006cb0 <quorem>
 80077e0:	4603      	mov	r3, r0
 80077e2:	4641      	mov	r1, r8
 80077e4:	3330      	adds	r3, #48	; 0x30
 80077e6:	9006      	str	r0, [sp, #24]
 80077e8:	4658      	mov	r0, fp
 80077ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ec:	f000 ff34 	bl	8008658 <__mcmp>
 80077f0:	4632      	mov	r2, r6
 80077f2:	4681      	mov	r9, r0
 80077f4:	4621      	mov	r1, r4
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 ff4a 	bl	8008690 <__mdiff>
 80077fc:	68c2      	ldr	r2, [r0, #12]
 80077fe:	4607      	mov	r7, r0
 8007800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007802:	bb02      	cbnz	r2, 8007846 <_dtoa_r+0xa7e>
 8007804:	4601      	mov	r1, r0
 8007806:	4658      	mov	r0, fp
 8007808:	f000 ff26 	bl	8008658 <__mcmp>
 800780c:	4602      	mov	r2, r0
 800780e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007810:	4639      	mov	r1, r7
 8007812:	4628      	mov	r0, r5
 8007814:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007818:	f000 fc96 	bl	8008148 <_Bfree>
 800781c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800781e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007820:	9f08      	ldr	r7, [sp, #32]
 8007822:	ea43 0102 	orr.w	r1, r3, r2
 8007826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007828:	430b      	orrs	r3, r1
 800782a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782c:	d10d      	bne.n	800784a <_dtoa_r+0xa82>
 800782e:	2b39      	cmp	r3, #57	; 0x39
 8007830:	d029      	beq.n	8007886 <_dtoa_r+0xabe>
 8007832:	f1b9 0f00 	cmp.w	r9, #0
 8007836:	dd01      	ble.n	800783c <_dtoa_r+0xa74>
 8007838:	9b06      	ldr	r3, [sp, #24]
 800783a:	3331      	adds	r3, #49	; 0x31
 800783c:	9a04      	ldr	r2, [sp, #16]
 800783e:	7013      	strb	r3, [r2, #0]
 8007840:	e776      	b.n	8007730 <_dtoa_r+0x968>
 8007842:	4630      	mov	r0, r6
 8007844:	e7b9      	b.n	80077ba <_dtoa_r+0x9f2>
 8007846:	2201      	movs	r2, #1
 8007848:	e7e2      	b.n	8007810 <_dtoa_r+0xa48>
 800784a:	f1b9 0f00 	cmp.w	r9, #0
 800784e:	db06      	blt.n	800785e <_dtoa_r+0xa96>
 8007850:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007852:	ea41 0909 	orr.w	r9, r1, r9
 8007856:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007858:	ea59 0101 	orrs.w	r1, r9, r1
 800785c:	d120      	bne.n	80078a0 <_dtoa_r+0xad8>
 800785e:	2a00      	cmp	r2, #0
 8007860:	ddec      	ble.n	800783c <_dtoa_r+0xa74>
 8007862:	4659      	mov	r1, fp
 8007864:	2201      	movs	r2, #1
 8007866:	4628      	mov	r0, r5
 8007868:	9308      	str	r3, [sp, #32]
 800786a:	f000 fe85 	bl	8008578 <__lshift>
 800786e:	4621      	mov	r1, r4
 8007870:	4683      	mov	fp, r0
 8007872:	f000 fef1 	bl	8008658 <__mcmp>
 8007876:	2800      	cmp	r0, #0
 8007878:	9b08      	ldr	r3, [sp, #32]
 800787a:	dc02      	bgt.n	8007882 <_dtoa_r+0xaba>
 800787c:	d1de      	bne.n	800783c <_dtoa_r+0xa74>
 800787e:	07da      	lsls	r2, r3, #31
 8007880:	d5dc      	bpl.n	800783c <_dtoa_r+0xa74>
 8007882:	2b39      	cmp	r3, #57	; 0x39
 8007884:	d1d8      	bne.n	8007838 <_dtoa_r+0xa70>
 8007886:	2339      	movs	r3, #57	; 0x39
 8007888:	9a04      	ldr	r2, [sp, #16]
 800788a:	7013      	strb	r3, [r2, #0]
 800788c:	463b      	mov	r3, r7
 800788e:	461f      	mov	r7, r3
 8007890:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007894:	3b01      	subs	r3, #1
 8007896:	2a39      	cmp	r2, #57	; 0x39
 8007898:	d050      	beq.n	800793c <_dtoa_r+0xb74>
 800789a:	3201      	adds	r2, #1
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	e747      	b.n	8007730 <_dtoa_r+0x968>
 80078a0:	2a00      	cmp	r2, #0
 80078a2:	dd03      	ble.n	80078ac <_dtoa_r+0xae4>
 80078a4:	2b39      	cmp	r3, #57	; 0x39
 80078a6:	d0ee      	beq.n	8007886 <_dtoa_r+0xabe>
 80078a8:	3301      	adds	r3, #1
 80078aa:	e7c7      	b.n	800783c <_dtoa_r+0xa74>
 80078ac:	9a08      	ldr	r2, [sp, #32]
 80078ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078b4:	428a      	cmp	r2, r1
 80078b6:	d02a      	beq.n	800790e <_dtoa_r+0xb46>
 80078b8:	4659      	mov	r1, fp
 80078ba:	2300      	movs	r3, #0
 80078bc:	220a      	movs	r2, #10
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 fc64 	bl	800818c <__multadd>
 80078c4:	45b0      	cmp	r8, r6
 80078c6:	4683      	mov	fp, r0
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	f04f 020a 	mov.w	r2, #10
 80078d0:	4641      	mov	r1, r8
 80078d2:	4628      	mov	r0, r5
 80078d4:	d107      	bne.n	80078e6 <_dtoa_r+0xb1e>
 80078d6:	f000 fc59 	bl	800818c <__multadd>
 80078da:	4680      	mov	r8, r0
 80078dc:	4606      	mov	r6, r0
 80078de:	9b08      	ldr	r3, [sp, #32]
 80078e0:	3301      	adds	r3, #1
 80078e2:	9308      	str	r3, [sp, #32]
 80078e4:	e775      	b.n	80077d2 <_dtoa_r+0xa0a>
 80078e6:	f000 fc51 	bl	800818c <__multadd>
 80078ea:	4631      	mov	r1, r6
 80078ec:	4680      	mov	r8, r0
 80078ee:	2300      	movs	r3, #0
 80078f0:	220a      	movs	r2, #10
 80078f2:	4628      	mov	r0, r5
 80078f4:	f000 fc4a 	bl	800818c <__multadd>
 80078f8:	4606      	mov	r6, r0
 80078fa:	e7f0      	b.n	80078de <_dtoa_r+0xb16>
 80078fc:	f1b9 0f00 	cmp.w	r9, #0
 8007900:	bfcc      	ite	gt
 8007902:	464f      	movgt	r7, r9
 8007904:	2701      	movle	r7, #1
 8007906:	f04f 0800 	mov.w	r8, #0
 800790a:	9a03      	ldr	r2, [sp, #12]
 800790c:	4417      	add	r7, r2
 800790e:	4659      	mov	r1, fp
 8007910:	2201      	movs	r2, #1
 8007912:	4628      	mov	r0, r5
 8007914:	9308      	str	r3, [sp, #32]
 8007916:	f000 fe2f 	bl	8008578 <__lshift>
 800791a:	4621      	mov	r1, r4
 800791c:	4683      	mov	fp, r0
 800791e:	f000 fe9b 	bl	8008658 <__mcmp>
 8007922:	2800      	cmp	r0, #0
 8007924:	dcb2      	bgt.n	800788c <_dtoa_r+0xac4>
 8007926:	d102      	bne.n	800792e <_dtoa_r+0xb66>
 8007928:	9b08      	ldr	r3, [sp, #32]
 800792a:	07db      	lsls	r3, r3, #31
 800792c:	d4ae      	bmi.n	800788c <_dtoa_r+0xac4>
 800792e:	463b      	mov	r3, r7
 8007930:	461f      	mov	r7, r3
 8007932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007936:	2a30      	cmp	r2, #48	; 0x30
 8007938:	d0fa      	beq.n	8007930 <_dtoa_r+0xb68>
 800793a:	e6f9      	b.n	8007730 <_dtoa_r+0x968>
 800793c:	9a03      	ldr	r2, [sp, #12]
 800793e:	429a      	cmp	r2, r3
 8007940:	d1a5      	bne.n	800788e <_dtoa_r+0xac6>
 8007942:	2331      	movs	r3, #49	; 0x31
 8007944:	f10a 0a01 	add.w	sl, sl, #1
 8007948:	e779      	b.n	800783e <_dtoa_r+0xa76>
 800794a:	4b14      	ldr	r3, [pc, #80]	; (800799c <_dtoa_r+0xbd4>)
 800794c:	f7ff baa8 	b.w	8006ea0 <_dtoa_r+0xd8>
 8007950:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007952:	2b00      	cmp	r3, #0
 8007954:	f47f aa81 	bne.w	8006e5a <_dtoa_r+0x92>
 8007958:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <_dtoa_r+0xbd8>)
 800795a:	f7ff baa1 	b.w	8006ea0 <_dtoa_r+0xd8>
 800795e:	f1b9 0f00 	cmp.w	r9, #0
 8007962:	dc03      	bgt.n	800796c <_dtoa_r+0xba4>
 8007964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007966:	2b02      	cmp	r3, #2
 8007968:	f73f aecb 	bgt.w	8007702 <_dtoa_r+0x93a>
 800796c:	9f03      	ldr	r7, [sp, #12]
 800796e:	4621      	mov	r1, r4
 8007970:	4658      	mov	r0, fp
 8007972:	f7ff f99d 	bl	8006cb0 <quorem>
 8007976:	9a03      	ldr	r2, [sp, #12]
 8007978:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800797c:	f807 3b01 	strb.w	r3, [r7], #1
 8007980:	1aba      	subs	r2, r7, r2
 8007982:	4591      	cmp	r9, r2
 8007984:	ddba      	ble.n	80078fc <_dtoa_r+0xb34>
 8007986:	4659      	mov	r1, fp
 8007988:	2300      	movs	r3, #0
 800798a:	220a      	movs	r2, #10
 800798c:	4628      	mov	r0, r5
 800798e:	f000 fbfd 	bl	800818c <__multadd>
 8007992:	4683      	mov	fp, r0
 8007994:	e7eb      	b.n	800796e <_dtoa_r+0xba6>
 8007996:	bf00      	nop
 8007998:	08009da8 	.word	0x08009da8
 800799c:	08009ba8 	.word	0x08009ba8
 80079a0:	08009d29 	.word	0x08009d29

080079a4 <rshift>:
 80079a4:	6903      	ldr	r3, [r0, #16]
 80079a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80079ae:	f100 0414 	add.w	r4, r0, #20
 80079b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80079b6:	dd46      	ble.n	8007a46 <rshift+0xa2>
 80079b8:	f011 011f 	ands.w	r1, r1, #31
 80079bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80079c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80079c4:	d10c      	bne.n	80079e0 <rshift+0x3c>
 80079c6:	4629      	mov	r1, r5
 80079c8:	f100 0710 	add.w	r7, r0, #16
 80079cc:	42b1      	cmp	r1, r6
 80079ce:	d335      	bcc.n	8007a3c <rshift+0x98>
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	1eea      	subs	r2, r5, #3
 80079d6:	4296      	cmp	r6, r2
 80079d8:	bf38      	it	cc
 80079da:	2300      	movcc	r3, #0
 80079dc:	4423      	add	r3, r4
 80079de:	e015      	b.n	8007a0c <rshift+0x68>
 80079e0:	46a1      	mov	r9, r4
 80079e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80079e6:	f1c1 0820 	rsb	r8, r1, #32
 80079ea:	40cf      	lsrs	r7, r1
 80079ec:	f105 0e04 	add.w	lr, r5, #4
 80079f0:	4576      	cmp	r6, lr
 80079f2:	46f4      	mov	ip, lr
 80079f4:	d816      	bhi.n	8007a24 <rshift+0x80>
 80079f6:	1a9a      	subs	r2, r3, r2
 80079f8:	0092      	lsls	r2, r2, #2
 80079fa:	3a04      	subs	r2, #4
 80079fc:	3501      	adds	r5, #1
 80079fe:	42ae      	cmp	r6, r5
 8007a00:	bf38      	it	cc
 8007a02:	2200      	movcc	r2, #0
 8007a04:	18a3      	adds	r3, r4, r2
 8007a06:	50a7      	str	r7, [r4, r2]
 8007a08:	b107      	cbz	r7, 8007a0c <rshift+0x68>
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	eba3 0204 	sub.w	r2, r3, r4
 8007a12:	bf08      	it	eq
 8007a14:	2300      	moveq	r3, #0
 8007a16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a1a:	6102      	str	r2, [r0, #16]
 8007a1c:	bf08      	it	eq
 8007a1e:	6143      	streq	r3, [r0, #20]
 8007a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a24:	f8dc c000 	ldr.w	ip, [ip]
 8007a28:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a2c:	ea4c 0707 	orr.w	r7, ip, r7
 8007a30:	f849 7b04 	str.w	r7, [r9], #4
 8007a34:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a38:	40cf      	lsrs	r7, r1
 8007a3a:	e7d9      	b.n	80079f0 <rshift+0x4c>
 8007a3c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a40:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a44:	e7c2      	b.n	80079cc <rshift+0x28>
 8007a46:	4623      	mov	r3, r4
 8007a48:	e7e0      	b.n	8007a0c <rshift+0x68>

08007a4a <__hexdig_fun>:
 8007a4a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007a4e:	2b09      	cmp	r3, #9
 8007a50:	d802      	bhi.n	8007a58 <__hexdig_fun+0xe>
 8007a52:	3820      	subs	r0, #32
 8007a54:	b2c0      	uxtb	r0, r0
 8007a56:	4770      	bx	lr
 8007a58:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d801      	bhi.n	8007a64 <__hexdig_fun+0x1a>
 8007a60:	3847      	subs	r0, #71	; 0x47
 8007a62:	e7f7      	b.n	8007a54 <__hexdig_fun+0xa>
 8007a64:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007a68:	2b05      	cmp	r3, #5
 8007a6a:	d801      	bhi.n	8007a70 <__hexdig_fun+0x26>
 8007a6c:	3827      	subs	r0, #39	; 0x27
 8007a6e:	e7f1      	b.n	8007a54 <__hexdig_fun+0xa>
 8007a70:	2000      	movs	r0, #0
 8007a72:	4770      	bx	lr

08007a74 <__gethex>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	b08b      	sub	sp, #44	; 0x2c
 8007a7a:	9305      	str	r3, [sp, #20]
 8007a7c:	4bb2      	ldr	r3, [pc, #712]	; (8007d48 <__gethex+0x2d4>)
 8007a7e:	9002      	str	r0, [sp, #8]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	468b      	mov	fp, r1
 8007a84:	4618      	mov	r0, r3
 8007a86:	4690      	mov	r8, r2
 8007a88:	9303      	str	r3, [sp, #12]
 8007a8a:	f7f8 fbd1 	bl	8000230 <strlen>
 8007a8e:	4682      	mov	sl, r0
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	f8db 2000 	ldr.w	r2, [fp]
 8007a96:	4403      	add	r3, r0
 8007a98:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a9c:	9306      	str	r3, [sp, #24]
 8007a9e:	1c93      	adds	r3, r2, #2
 8007aa0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007aa4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007aa8:	32fe      	adds	r2, #254	; 0xfe
 8007aaa:	18d1      	adds	r1, r2, r3
 8007aac:	461f      	mov	r7, r3
 8007aae:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ab2:	9101      	str	r1, [sp, #4]
 8007ab4:	2830      	cmp	r0, #48	; 0x30
 8007ab6:	d0f8      	beq.n	8007aaa <__gethex+0x36>
 8007ab8:	f7ff ffc7 	bl	8007a4a <__hexdig_fun>
 8007abc:	4604      	mov	r4, r0
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d13a      	bne.n	8007b38 <__gethex+0xc4>
 8007ac2:	4652      	mov	r2, sl
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	9903      	ldr	r1, [sp, #12]
 8007ac8:	f001 fa18 	bl	8008efc <strncmp>
 8007acc:	4605      	mov	r5, r0
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d166      	bne.n	8007ba0 <__gethex+0x12c>
 8007ad2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007ad6:	eb07 060a 	add.w	r6, r7, sl
 8007ada:	f7ff ffb6 	bl	8007a4a <__hexdig_fun>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d060      	beq.n	8007ba4 <__gethex+0x130>
 8007ae2:	4633      	mov	r3, r6
 8007ae4:	7818      	ldrb	r0, [r3, #0]
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	2830      	cmp	r0, #48	; 0x30
 8007aea:	f103 0301 	add.w	r3, r3, #1
 8007aee:	d0f9      	beq.n	8007ae4 <__gethex+0x70>
 8007af0:	f7ff ffab 	bl	8007a4a <__hexdig_fun>
 8007af4:	2301      	movs	r3, #1
 8007af6:	fab0 f480 	clz	r4, r0
 8007afa:	4635      	mov	r5, r6
 8007afc:	0964      	lsrs	r4, r4, #5
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	463a      	mov	r2, r7
 8007b02:	4616      	mov	r6, r2
 8007b04:	7830      	ldrb	r0, [r6, #0]
 8007b06:	3201      	adds	r2, #1
 8007b08:	f7ff ff9f 	bl	8007a4a <__hexdig_fun>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d1f8      	bne.n	8007b02 <__gethex+0x8e>
 8007b10:	4652      	mov	r2, sl
 8007b12:	4630      	mov	r0, r6
 8007b14:	9903      	ldr	r1, [sp, #12]
 8007b16:	f001 f9f1 	bl	8008efc <strncmp>
 8007b1a:	b980      	cbnz	r0, 8007b3e <__gethex+0xca>
 8007b1c:	b94d      	cbnz	r5, 8007b32 <__gethex+0xbe>
 8007b1e:	eb06 050a 	add.w	r5, r6, sl
 8007b22:	462a      	mov	r2, r5
 8007b24:	4616      	mov	r6, r2
 8007b26:	7830      	ldrb	r0, [r6, #0]
 8007b28:	3201      	adds	r2, #1
 8007b2a:	f7ff ff8e 	bl	8007a4a <__hexdig_fun>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d1f8      	bne.n	8007b24 <__gethex+0xb0>
 8007b32:	1bad      	subs	r5, r5, r6
 8007b34:	00ad      	lsls	r5, r5, #2
 8007b36:	e004      	b.n	8007b42 <__gethex+0xce>
 8007b38:	2400      	movs	r4, #0
 8007b3a:	4625      	mov	r5, r4
 8007b3c:	e7e0      	b.n	8007b00 <__gethex+0x8c>
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	d1f7      	bne.n	8007b32 <__gethex+0xbe>
 8007b42:	7833      	ldrb	r3, [r6, #0]
 8007b44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b48:	2b50      	cmp	r3, #80	; 0x50
 8007b4a:	d139      	bne.n	8007bc0 <__gethex+0x14c>
 8007b4c:	7873      	ldrb	r3, [r6, #1]
 8007b4e:	2b2b      	cmp	r3, #43	; 0x2b
 8007b50:	d02a      	beq.n	8007ba8 <__gethex+0x134>
 8007b52:	2b2d      	cmp	r3, #45	; 0x2d
 8007b54:	d02c      	beq.n	8007bb0 <__gethex+0x13c>
 8007b56:	f04f 0900 	mov.w	r9, #0
 8007b5a:	1c71      	adds	r1, r6, #1
 8007b5c:	7808      	ldrb	r0, [r1, #0]
 8007b5e:	f7ff ff74 	bl	8007a4a <__hexdig_fun>
 8007b62:	1e43      	subs	r3, r0, #1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b18      	cmp	r3, #24
 8007b68:	d82a      	bhi.n	8007bc0 <__gethex+0x14c>
 8007b6a:	f1a0 0210 	sub.w	r2, r0, #16
 8007b6e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b72:	f7ff ff6a 	bl	8007a4a <__hexdig_fun>
 8007b76:	1e43      	subs	r3, r0, #1
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b18      	cmp	r3, #24
 8007b7c:	d91b      	bls.n	8007bb6 <__gethex+0x142>
 8007b7e:	f1b9 0f00 	cmp.w	r9, #0
 8007b82:	d000      	beq.n	8007b86 <__gethex+0x112>
 8007b84:	4252      	negs	r2, r2
 8007b86:	4415      	add	r5, r2
 8007b88:	f8cb 1000 	str.w	r1, [fp]
 8007b8c:	b1d4      	cbz	r4, 8007bc4 <__gethex+0x150>
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf14      	ite	ne
 8007b94:	2700      	movne	r7, #0
 8007b96:	2706      	moveq	r7, #6
 8007b98:	4638      	mov	r0, r7
 8007b9a:	b00b      	add	sp, #44	; 0x2c
 8007b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba0:	463e      	mov	r6, r7
 8007ba2:	4625      	mov	r5, r4
 8007ba4:	2401      	movs	r4, #1
 8007ba6:	e7cc      	b.n	8007b42 <__gethex+0xce>
 8007ba8:	f04f 0900 	mov.w	r9, #0
 8007bac:	1cb1      	adds	r1, r6, #2
 8007bae:	e7d5      	b.n	8007b5c <__gethex+0xe8>
 8007bb0:	f04f 0901 	mov.w	r9, #1
 8007bb4:	e7fa      	b.n	8007bac <__gethex+0x138>
 8007bb6:	230a      	movs	r3, #10
 8007bb8:	fb03 0202 	mla	r2, r3, r2, r0
 8007bbc:	3a10      	subs	r2, #16
 8007bbe:	e7d6      	b.n	8007b6e <__gethex+0xfa>
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	e7e1      	b.n	8007b88 <__gethex+0x114>
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	1bf3      	subs	r3, r6, r7
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	2b07      	cmp	r3, #7
 8007bcc:	dc0a      	bgt.n	8007be4 <__gethex+0x170>
 8007bce:	9802      	ldr	r0, [sp, #8]
 8007bd0:	f000 fa7a 	bl	80080c8 <_Balloc>
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	b940      	cbnz	r0, 8007bea <__gethex+0x176>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	21de      	movs	r1, #222	; 0xde
 8007bdc:	4b5b      	ldr	r3, [pc, #364]	; (8007d4c <__gethex+0x2d8>)
 8007bde:	485c      	ldr	r0, [pc, #368]	; (8007d50 <__gethex+0x2dc>)
 8007be0:	f001 f9ae 	bl	8008f40 <__assert_func>
 8007be4:	3101      	adds	r1, #1
 8007be6:	105b      	asrs	r3, r3, #1
 8007be8:	e7ef      	b.n	8007bca <__gethex+0x156>
 8007bea:	f04f 0b00 	mov.w	fp, #0
 8007bee:	f100 0914 	add.w	r9, r0, #20
 8007bf2:	f1ca 0301 	rsb	r3, sl, #1
 8007bf6:	f8cd 9010 	str.w	r9, [sp, #16]
 8007bfa:	f8cd b004 	str.w	fp, [sp, #4]
 8007bfe:	9308      	str	r3, [sp, #32]
 8007c00:	42b7      	cmp	r7, r6
 8007c02:	d33f      	bcc.n	8007c84 <__gethex+0x210>
 8007c04:	9f04      	ldr	r7, [sp, #16]
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	f847 3b04 	str.w	r3, [r7], #4
 8007c0c:	eba7 0709 	sub.w	r7, r7, r9
 8007c10:	10bf      	asrs	r7, r7, #2
 8007c12:	6127      	str	r7, [r4, #16]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fb49 	bl	80082ac <__hi0bits>
 8007c1a:	017f      	lsls	r7, r7, #5
 8007c1c:	f8d8 6000 	ldr.w	r6, [r8]
 8007c20:	1a3f      	subs	r7, r7, r0
 8007c22:	42b7      	cmp	r7, r6
 8007c24:	dd62      	ble.n	8007cec <__gethex+0x278>
 8007c26:	1bbf      	subs	r7, r7, r6
 8007c28:	4639      	mov	r1, r7
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 fee3 	bl	80089f6 <__any_on>
 8007c30:	4682      	mov	sl, r0
 8007c32:	b1a8      	cbz	r0, 8007c60 <__gethex+0x1ec>
 8007c34:	f04f 0a01 	mov.w	sl, #1
 8007c38:	1e7b      	subs	r3, r7, #1
 8007c3a:	1159      	asrs	r1, r3, #5
 8007c3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007c40:	f003 021f 	and.w	r2, r3, #31
 8007c44:	fa0a f202 	lsl.w	r2, sl, r2
 8007c48:	420a      	tst	r2, r1
 8007c4a:	d009      	beq.n	8007c60 <__gethex+0x1ec>
 8007c4c:	4553      	cmp	r3, sl
 8007c4e:	dd05      	ble.n	8007c5c <__gethex+0x1e8>
 8007c50:	4620      	mov	r0, r4
 8007c52:	1eb9      	subs	r1, r7, #2
 8007c54:	f000 fecf 	bl	80089f6 <__any_on>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d144      	bne.n	8007ce6 <__gethex+0x272>
 8007c5c:	f04f 0a02 	mov.w	sl, #2
 8007c60:	4639      	mov	r1, r7
 8007c62:	4620      	mov	r0, r4
 8007c64:	f7ff fe9e 	bl	80079a4 <rshift>
 8007c68:	443d      	add	r5, r7
 8007c6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c6e:	42ab      	cmp	r3, r5
 8007c70:	da4a      	bge.n	8007d08 <__gethex+0x294>
 8007c72:	4621      	mov	r1, r4
 8007c74:	9802      	ldr	r0, [sp, #8]
 8007c76:	f000 fa67 	bl	8008148 <_Bfree>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c7e:	27a3      	movs	r7, #163	; 0xa3
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	e789      	b.n	8007b98 <__gethex+0x124>
 8007c84:	1e73      	subs	r3, r6, #1
 8007c86:	9a06      	ldr	r2, [sp, #24]
 8007c88:	9307      	str	r3, [sp, #28]
 8007c8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d019      	beq.n	8007cc6 <__gethex+0x252>
 8007c92:	f1bb 0f20 	cmp.w	fp, #32
 8007c96:	d107      	bne.n	8007ca8 <__gethex+0x234>
 8007c98:	9b04      	ldr	r3, [sp, #16]
 8007c9a:	9a01      	ldr	r2, [sp, #4]
 8007c9c:	f843 2b04 	str.w	r2, [r3], #4
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	469b      	mov	fp, r3
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007cac:	f7ff fecd 	bl	8007a4a <__hexdig_fun>
 8007cb0:	9b01      	ldr	r3, [sp, #4]
 8007cb2:	f000 000f 	and.w	r0, r0, #15
 8007cb6:	fa00 f00b 	lsl.w	r0, r0, fp
 8007cba:	4303      	orrs	r3, r0
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	f10b 0b04 	add.w	fp, fp, #4
 8007cc2:	9b07      	ldr	r3, [sp, #28]
 8007cc4:	e00d      	b.n	8007ce2 <__gethex+0x26e>
 8007cc6:	9a08      	ldr	r2, [sp, #32]
 8007cc8:	1e73      	subs	r3, r6, #1
 8007cca:	4413      	add	r3, r2
 8007ccc:	42bb      	cmp	r3, r7
 8007cce:	d3e0      	bcc.n	8007c92 <__gethex+0x21e>
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	4652      	mov	r2, sl
 8007cd4:	9903      	ldr	r1, [sp, #12]
 8007cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd8:	f001 f910 	bl	8008efc <strncmp>
 8007cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d1d7      	bne.n	8007c92 <__gethex+0x21e>
 8007ce2:	461e      	mov	r6, r3
 8007ce4:	e78c      	b.n	8007c00 <__gethex+0x18c>
 8007ce6:	f04f 0a03 	mov.w	sl, #3
 8007cea:	e7b9      	b.n	8007c60 <__gethex+0x1ec>
 8007cec:	da09      	bge.n	8007d02 <__gethex+0x28e>
 8007cee:	1bf7      	subs	r7, r6, r7
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	463a      	mov	r2, r7
 8007cf4:	9802      	ldr	r0, [sp, #8]
 8007cf6:	f000 fc3f 	bl	8008578 <__lshift>
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	1bed      	subs	r5, r5, r7
 8007cfe:	f100 0914 	add.w	r9, r0, #20
 8007d02:	f04f 0a00 	mov.w	sl, #0
 8007d06:	e7b0      	b.n	8007c6a <__gethex+0x1f6>
 8007d08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d0c:	42a8      	cmp	r0, r5
 8007d0e:	dd72      	ble.n	8007df6 <__gethex+0x382>
 8007d10:	1b45      	subs	r5, r0, r5
 8007d12:	42ae      	cmp	r6, r5
 8007d14:	dc35      	bgt.n	8007d82 <__gethex+0x30e>
 8007d16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d029      	beq.n	8007d72 <__gethex+0x2fe>
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d02b      	beq.n	8007d7a <__gethex+0x306>
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d11c      	bne.n	8007d60 <__gethex+0x2ec>
 8007d26:	42ae      	cmp	r6, r5
 8007d28:	d11a      	bne.n	8007d60 <__gethex+0x2ec>
 8007d2a:	2e01      	cmp	r6, #1
 8007d2c:	d112      	bne.n	8007d54 <__gethex+0x2e0>
 8007d2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d32:	9a05      	ldr	r2, [sp, #20]
 8007d34:	2762      	movs	r7, #98	; 0x62
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	2301      	movs	r3, #1
 8007d3a:	6123      	str	r3, [r4, #16]
 8007d3c:	f8c9 3000 	str.w	r3, [r9]
 8007d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d42:	601c      	str	r4, [r3, #0]
 8007d44:	e728      	b.n	8007b98 <__gethex+0x124>
 8007d46:	bf00      	nop
 8007d48:	08009e20 	.word	0x08009e20
 8007d4c:	08009da8 	.word	0x08009da8
 8007d50:	08009db9 	.word	0x08009db9
 8007d54:	4620      	mov	r0, r4
 8007d56:	1e71      	subs	r1, r6, #1
 8007d58:	f000 fe4d 	bl	80089f6 <__any_on>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d1e6      	bne.n	8007d2e <__gethex+0x2ba>
 8007d60:	4621      	mov	r1, r4
 8007d62:	9802      	ldr	r0, [sp, #8]
 8007d64:	f000 f9f0 	bl	8008148 <_Bfree>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d6c:	2750      	movs	r7, #80	; 0x50
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	e712      	b.n	8007b98 <__gethex+0x124>
 8007d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1f3      	bne.n	8007d60 <__gethex+0x2ec>
 8007d78:	e7d9      	b.n	8007d2e <__gethex+0x2ba>
 8007d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1d6      	bne.n	8007d2e <__gethex+0x2ba>
 8007d80:	e7ee      	b.n	8007d60 <__gethex+0x2ec>
 8007d82:	1e6f      	subs	r7, r5, #1
 8007d84:	f1ba 0f00 	cmp.w	sl, #0
 8007d88:	d132      	bne.n	8007df0 <__gethex+0x37c>
 8007d8a:	b127      	cbz	r7, 8007d96 <__gethex+0x322>
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 fe31 	bl	80089f6 <__any_on>
 8007d94:	4682      	mov	sl, r0
 8007d96:	2101      	movs	r1, #1
 8007d98:	117b      	asrs	r3, r7, #5
 8007d9a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007d9e:	f007 071f 	and.w	r7, r7, #31
 8007da2:	fa01 f707 	lsl.w	r7, r1, r7
 8007da6:	421f      	tst	r7, r3
 8007da8:	f04f 0702 	mov.w	r7, #2
 8007dac:	4629      	mov	r1, r5
 8007dae:	4620      	mov	r0, r4
 8007db0:	bf18      	it	ne
 8007db2:	f04a 0a02 	orrne.w	sl, sl, #2
 8007db6:	1b76      	subs	r6, r6, r5
 8007db8:	f7ff fdf4 	bl	80079a4 <rshift>
 8007dbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007dc0:	f1ba 0f00 	cmp.w	sl, #0
 8007dc4:	d048      	beq.n	8007e58 <__gethex+0x3e4>
 8007dc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d015      	beq.n	8007dfa <__gethex+0x386>
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d017      	beq.n	8007e02 <__gethex+0x38e>
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d109      	bne.n	8007dea <__gethex+0x376>
 8007dd6:	f01a 0f02 	tst.w	sl, #2
 8007dda:	d006      	beq.n	8007dea <__gethex+0x376>
 8007ddc:	f8d9 0000 	ldr.w	r0, [r9]
 8007de0:	ea4a 0a00 	orr.w	sl, sl, r0
 8007de4:	f01a 0f01 	tst.w	sl, #1
 8007de8:	d10e      	bne.n	8007e08 <__gethex+0x394>
 8007dea:	f047 0710 	orr.w	r7, r7, #16
 8007dee:	e033      	b.n	8007e58 <__gethex+0x3e4>
 8007df0:	f04f 0a01 	mov.w	sl, #1
 8007df4:	e7cf      	b.n	8007d96 <__gethex+0x322>
 8007df6:	2701      	movs	r7, #1
 8007df8:	e7e2      	b.n	8007dc0 <__gethex+0x34c>
 8007dfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dfc:	f1c3 0301 	rsb	r3, r3, #1
 8007e00:	9315      	str	r3, [sp, #84]	; 0x54
 8007e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0f0      	beq.n	8007dea <__gethex+0x376>
 8007e08:	f04f 0c00 	mov.w	ip, #0
 8007e0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e10:	f104 0314 	add.w	r3, r4, #20
 8007e14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e22:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e26:	d01c      	beq.n	8007e62 <__gethex+0x3ee>
 8007e28:	3201      	adds	r2, #1
 8007e2a:	6002      	str	r2, [r0, #0]
 8007e2c:	2f02      	cmp	r7, #2
 8007e2e:	f104 0314 	add.w	r3, r4, #20
 8007e32:	d13d      	bne.n	8007eb0 <__gethex+0x43c>
 8007e34:	f8d8 2000 	ldr.w	r2, [r8]
 8007e38:	3a01      	subs	r2, #1
 8007e3a:	42b2      	cmp	r2, r6
 8007e3c:	d10a      	bne.n	8007e54 <__gethex+0x3e0>
 8007e3e:	2201      	movs	r2, #1
 8007e40:	1171      	asrs	r1, r6, #5
 8007e42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e46:	f006 061f 	and.w	r6, r6, #31
 8007e4a:	fa02 f606 	lsl.w	r6, r2, r6
 8007e4e:	421e      	tst	r6, r3
 8007e50:	bf18      	it	ne
 8007e52:	4617      	movne	r7, r2
 8007e54:	f047 0720 	orr.w	r7, r7, #32
 8007e58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e5a:	601c      	str	r4, [r3, #0]
 8007e5c:	9b05      	ldr	r3, [sp, #20]
 8007e5e:	601d      	str	r5, [r3, #0]
 8007e60:	e69a      	b.n	8007b98 <__gethex+0x124>
 8007e62:	4299      	cmp	r1, r3
 8007e64:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e68:	d8d8      	bhi.n	8007e1c <__gethex+0x3a8>
 8007e6a:	68a3      	ldr	r3, [r4, #8]
 8007e6c:	459b      	cmp	fp, r3
 8007e6e:	db17      	blt.n	8007ea0 <__gethex+0x42c>
 8007e70:	6861      	ldr	r1, [r4, #4]
 8007e72:	9802      	ldr	r0, [sp, #8]
 8007e74:	3101      	adds	r1, #1
 8007e76:	f000 f927 	bl	80080c8 <_Balloc>
 8007e7a:	4681      	mov	r9, r0
 8007e7c:	b918      	cbnz	r0, 8007e86 <__gethex+0x412>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	2184      	movs	r1, #132	; 0x84
 8007e82:	4b19      	ldr	r3, [pc, #100]	; (8007ee8 <__gethex+0x474>)
 8007e84:	e6ab      	b.n	8007bde <__gethex+0x16a>
 8007e86:	6922      	ldr	r2, [r4, #16]
 8007e88:	f104 010c 	add.w	r1, r4, #12
 8007e8c:	3202      	adds	r2, #2
 8007e8e:	0092      	lsls	r2, r2, #2
 8007e90:	300c      	adds	r0, #12
 8007e92:	f7fd f9d7 	bl	8005244 <memcpy>
 8007e96:	4621      	mov	r1, r4
 8007e98:	9802      	ldr	r0, [sp, #8]
 8007e9a:	f000 f955 	bl	8008148 <_Bfree>
 8007e9e:	464c      	mov	r4, r9
 8007ea0:	6923      	ldr	r3, [r4, #16]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	6122      	str	r2, [r4, #16]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007eac:	615a      	str	r2, [r3, #20]
 8007eae:	e7bd      	b.n	8007e2c <__gethex+0x3b8>
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	455a      	cmp	r2, fp
 8007eb4:	dd0b      	ble.n	8007ece <__gethex+0x45a>
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7ff fd73 	bl	80079a4 <rshift>
 8007ebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ec2:	3501      	adds	r5, #1
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	f6ff aed4 	blt.w	8007c72 <__gethex+0x1fe>
 8007eca:	2701      	movs	r7, #1
 8007ecc:	e7c2      	b.n	8007e54 <__gethex+0x3e0>
 8007ece:	f016 061f 	ands.w	r6, r6, #31
 8007ed2:	d0fa      	beq.n	8007eca <__gethex+0x456>
 8007ed4:	4453      	add	r3, sl
 8007ed6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007eda:	f000 f9e7 	bl	80082ac <__hi0bits>
 8007ede:	f1c6 0620 	rsb	r6, r6, #32
 8007ee2:	42b0      	cmp	r0, r6
 8007ee4:	dbe7      	blt.n	8007eb6 <__gethex+0x442>
 8007ee6:	e7f0      	b.n	8007eca <__gethex+0x456>
 8007ee8:	08009da8 	.word	0x08009da8

08007eec <L_shift>:
 8007eec:	f1c2 0208 	rsb	r2, r2, #8
 8007ef0:	0092      	lsls	r2, r2, #2
 8007ef2:	b570      	push	{r4, r5, r6, lr}
 8007ef4:	f1c2 0620 	rsb	r6, r2, #32
 8007ef8:	6843      	ldr	r3, [r0, #4]
 8007efa:	6804      	ldr	r4, [r0, #0]
 8007efc:	fa03 f506 	lsl.w	r5, r3, r6
 8007f00:	432c      	orrs	r4, r5
 8007f02:	40d3      	lsrs	r3, r2
 8007f04:	6004      	str	r4, [r0, #0]
 8007f06:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f0a:	4288      	cmp	r0, r1
 8007f0c:	d3f4      	bcc.n	8007ef8 <L_shift+0xc>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}

08007f10 <__match>:
 8007f10:	b530      	push	{r4, r5, lr}
 8007f12:	6803      	ldr	r3, [r0, #0]
 8007f14:	3301      	adds	r3, #1
 8007f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f1a:	b914      	cbnz	r4, 8007f22 <__match+0x12>
 8007f1c:	6003      	str	r3, [r0, #0]
 8007f1e:	2001      	movs	r0, #1
 8007f20:	bd30      	pop	{r4, r5, pc}
 8007f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007f2a:	2d19      	cmp	r5, #25
 8007f2c:	bf98      	it	ls
 8007f2e:	3220      	addls	r2, #32
 8007f30:	42a2      	cmp	r2, r4
 8007f32:	d0f0      	beq.n	8007f16 <__match+0x6>
 8007f34:	2000      	movs	r0, #0
 8007f36:	e7f3      	b.n	8007f20 <__match+0x10>

08007f38 <__hexnan>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	680b      	ldr	r3, [r1, #0]
 8007f40:	4682      	mov	sl, r0
 8007f42:	115e      	asrs	r6, r3, #5
 8007f44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f48:	f013 031f 	ands.w	r3, r3, #31
 8007f4c:	bf18      	it	ne
 8007f4e:	3604      	addne	r6, #4
 8007f50:	1f37      	subs	r7, r6, #4
 8007f52:	46b9      	mov	r9, r7
 8007f54:	463c      	mov	r4, r7
 8007f56:	46ab      	mov	fp, r5
 8007f58:	b087      	sub	sp, #28
 8007f5a:	4690      	mov	r8, r2
 8007f5c:	6802      	ldr	r2, [r0, #0]
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f64:	9502      	str	r5, [sp, #8]
 8007f66:	7851      	ldrb	r1, [r2, #1]
 8007f68:	1c53      	adds	r3, r2, #1
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	b341      	cbz	r1, 8007fc0 <__hexnan+0x88>
 8007f6e:	4608      	mov	r0, r1
 8007f70:	9205      	str	r2, [sp, #20]
 8007f72:	9104      	str	r1, [sp, #16]
 8007f74:	f7ff fd69 	bl	8007a4a <__hexdig_fun>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d14f      	bne.n	800801c <__hexnan+0xe4>
 8007f7c:	9904      	ldr	r1, [sp, #16]
 8007f7e:	9a05      	ldr	r2, [sp, #20]
 8007f80:	2920      	cmp	r1, #32
 8007f82:	d818      	bhi.n	8007fb6 <__hexnan+0x7e>
 8007f84:	9b02      	ldr	r3, [sp, #8]
 8007f86:	459b      	cmp	fp, r3
 8007f88:	dd13      	ble.n	8007fb2 <__hexnan+0x7a>
 8007f8a:	454c      	cmp	r4, r9
 8007f8c:	d206      	bcs.n	8007f9c <__hexnan+0x64>
 8007f8e:	2d07      	cmp	r5, #7
 8007f90:	dc04      	bgt.n	8007f9c <__hexnan+0x64>
 8007f92:	462a      	mov	r2, r5
 8007f94:	4649      	mov	r1, r9
 8007f96:	4620      	mov	r0, r4
 8007f98:	f7ff ffa8 	bl	8007eec <L_shift>
 8007f9c:	4544      	cmp	r4, r8
 8007f9e:	d950      	bls.n	8008042 <__hexnan+0x10a>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f1a4 0904 	sub.w	r9, r4, #4
 8007fa6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007faa:	461d      	mov	r5, r3
 8007fac:	464c      	mov	r4, r9
 8007fae:	f8cd b008 	str.w	fp, [sp, #8]
 8007fb2:	9a03      	ldr	r2, [sp, #12]
 8007fb4:	e7d7      	b.n	8007f66 <__hexnan+0x2e>
 8007fb6:	2929      	cmp	r1, #41	; 0x29
 8007fb8:	d156      	bne.n	8008068 <__hexnan+0x130>
 8007fba:	3202      	adds	r2, #2
 8007fbc:	f8ca 2000 	str.w	r2, [sl]
 8007fc0:	f1bb 0f00 	cmp.w	fp, #0
 8007fc4:	d050      	beq.n	8008068 <__hexnan+0x130>
 8007fc6:	454c      	cmp	r4, r9
 8007fc8:	d206      	bcs.n	8007fd8 <__hexnan+0xa0>
 8007fca:	2d07      	cmp	r5, #7
 8007fcc:	dc04      	bgt.n	8007fd8 <__hexnan+0xa0>
 8007fce:	462a      	mov	r2, r5
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f7ff ff8a 	bl	8007eec <L_shift>
 8007fd8:	4544      	cmp	r4, r8
 8007fda:	d934      	bls.n	8008046 <__hexnan+0x10e>
 8007fdc:	4623      	mov	r3, r4
 8007fde:	f1a8 0204 	sub.w	r2, r8, #4
 8007fe2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007fe6:	429f      	cmp	r7, r3
 8007fe8:	f842 1f04 	str.w	r1, [r2, #4]!
 8007fec:	d2f9      	bcs.n	8007fe2 <__hexnan+0xaa>
 8007fee:	1b3b      	subs	r3, r7, r4
 8007ff0:	f023 0303 	bic.w	r3, r3, #3
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	3401      	adds	r4, #1
 8007ff8:	3e03      	subs	r6, #3
 8007ffa:	42b4      	cmp	r4, r6
 8007ffc:	bf88      	it	hi
 8007ffe:	2304      	movhi	r3, #4
 8008000:	2200      	movs	r2, #0
 8008002:	4443      	add	r3, r8
 8008004:	f843 2b04 	str.w	r2, [r3], #4
 8008008:	429f      	cmp	r7, r3
 800800a:	d2fb      	bcs.n	8008004 <__hexnan+0xcc>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	b91b      	cbnz	r3, 8008018 <__hexnan+0xe0>
 8008010:	4547      	cmp	r7, r8
 8008012:	d127      	bne.n	8008064 <__hexnan+0x12c>
 8008014:	2301      	movs	r3, #1
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	2005      	movs	r0, #5
 800801a:	e026      	b.n	800806a <__hexnan+0x132>
 800801c:	3501      	adds	r5, #1
 800801e:	2d08      	cmp	r5, #8
 8008020:	f10b 0b01 	add.w	fp, fp, #1
 8008024:	dd06      	ble.n	8008034 <__hexnan+0xfc>
 8008026:	4544      	cmp	r4, r8
 8008028:	d9c3      	bls.n	8007fb2 <__hexnan+0x7a>
 800802a:	2300      	movs	r3, #0
 800802c:	2501      	movs	r5, #1
 800802e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008032:	3c04      	subs	r4, #4
 8008034:	6822      	ldr	r2, [r4, #0]
 8008036:	f000 000f 	and.w	r0, r0, #15
 800803a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800803e:	6022      	str	r2, [r4, #0]
 8008040:	e7b7      	b.n	8007fb2 <__hexnan+0x7a>
 8008042:	2508      	movs	r5, #8
 8008044:	e7b5      	b.n	8007fb2 <__hexnan+0x7a>
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0df      	beq.n	800800c <__hexnan+0xd4>
 800804c:	f04f 32ff 	mov.w	r2, #4294967295
 8008050:	f1c3 0320 	rsb	r3, r3, #32
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
 8008058:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800805c:	401a      	ands	r2, r3
 800805e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008062:	e7d3      	b.n	800800c <__hexnan+0xd4>
 8008064:	3f04      	subs	r7, #4
 8008066:	e7d1      	b.n	800800c <__hexnan+0xd4>
 8008068:	2004      	movs	r0, #4
 800806a:	b007      	add	sp, #28
 800806c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008070 <_localeconv_r>:
 8008070:	4800      	ldr	r0, [pc, #0]	; (8008074 <_localeconv_r+0x4>)
 8008072:	4770      	bx	lr
 8008074:	20000168 	.word	0x20000168

08008078 <malloc>:
 8008078:	4b02      	ldr	r3, [pc, #8]	; (8008084 <malloc+0xc>)
 800807a:	4601      	mov	r1, r0
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	f000 bd57 	b.w	8008b30 <_malloc_r>
 8008082:	bf00      	nop
 8008084:	20000010 	.word	0x20000010

08008088 <__ascii_mbtowc>:
 8008088:	b082      	sub	sp, #8
 800808a:	b901      	cbnz	r1, 800808e <__ascii_mbtowc+0x6>
 800808c:	a901      	add	r1, sp, #4
 800808e:	b142      	cbz	r2, 80080a2 <__ascii_mbtowc+0x1a>
 8008090:	b14b      	cbz	r3, 80080a6 <__ascii_mbtowc+0x1e>
 8008092:	7813      	ldrb	r3, [r2, #0]
 8008094:	600b      	str	r3, [r1, #0]
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	1e10      	subs	r0, r2, #0
 800809a:	bf18      	it	ne
 800809c:	2001      	movne	r0, #1
 800809e:	b002      	add	sp, #8
 80080a0:	4770      	bx	lr
 80080a2:	4610      	mov	r0, r2
 80080a4:	e7fb      	b.n	800809e <__ascii_mbtowc+0x16>
 80080a6:	f06f 0001 	mvn.w	r0, #1
 80080aa:	e7f8      	b.n	800809e <__ascii_mbtowc+0x16>

080080ac <memchr>:
 80080ac:	4603      	mov	r3, r0
 80080ae:	b510      	push	{r4, lr}
 80080b0:	b2c9      	uxtb	r1, r1
 80080b2:	4402      	add	r2, r0
 80080b4:	4293      	cmp	r3, r2
 80080b6:	4618      	mov	r0, r3
 80080b8:	d101      	bne.n	80080be <memchr+0x12>
 80080ba:	2000      	movs	r0, #0
 80080bc:	e003      	b.n	80080c6 <memchr+0x1a>
 80080be:	7804      	ldrb	r4, [r0, #0]
 80080c0:	3301      	adds	r3, #1
 80080c2:	428c      	cmp	r4, r1
 80080c4:	d1f6      	bne.n	80080b4 <memchr+0x8>
 80080c6:	bd10      	pop	{r4, pc}

080080c8 <_Balloc>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080cc:	4604      	mov	r4, r0
 80080ce:	460d      	mov	r5, r1
 80080d0:	b976      	cbnz	r6, 80080f0 <_Balloc+0x28>
 80080d2:	2010      	movs	r0, #16
 80080d4:	f7ff ffd0 	bl	8008078 <malloc>
 80080d8:	4602      	mov	r2, r0
 80080da:	6260      	str	r0, [r4, #36]	; 0x24
 80080dc:	b920      	cbnz	r0, 80080e8 <_Balloc+0x20>
 80080de:	2166      	movs	r1, #102	; 0x66
 80080e0:	4b17      	ldr	r3, [pc, #92]	; (8008140 <_Balloc+0x78>)
 80080e2:	4818      	ldr	r0, [pc, #96]	; (8008144 <_Balloc+0x7c>)
 80080e4:	f000 ff2c 	bl	8008f40 <__assert_func>
 80080e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080ec:	6006      	str	r6, [r0, #0]
 80080ee:	60c6      	str	r6, [r0, #12]
 80080f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080f2:	68f3      	ldr	r3, [r6, #12]
 80080f4:	b183      	cbz	r3, 8008118 <_Balloc+0x50>
 80080f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080fe:	b9b8      	cbnz	r0, 8008130 <_Balloc+0x68>
 8008100:	2101      	movs	r1, #1
 8008102:	fa01 f605 	lsl.w	r6, r1, r5
 8008106:	1d72      	adds	r2, r6, #5
 8008108:	4620      	mov	r0, r4
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	f000 fc94 	bl	8008a38 <_calloc_r>
 8008110:	b160      	cbz	r0, 800812c <_Balloc+0x64>
 8008112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008116:	e00e      	b.n	8008136 <_Balloc+0x6e>
 8008118:	2221      	movs	r2, #33	; 0x21
 800811a:	2104      	movs	r1, #4
 800811c:	4620      	mov	r0, r4
 800811e:	f000 fc8b 	bl	8008a38 <_calloc_r>
 8008122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008124:	60f0      	str	r0, [r6, #12]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e4      	bne.n	80080f6 <_Balloc+0x2e>
 800812c:	2000      	movs	r0, #0
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	6802      	ldr	r2, [r0, #0]
 8008132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008136:	2300      	movs	r3, #0
 8008138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800813c:	e7f7      	b.n	800812e <_Balloc+0x66>
 800813e:	bf00      	nop
 8008140:	08009d36 	.word	0x08009d36
 8008144:	08009e34 	.word	0x08009e34

08008148 <_Bfree>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800814c:	4605      	mov	r5, r0
 800814e:	460c      	mov	r4, r1
 8008150:	b976      	cbnz	r6, 8008170 <_Bfree+0x28>
 8008152:	2010      	movs	r0, #16
 8008154:	f7ff ff90 	bl	8008078 <malloc>
 8008158:	4602      	mov	r2, r0
 800815a:	6268      	str	r0, [r5, #36]	; 0x24
 800815c:	b920      	cbnz	r0, 8008168 <_Bfree+0x20>
 800815e:	218a      	movs	r1, #138	; 0x8a
 8008160:	4b08      	ldr	r3, [pc, #32]	; (8008184 <_Bfree+0x3c>)
 8008162:	4809      	ldr	r0, [pc, #36]	; (8008188 <_Bfree+0x40>)
 8008164:	f000 feec 	bl	8008f40 <__assert_func>
 8008168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800816c:	6006      	str	r6, [r0, #0]
 800816e:	60c6      	str	r6, [r0, #12]
 8008170:	b13c      	cbz	r4, 8008182 <_Bfree+0x3a>
 8008172:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008174:	6862      	ldr	r2, [r4, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800817c:	6021      	str	r1, [r4, #0]
 800817e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008182:	bd70      	pop	{r4, r5, r6, pc}
 8008184:	08009d36 	.word	0x08009d36
 8008188:	08009e34 	.word	0x08009e34

0800818c <__multadd>:
 800818c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008190:	4607      	mov	r7, r0
 8008192:	460c      	mov	r4, r1
 8008194:	461e      	mov	r6, r3
 8008196:	2000      	movs	r0, #0
 8008198:	690d      	ldr	r5, [r1, #16]
 800819a:	f101 0c14 	add.w	ip, r1, #20
 800819e:	f8dc 3000 	ldr.w	r3, [ip]
 80081a2:	3001      	adds	r0, #1
 80081a4:	b299      	uxth	r1, r3
 80081a6:	fb02 6101 	mla	r1, r2, r1, r6
 80081aa:	0c1e      	lsrs	r6, r3, #16
 80081ac:	0c0b      	lsrs	r3, r1, #16
 80081ae:	fb02 3306 	mla	r3, r2, r6, r3
 80081b2:	b289      	uxth	r1, r1
 80081b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081b8:	4285      	cmp	r5, r0
 80081ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081be:	f84c 1b04 	str.w	r1, [ip], #4
 80081c2:	dcec      	bgt.n	800819e <__multadd+0x12>
 80081c4:	b30e      	cbz	r6, 800820a <__multadd+0x7e>
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	42ab      	cmp	r3, r5
 80081ca:	dc19      	bgt.n	8008200 <__multadd+0x74>
 80081cc:	6861      	ldr	r1, [r4, #4]
 80081ce:	4638      	mov	r0, r7
 80081d0:	3101      	adds	r1, #1
 80081d2:	f7ff ff79 	bl	80080c8 <_Balloc>
 80081d6:	4680      	mov	r8, r0
 80081d8:	b928      	cbnz	r0, 80081e6 <__multadd+0x5a>
 80081da:	4602      	mov	r2, r0
 80081dc:	21b5      	movs	r1, #181	; 0xb5
 80081de:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <__multadd+0x84>)
 80081e0:	480c      	ldr	r0, [pc, #48]	; (8008214 <__multadd+0x88>)
 80081e2:	f000 fead 	bl	8008f40 <__assert_func>
 80081e6:	6922      	ldr	r2, [r4, #16]
 80081e8:	f104 010c 	add.w	r1, r4, #12
 80081ec:	3202      	adds	r2, #2
 80081ee:	0092      	lsls	r2, r2, #2
 80081f0:	300c      	adds	r0, #12
 80081f2:	f7fd f827 	bl	8005244 <memcpy>
 80081f6:	4621      	mov	r1, r4
 80081f8:	4638      	mov	r0, r7
 80081fa:	f7ff ffa5 	bl	8008148 <_Bfree>
 80081fe:	4644      	mov	r4, r8
 8008200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008204:	3501      	adds	r5, #1
 8008206:	615e      	str	r6, [r3, #20]
 8008208:	6125      	str	r5, [r4, #16]
 800820a:	4620      	mov	r0, r4
 800820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008210:	08009da8 	.word	0x08009da8
 8008214:	08009e34 	.word	0x08009e34

08008218 <__s2b>:
 8008218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800821c:	4615      	mov	r5, r2
 800821e:	2209      	movs	r2, #9
 8008220:	461f      	mov	r7, r3
 8008222:	3308      	adds	r3, #8
 8008224:	460c      	mov	r4, r1
 8008226:	fb93 f3f2 	sdiv	r3, r3, r2
 800822a:	4606      	mov	r6, r0
 800822c:	2201      	movs	r2, #1
 800822e:	2100      	movs	r1, #0
 8008230:	429a      	cmp	r2, r3
 8008232:	db09      	blt.n	8008248 <__s2b+0x30>
 8008234:	4630      	mov	r0, r6
 8008236:	f7ff ff47 	bl	80080c8 <_Balloc>
 800823a:	b940      	cbnz	r0, 800824e <__s2b+0x36>
 800823c:	4602      	mov	r2, r0
 800823e:	21ce      	movs	r1, #206	; 0xce
 8008240:	4b18      	ldr	r3, [pc, #96]	; (80082a4 <__s2b+0x8c>)
 8008242:	4819      	ldr	r0, [pc, #100]	; (80082a8 <__s2b+0x90>)
 8008244:	f000 fe7c 	bl	8008f40 <__assert_func>
 8008248:	0052      	lsls	r2, r2, #1
 800824a:	3101      	adds	r1, #1
 800824c:	e7f0      	b.n	8008230 <__s2b+0x18>
 800824e:	9b08      	ldr	r3, [sp, #32]
 8008250:	2d09      	cmp	r5, #9
 8008252:	6143      	str	r3, [r0, #20]
 8008254:	f04f 0301 	mov.w	r3, #1
 8008258:	6103      	str	r3, [r0, #16]
 800825a:	dd16      	ble.n	800828a <__s2b+0x72>
 800825c:	f104 0909 	add.w	r9, r4, #9
 8008260:	46c8      	mov	r8, r9
 8008262:	442c      	add	r4, r5
 8008264:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008268:	4601      	mov	r1, r0
 800826a:	220a      	movs	r2, #10
 800826c:	4630      	mov	r0, r6
 800826e:	3b30      	subs	r3, #48	; 0x30
 8008270:	f7ff ff8c 	bl	800818c <__multadd>
 8008274:	45a0      	cmp	r8, r4
 8008276:	d1f5      	bne.n	8008264 <__s2b+0x4c>
 8008278:	f1a5 0408 	sub.w	r4, r5, #8
 800827c:	444c      	add	r4, r9
 800827e:	1b2d      	subs	r5, r5, r4
 8008280:	1963      	adds	r3, r4, r5
 8008282:	42bb      	cmp	r3, r7
 8008284:	db04      	blt.n	8008290 <__s2b+0x78>
 8008286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828a:	2509      	movs	r5, #9
 800828c:	340a      	adds	r4, #10
 800828e:	e7f6      	b.n	800827e <__s2b+0x66>
 8008290:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008294:	4601      	mov	r1, r0
 8008296:	220a      	movs	r2, #10
 8008298:	4630      	mov	r0, r6
 800829a:	3b30      	subs	r3, #48	; 0x30
 800829c:	f7ff ff76 	bl	800818c <__multadd>
 80082a0:	e7ee      	b.n	8008280 <__s2b+0x68>
 80082a2:	bf00      	nop
 80082a4:	08009da8 	.word	0x08009da8
 80082a8:	08009e34 	.word	0x08009e34

080082ac <__hi0bits>:
 80082ac:	0c02      	lsrs	r2, r0, #16
 80082ae:	0412      	lsls	r2, r2, #16
 80082b0:	4603      	mov	r3, r0
 80082b2:	b9ca      	cbnz	r2, 80082e8 <__hi0bits+0x3c>
 80082b4:	0403      	lsls	r3, r0, #16
 80082b6:	2010      	movs	r0, #16
 80082b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80082bc:	bf04      	itt	eq
 80082be:	021b      	lsleq	r3, r3, #8
 80082c0:	3008      	addeq	r0, #8
 80082c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80082c6:	bf04      	itt	eq
 80082c8:	011b      	lsleq	r3, r3, #4
 80082ca:	3004      	addeq	r0, #4
 80082cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80082d0:	bf04      	itt	eq
 80082d2:	009b      	lsleq	r3, r3, #2
 80082d4:	3002      	addeq	r0, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	db05      	blt.n	80082e6 <__hi0bits+0x3a>
 80082da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80082de:	f100 0001 	add.w	r0, r0, #1
 80082e2:	bf08      	it	eq
 80082e4:	2020      	moveq	r0, #32
 80082e6:	4770      	bx	lr
 80082e8:	2000      	movs	r0, #0
 80082ea:	e7e5      	b.n	80082b8 <__hi0bits+0xc>

080082ec <__lo0bits>:
 80082ec:	6803      	ldr	r3, [r0, #0]
 80082ee:	4602      	mov	r2, r0
 80082f0:	f013 0007 	ands.w	r0, r3, #7
 80082f4:	d00b      	beq.n	800830e <__lo0bits+0x22>
 80082f6:	07d9      	lsls	r1, r3, #31
 80082f8:	d421      	bmi.n	800833e <__lo0bits+0x52>
 80082fa:	0798      	lsls	r0, r3, #30
 80082fc:	bf49      	itett	mi
 80082fe:	085b      	lsrmi	r3, r3, #1
 8008300:	089b      	lsrpl	r3, r3, #2
 8008302:	2001      	movmi	r0, #1
 8008304:	6013      	strmi	r3, [r2, #0]
 8008306:	bf5c      	itt	pl
 8008308:	2002      	movpl	r0, #2
 800830a:	6013      	strpl	r3, [r2, #0]
 800830c:	4770      	bx	lr
 800830e:	b299      	uxth	r1, r3
 8008310:	b909      	cbnz	r1, 8008316 <__lo0bits+0x2a>
 8008312:	2010      	movs	r0, #16
 8008314:	0c1b      	lsrs	r3, r3, #16
 8008316:	b2d9      	uxtb	r1, r3
 8008318:	b909      	cbnz	r1, 800831e <__lo0bits+0x32>
 800831a:	3008      	adds	r0, #8
 800831c:	0a1b      	lsrs	r3, r3, #8
 800831e:	0719      	lsls	r1, r3, #28
 8008320:	bf04      	itt	eq
 8008322:	091b      	lsreq	r3, r3, #4
 8008324:	3004      	addeq	r0, #4
 8008326:	0799      	lsls	r1, r3, #30
 8008328:	bf04      	itt	eq
 800832a:	089b      	lsreq	r3, r3, #2
 800832c:	3002      	addeq	r0, #2
 800832e:	07d9      	lsls	r1, r3, #31
 8008330:	d403      	bmi.n	800833a <__lo0bits+0x4e>
 8008332:	085b      	lsrs	r3, r3, #1
 8008334:	f100 0001 	add.w	r0, r0, #1
 8008338:	d003      	beq.n	8008342 <__lo0bits+0x56>
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	4770      	bx	lr
 800833e:	2000      	movs	r0, #0
 8008340:	4770      	bx	lr
 8008342:	2020      	movs	r0, #32
 8008344:	4770      	bx	lr
	...

08008348 <__i2b>:
 8008348:	b510      	push	{r4, lr}
 800834a:	460c      	mov	r4, r1
 800834c:	2101      	movs	r1, #1
 800834e:	f7ff febb 	bl	80080c8 <_Balloc>
 8008352:	4602      	mov	r2, r0
 8008354:	b928      	cbnz	r0, 8008362 <__i2b+0x1a>
 8008356:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800835a:	4b04      	ldr	r3, [pc, #16]	; (800836c <__i2b+0x24>)
 800835c:	4804      	ldr	r0, [pc, #16]	; (8008370 <__i2b+0x28>)
 800835e:	f000 fdef 	bl	8008f40 <__assert_func>
 8008362:	2301      	movs	r3, #1
 8008364:	6144      	str	r4, [r0, #20]
 8008366:	6103      	str	r3, [r0, #16]
 8008368:	bd10      	pop	{r4, pc}
 800836a:	bf00      	nop
 800836c:	08009da8 	.word	0x08009da8
 8008370:	08009e34 	.word	0x08009e34

08008374 <__multiply>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	4691      	mov	r9, r2
 800837a:	690a      	ldr	r2, [r1, #16]
 800837c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008380:	460c      	mov	r4, r1
 8008382:	429a      	cmp	r2, r3
 8008384:	bfbe      	ittt	lt
 8008386:	460b      	movlt	r3, r1
 8008388:	464c      	movlt	r4, r9
 800838a:	4699      	movlt	r9, r3
 800838c:	6927      	ldr	r7, [r4, #16]
 800838e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	6861      	ldr	r1, [r4, #4]
 8008396:	eb07 060a 	add.w	r6, r7, sl
 800839a:	42b3      	cmp	r3, r6
 800839c:	b085      	sub	sp, #20
 800839e:	bfb8      	it	lt
 80083a0:	3101      	addlt	r1, #1
 80083a2:	f7ff fe91 	bl	80080c8 <_Balloc>
 80083a6:	b930      	cbnz	r0, 80083b6 <__multiply+0x42>
 80083a8:	4602      	mov	r2, r0
 80083aa:	f240 115d 	movw	r1, #349	; 0x15d
 80083ae:	4b43      	ldr	r3, [pc, #268]	; (80084bc <__multiply+0x148>)
 80083b0:	4843      	ldr	r0, [pc, #268]	; (80084c0 <__multiply+0x14c>)
 80083b2:	f000 fdc5 	bl	8008f40 <__assert_func>
 80083b6:	f100 0514 	add.w	r5, r0, #20
 80083ba:	462b      	mov	r3, r5
 80083bc:	2200      	movs	r2, #0
 80083be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083c2:	4543      	cmp	r3, r8
 80083c4:	d321      	bcc.n	800840a <__multiply+0x96>
 80083c6:	f104 0314 	add.w	r3, r4, #20
 80083ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083ce:	f109 0314 	add.w	r3, r9, #20
 80083d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083d6:	9202      	str	r2, [sp, #8]
 80083d8:	1b3a      	subs	r2, r7, r4
 80083da:	3a15      	subs	r2, #21
 80083dc:	f022 0203 	bic.w	r2, r2, #3
 80083e0:	3204      	adds	r2, #4
 80083e2:	f104 0115 	add.w	r1, r4, #21
 80083e6:	428f      	cmp	r7, r1
 80083e8:	bf38      	it	cc
 80083ea:	2204      	movcc	r2, #4
 80083ec:	9201      	str	r2, [sp, #4]
 80083ee:	9a02      	ldr	r2, [sp, #8]
 80083f0:	9303      	str	r3, [sp, #12]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d80c      	bhi.n	8008410 <__multiply+0x9c>
 80083f6:	2e00      	cmp	r6, #0
 80083f8:	dd03      	ble.n	8008402 <__multiply+0x8e>
 80083fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d059      	beq.n	80084b6 <__multiply+0x142>
 8008402:	6106      	str	r6, [r0, #16]
 8008404:	b005      	add	sp, #20
 8008406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840a:	f843 2b04 	str.w	r2, [r3], #4
 800840e:	e7d8      	b.n	80083c2 <__multiply+0x4e>
 8008410:	f8b3 a000 	ldrh.w	sl, [r3]
 8008414:	f1ba 0f00 	cmp.w	sl, #0
 8008418:	d023      	beq.n	8008462 <__multiply+0xee>
 800841a:	46a9      	mov	r9, r5
 800841c:	f04f 0c00 	mov.w	ip, #0
 8008420:	f104 0e14 	add.w	lr, r4, #20
 8008424:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008428:	f8d9 1000 	ldr.w	r1, [r9]
 800842c:	fa1f fb82 	uxth.w	fp, r2
 8008430:	b289      	uxth	r1, r1
 8008432:	fb0a 110b 	mla	r1, sl, fp, r1
 8008436:	4461      	add	r1, ip
 8008438:	f8d9 c000 	ldr.w	ip, [r9]
 800843c:	0c12      	lsrs	r2, r2, #16
 800843e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008442:	fb0a c202 	mla	r2, sl, r2, ip
 8008446:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800844a:	b289      	uxth	r1, r1
 800844c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008450:	4577      	cmp	r7, lr
 8008452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008456:	f849 1b04 	str.w	r1, [r9], #4
 800845a:	d8e3      	bhi.n	8008424 <__multiply+0xb0>
 800845c:	9a01      	ldr	r2, [sp, #4]
 800845e:	f845 c002 	str.w	ip, [r5, r2]
 8008462:	9a03      	ldr	r2, [sp, #12]
 8008464:	3304      	adds	r3, #4
 8008466:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800846a:	f1b9 0f00 	cmp.w	r9, #0
 800846e:	d020      	beq.n	80084b2 <__multiply+0x13e>
 8008470:	46ae      	mov	lr, r5
 8008472:	f04f 0a00 	mov.w	sl, #0
 8008476:	6829      	ldr	r1, [r5, #0]
 8008478:	f104 0c14 	add.w	ip, r4, #20
 800847c:	f8bc b000 	ldrh.w	fp, [ip]
 8008480:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008484:	b289      	uxth	r1, r1
 8008486:	fb09 220b 	mla	r2, r9, fp, r2
 800848a:	4492      	add	sl, r2
 800848c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008490:	f84e 1b04 	str.w	r1, [lr], #4
 8008494:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008498:	f8be 1000 	ldrh.w	r1, [lr]
 800849c:	0c12      	lsrs	r2, r2, #16
 800849e:	fb09 1102 	mla	r1, r9, r2, r1
 80084a2:	4567      	cmp	r7, ip
 80084a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80084a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084ac:	d8e6      	bhi.n	800847c <__multiply+0x108>
 80084ae:	9a01      	ldr	r2, [sp, #4]
 80084b0:	50a9      	str	r1, [r5, r2]
 80084b2:	3504      	adds	r5, #4
 80084b4:	e79b      	b.n	80083ee <__multiply+0x7a>
 80084b6:	3e01      	subs	r6, #1
 80084b8:	e79d      	b.n	80083f6 <__multiply+0x82>
 80084ba:	bf00      	nop
 80084bc:	08009da8 	.word	0x08009da8
 80084c0:	08009e34 	.word	0x08009e34

080084c4 <__pow5mult>:
 80084c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c8:	4615      	mov	r5, r2
 80084ca:	f012 0203 	ands.w	r2, r2, #3
 80084ce:	4606      	mov	r6, r0
 80084d0:	460f      	mov	r7, r1
 80084d2:	d007      	beq.n	80084e4 <__pow5mult+0x20>
 80084d4:	4c25      	ldr	r4, [pc, #148]	; (800856c <__pow5mult+0xa8>)
 80084d6:	3a01      	subs	r2, #1
 80084d8:	2300      	movs	r3, #0
 80084da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084de:	f7ff fe55 	bl	800818c <__multadd>
 80084e2:	4607      	mov	r7, r0
 80084e4:	10ad      	asrs	r5, r5, #2
 80084e6:	d03d      	beq.n	8008564 <__pow5mult+0xa0>
 80084e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084ea:	b97c      	cbnz	r4, 800850c <__pow5mult+0x48>
 80084ec:	2010      	movs	r0, #16
 80084ee:	f7ff fdc3 	bl	8008078 <malloc>
 80084f2:	4602      	mov	r2, r0
 80084f4:	6270      	str	r0, [r6, #36]	; 0x24
 80084f6:	b928      	cbnz	r0, 8008504 <__pow5mult+0x40>
 80084f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084fc:	4b1c      	ldr	r3, [pc, #112]	; (8008570 <__pow5mult+0xac>)
 80084fe:	481d      	ldr	r0, [pc, #116]	; (8008574 <__pow5mult+0xb0>)
 8008500:	f000 fd1e 	bl	8008f40 <__assert_func>
 8008504:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008508:	6004      	str	r4, [r0, #0]
 800850a:	60c4      	str	r4, [r0, #12]
 800850c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008510:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008514:	b94c      	cbnz	r4, 800852a <__pow5mult+0x66>
 8008516:	f240 2171 	movw	r1, #625	; 0x271
 800851a:	4630      	mov	r0, r6
 800851c:	f7ff ff14 	bl	8008348 <__i2b>
 8008520:	2300      	movs	r3, #0
 8008522:	4604      	mov	r4, r0
 8008524:	f8c8 0008 	str.w	r0, [r8, #8]
 8008528:	6003      	str	r3, [r0, #0]
 800852a:	f04f 0900 	mov.w	r9, #0
 800852e:	07eb      	lsls	r3, r5, #31
 8008530:	d50a      	bpl.n	8008548 <__pow5mult+0x84>
 8008532:	4639      	mov	r1, r7
 8008534:	4622      	mov	r2, r4
 8008536:	4630      	mov	r0, r6
 8008538:	f7ff ff1c 	bl	8008374 <__multiply>
 800853c:	4680      	mov	r8, r0
 800853e:	4639      	mov	r1, r7
 8008540:	4630      	mov	r0, r6
 8008542:	f7ff fe01 	bl	8008148 <_Bfree>
 8008546:	4647      	mov	r7, r8
 8008548:	106d      	asrs	r5, r5, #1
 800854a:	d00b      	beq.n	8008564 <__pow5mult+0xa0>
 800854c:	6820      	ldr	r0, [r4, #0]
 800854e:	b938      	cbnz	r0, 8008560 <__pow5mult+0x9c>
 8008550:	4622      	mov	r2, r4
 8008552:	4621      	mov	r1, r4
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff ff0d 	bl	8008374 <__multiply>
 800855a:	6020      	str	r0, [r4, #0]
 800855c:	f8c0 9000 	str.w	r9, [r0]
 8008560:	4604      	mov	r4, r0
 8008562:	e7e4      	b.n	800852e <__pow5mult+0x6a>
 8008564:	4638      	mov	r0, r7
 8008566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800856a:	bf00      	nop
 800856c:	08009f80 	.word	0x08009f80
 8008570:	08009d36 	.word	0x08009d36
 8008574:	08009e34 	.word	0x08009e34

08008578 <__lshift>:
 8008578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	460c      	mov	r4, r1
 800857e:	4607      	mov	r7, r0
 8008580:	4691      	mov	r9, r2
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	6849      	ldr	r1, [r1, #4]
 8008586:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008590:	f108 0601 	add.w	r6, r8, #1
 8008594:	42b3      	cmp	r3, r6
 8008596:	db0b      	blt.n	80085b0 <__lshift+0x38>
 8008598:	4638      	mov	r0, r7
 800859a:	f7ff fd95 	bl	80080c8 <_Balloc>
 800859e:	4605      	mov	r5, r0
 80085a0:	b948      	cbnz	r0, 80085b6 <__lshift+0x3e>
 80085a2:	4602      	mov	r2, r0
 80085a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085a8:	4b29      	ldr	r3, [pc, #164]	; (8008650 <__lshift+0xd8>)
 80085aa:	482a      	ldr	r0, [pc, #168]	; (8008654 <__lshift+0xdc>)
 80085ac:	f000 fcc8 	bl	8008f40 <__assert_func>
 80085b0:	3101      	adds	r1, #1
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	e7ee      	b.n	8008594 <__lshift+0x1c>
 80085b6:	2300      	movs	r3, #0
 80085b8:	f100 0114 	add.w	r1, r0, #20
 80085bc:	f100 0210 	add.w	r2, r0, #16
 80085c0:	4618      	mov	r0, r3
 80085c2:	4553      	cmp	r3, sl
 80085c4:	db37      	blt.n	8008636 <__lshift+0xbe>
 80085c6:	6920      	ldr	r0, [r4, #16]
 80085c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085cc:	f104 0314 	add.w	r3, r4, #20
 80085d0:	f019 091f 	ands.w	r9, r9, #31
 80085d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085dc:	d02f      	beq.n	800863e <__lshift+0xc6>
 80085de:	468a      	mov	sl, r1
 80085e0:	f04f 0c00 	mov.w	ip, #0
 80085e4:	f1c9 0e20 	rsb	lr, r9, #32
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	fa02 f209 	lsl.w	r2, r2, r9
 80085ee:	ea42 020c 	orr.w	r2, r2, ip
 80085f2:	f84a 2b04 	str.w	r2, [sl], #4
 80085f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085fa:	4298      	cmp	r0, r3
 80085fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008600:	d8f2      	bhi.n	80085e8 <__lshift+0x70>
 8008602:	1b03      	subs	r3, r0, r4
 8008604:	3b15      	subs	r3, #21
 8008606:	f023 0303 	bic.w	r3, r3, #3
 800860a:	3304      	adds	r3, #4
 800860c:	f104 0215 	add.w	r2, r4, #21
 8008610:	4290      	cmp	r0, r2
 8008612:	bf38      	it	cc
 8008614:	2304      	movcc	r3, #4
 8008616:	f841 c003 	str.w	ip, [r1, r3]
 800861a:	f1bc 0f00 	cmp.w	ip, #0
 800861e:	d001      	beq.n	8008624 <__lshift+0xac>
 8008620:	f108 0602 	add.w	r6, r8, #2
 8008624:	3e01      	subs	r6, #1
 8008626:	4638      	mov	r0, r7
 8008628:	4621      	mov	r1, r4
 800862a:	612e      	str	r6, [r5, #16]
 800862c:	f7ff fd8c 	bl	8008148 <_Bfree>
 8008630:	4628      	mov	r0, r5
 8008632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008636:	f842 0f04 	str.w	r0, [r2, #4]!
 800863a:	3301      	adds	r3, #1
 800863c:	e7c1      	b.n	80085c2 <__lshift+0x4a>
 800863e:	3904      	subs	r1, #4
 8008640:	f853 2b04 	ldr.w	r2, [r3], #4
 8008644:	4298      	cmp	r0, r3
 8008646:	f841 2f04 	str.w	r2, [r1, #4]!
 800864a:	d8f9      	bhi.n	8008640 <__lshift+0xc8>
 800864c:	e7ea      	b.n	8008624 <__lshift+0xac>
 800864e:	bf00      	nop
 8008650:	08009da8 	.word	0x08009da8
 8008654:	08009e34 	.word	0x08009e34

08008658 <__mcmp>:
 8008658:	4603      	mov	r3, r0
 800865a:	690a      	ldr	r2, [r1, #16]
 800865c:	6900      	ldr	r0, [r0, #16]
 800865e:	b530      	push	{r4, r5, lr}
 8008660:	1a80      	subs	r0, r0, r2
 8008662:	d10d      	bne.n	8008680 <__mcmp+0x28>
 8008664:	3314      	adds	r3, #20
 8008666:	3114      	adds	r1, #20
 8008668:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800866c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008670:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008674:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008678:	4295      	cmp	r5, r2
 800867a:	d002      	beq.n	8008682 <__mcmp+0x2a>
 800867c:	d304      	bcc.n	8008688 <__mcmp+0x30>
 800867e:	2001      	movs	r0, #1
 8008680:	bd30      	pop	{r4, r5, pc}
 8008682:	42a3      	cmp	r3, r4
 8008684:	d3f4      	bcc.n	8008670 <__mcmp+0x18>
 8008686:	e7fb      	b.n	8008680 <__mcmp+0x28>
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	e7f8      	b.n	8008680 <__mcmp+0x28>
	...

08008690 <__mdiff>:
 8008690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	460d      	mov	r5, r1
 8008696:	4607      	mov	r7, r0
 8008698:	4611      	mov	r1, r2
 800869a:	4628      	mov	r0, r5
 800869c:	4614      	mov	r4, r2
 800869e:	f7ff ffdb 	bl	8008658 <__mcmp>
 80086a2:	1e06      	subs	r6, r0, #0
 80086a4:	d111      	bne.n	80086ca <__mdiff+0x3a>
 80086a6:	4631      	mov	r1, r6
 80086a8:	4638      	mov	r0, r7
 80086aa:	f7ff fd0d 	bl	80080c8 <_Balloc>
 80086ae:	4602      	mov	r2, r0
 80086b0:	b928      	cbnz	r0, 80086be <__mdiff+0x2e>
 80086b2:	f240 2132 	movw	r1, #562	; 0x232
 80086b6:	4b3a      	ldr	r3, [pc, #232]	; (80087a0 <__mdiff+0x110>)
 80086b8:	483a      	ldr	r0, [pc, #232]	; (80087a4 <__mdiff+0x114>)
 80086ba:	f000 fc41 	bl	8008f40 <__assert_func>
 80086be:	2301      	movs	r3, #1
 80086c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80086c4:	4610      	mov	r0, r2
 80086c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ca:	bfa4      	itt	ge
 80086cc:	4623      	movge	r3, r4
 80086ce:	462c      	movge	r4, r5
 80086d0:	4638      	mov	r0, r7
 80086d2:	6861      	ldr	r1, [r4, #4]
 80086d4:	bfa6      	itte	ge
 80086d6:	461d      	movge	r5, r3
 80086d8:	2600      	movge	r6, #0
 80086da:	2601      	movlt	r6, #1
 80086dc:	f7ff fcf4 	bl	80080c8 <_Balloc>
 80086e0:	4602      	mov	r2, r0
 80086e2:	b918      	cbnz	r0, 80086ec <__mdiff+0x5c>
 80086e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086e8:	4b2d      	ldr	r3, [pc, #180]	; (80087a0 <__mdiff+0x110>)
 80086ea:	e7e5      	b.n	80086b8 <__mdiff+0x28>
 80086ec:	f102 0814 	add.w	r8, r2, #20
 80086f0:	46c2      	mov	sl, r8
 80086f2:	f04f 0c00 	mov.w	ip, #0
 80086f6:	6927      	ldr	r7, [r4, #16]
 80086f8:	60c6      	str	r6, [r0, #12]
 80086fa:	692e      	ldr	r6, [r5, #16]
 80086fc:	f104 0014 	add.w	r0, r4, #20
 8008700:	f105 0914 	add.w	r9, r5, #20
 8008704:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008708:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800870c:	3410      	adds	r4, #16
 800870e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008712:	f859 3b04 	ldr.w	r3, [r9], #4
 8008716:	fa1f f18b 	uxth.w	r1, fp
 800871a:	448c      	add	ip, r1
 800871c:	b299      	uxth	r1, r3
 800871e:	0c1b      	lsrs	r3, r3, #16
 8008720:	ebac 0101 	sub.w	r1, ip, r1
 8008724:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008728:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800872c:	b289      	uxth	r1, r1
 800872e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008732:	454e      	cmp	r6, r9
 8008734:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008738:	f84a 3b04 	str.w	r3, [sl], #4
 800873c:	d8e7      	bhi.n	800870e <__mdiff+0x7e>
 800873e:	1b73      	subs	r3, r6, r5
 8008740:	3b15      	subs	r3, #21
 8008742:	f023 0303 	bic.w	r3, r3, #3
 8008746:	3515      	adds	r5, #21
 8008748:	3304      	adds	r3, #4
 800874a:	42ae      	cmp	r6, r5
 800874c:	bf38      	it	cc
 800874e:	2304      	movcc	r3, #4
 8008750:	4418      	add	r0, r3
 8008752:	4443      	add	r3, r8
 8008754:	461e      	mov	r6, r3
 8008756:	4605      	mov	r5, r0
 8008758:	4575      	cmp	r5, lr
 800875a:	d30e      	bcc.n	800877a <__mdiff+0xea>
 800875c:	f10e 0103 	add.w	r1, lr, #3
 8008760:	1a09      	subs	r1, r1, r0
 8008762:	f021 0103 	bic.w	r1, r1, #3
 8008766:	3803      	subs	r0, #3
 8008768:	4586      	cmp	lr, r0
 800876a:	bf38      	it	cc
 800876c:	2100      	movcc	r1, #0
 800876e:	4419      	add	r1, r3
 8008770:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008774:	b18b      	cbz	r3, 800879a <__mdiff+0x10a>
 8008776:	6117      	str	r7, [r2, #16]
 8008778:	e7a4      	b.n	80086c4 <__mdiff+0x34>
 800877a:	f855 8b04 	ldr.w	r8, [r5], #4
 800877e:	fa1f f188 	uxth.w	r1, r8
 8008782:	4461      	add	r1, ip
 8008784:	140c      	asrs	r4, r1, #16
 8008786:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800878a:	b289      	uxth	r1, r1
 800878c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008790:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008794:	f846 1b04 	str.w	r1, [r6], #4
 8008798:	e7de      	b.n	8008758 <__mdiff+0xc8>
 800879a:	3f01      	subs	r7, #1
 800879c:	e7e8      	b.n	8008770 <__mdiff+0xe0>
 800879e:	bf00      	nop
 80087a0:	08009da8 	.word	0x08009da8
 80087a4:	08009e34 	.word	0x08009e34

080087a8 <__ulp>:
 80087a8:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <__ulp+0x48>)
 80087aa:	400b      	ands	r3, r1
 80087ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dd02      	ble.n	80087ba <__ulp+0x12>
 80087b4:	2000      	movs	r0, #0
 80087b6:	4619      	mov	r1, r3
 80087b8:	4770      	bx	lr
 80087ba:	425b      	negs	r3, r3
 80087bc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80087c0:	f04f 0000 	mov.w	r0, #0
 80087c4:	f04f 0100 	mov.w	r1, #0
 80087c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80087cc:	da04      	bge.n	80087d8 <__ulp+0x30>
 80087ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80087d2:	fa43 f102 	asr.w	r1, r3, r2
 80087d6:	4770      	bx	lr
 80087d8:	f1a2 0314 	sub.w	r3, r2, #20
 80087dc:	2b1e      	cmp	r3, #30
 80087de:	bfd6      	itet	le
 80087e0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80087e4:	2301      	movgt	r3, #1
 80087e6:	fa22 f303 	lsrle.w	r3, r2, r3
 80087ea:	4618      	mov	r0, r3
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	7ff00000 	.word	0x7ff00000

080087f4 <__b2d>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	6907      	ldr	r7, [r0, #16]
 80087fa:	f100 0914 	add.w	r9, r0, #20
 80087fe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008802:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008806:	f1a7 0804 	sub.w	r8, r7, #4
 800880a:	4630      	mov	r0, r6
 800880c:	f7ff fd4e 	bl	80082ac <__hi0bits>
 8008810:	f1c0 0320 	rsb	r3, r0, #32
 8008814:	280a      	cmp	r0, #10
 8008816:	600b      	str	r3, [r1, #0]
 8008818:	491f      	ldr	r1, [pc, #124]	; (8008898 <__b2d+0xa4>)
 800881a:	dc17      	bgt.n	800884c <__b2d+0x58>
 800881c:	45c1      	cmp	r9, r8
 800881e:	bf28      	it	cs
 8008820:	2200      	movcs	r2, #0
 8008822:	f1c0 0c0b 	rsb	ip, r0, #11
 8008826:	fa26 f30c 	lsr.w	r3, r6, ip
 800882a:	bf38      	it	cc
 800882c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008830:	ea43 0501 	orr.w	r5, r3, r1
 8008834:	f100 0315 	add.w	r3, r0, #21
 8008838:	fa06 f303 	lsl.w	r3, r6, r3
 800883c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008840:	ea43 0402 	orr.w	r4, r3, r2
 8008844:	4620      	mov	r0, r4
 8008846:	4629      	mov	r1, r5
 8008848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884c:	45c1      	cmp	r9, r8
 800884e:	bf2e      	itee	cs
 8008850:	2200      	movcs	r2, #0
 8008852:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008856:	f1a7 0808 	subcc.w	r8, r7, #8
 800885a:	f1b0 030b 	subs.w	r3, r0, #11
 800885e:	d016      	beq.n	800888e <__b2d+0x9a>
 8008860:	f1c3 0720 	rsb	r7, r3, #32
 8008864:	fa22 f107 	lsr.w	r1, r2, r7
 8008868:	45c8      	cmp	r8, r9
 800886a:	fa06 f603 	lsl.w	r6, r6, r3
 800886e:	ea46 0601 	orr.w	r6, r6, r1
 8008872:	bf94      	ite	ls
 8008874:	2100      	movls	r1, #0
 8008876:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800887a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800887e:	fa02 f003 	lsl.w	r0, r2, r3
 8008882:	40f9      	lsrs	r1, r7
 8008884:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008888:	ea40 0401 	orr.w	r4, r0, r1
 800888c:	e7da      	b.n	8008844 <__b2d+0x50>
 800888e:	4614      	mov	r4, r2
 8008890:	ea46 0501 	orr.w	r5, r6, r1
 8008894:	e7d6      	b.n	8008844 <__b2d+0x50>
 8008896:	bf00      	nop
 8008898:	3ff00000 	.word	0x3ff00000

0800889c <__d2b>:
 800889c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80088a0:	2101      	movs	r1, #1
 80088a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80088a6:	4690      	mov	r8, r2
 80088a8:	461d      	mov	r5, r3
 80088aa:	f7ff fc0d 	bl	80080c8 <_Balloc>
 80088ae:	4604      	mov	r4, r0
 80088b0:	b930      	cbnz	r0, 80088c0 <__d2b+0x24>
 80088b2:	4602      	mov	r2, r0
 80088b4:	f240 310a 	movw	r1, #778	; 0x30a
 80088b8:	4b24      	ldr	r3, [pc, #144]	; (800894c <__d2b+0xb0>)
 80088ba:	4825      	ldr	r0, [pc, #148]	; (8008950 <__d2b+0xb4>)
 80088bc:	f000 fb40 	bl	8008f40 <__assert_func>
 80088c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80088c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80088c8:	bb2d      	cbnz	r5, 8008916 <__d2b+0x7a>
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	f1b8 0300 	subs.w	r3, r8, #0
 80088d0:	d026      	beq.n	8008920 <__d2b+0x84>
 80088d2:	4668      	mov	r0, sp
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	f7ff fd09 	bl	80082ec <__lo0bits>
 80088da:	9900      	ldr	r1, [sp, #0]
 80088dc:	b1f0      	cbz	r0, 800891c <__d2b+0x80>
 80088de:	9a01      	ldr	r2, [sp, #4]
 80088e0:	f1c0 0320 	rsb	r3, r0, #32
 80088e4:	fa02 f303 	lsl.w	r3, r2, r3
 80088e8:	430b      	orrs	r3, r1
 80088ea:	40c2      	lsrs	r2, r0
 80088ec:	6163      	str	r3, [r4, #20]
 80088ee:	9201      	str	r2, [sp, #4]
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bf14      	ite	ne
 80088f6:	2102      	movne	r1, #2
 80088f8:	2101      	moveq	r1, #1
 80088fa:	61a3      	str	r3, [r4, #24]
 80088fc:	6121      	str	r1, [r4, #16]
 80088fe:	b1c5      	cbz	r5, 8008932 <__d2b+0x96>
 8008900:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008904:	4405      	add	r5, r0
 8008906:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800890a:	603d      	str	r5, [r7, #0]
 800890c:	6030      	str	r0, [r6, #0]
 800890e:	4620      	mov	r0, r4
 8008910:	b002      	add	sp, #8
 8008912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800891a:	e7d6      	b.n	80088ca <__d2b+0x2e>
 800891c:	6161      	str	r1, [r4, #20]
 800891e:	e7e7      	b.n	80088f0 <__d2b+0x54>
 8008920:	a801      	add	r0, sp, #4
 8008922:	f7ff fce3 	bl	80082ec <__lo0bits>
 8008926:	2101      	movs	r1, #1
 8008928:	9b01      	ldr	r3, [sp, #4]
 800892a:	6121      	str	r1, [r4, #16]
 800892c:	6163      	str	r3, [r4, #20]
 800892e:	3020      	adds	r0, #32
 8008930:	e7e5      	b.n	80088fe <__d2b+0x62>
 8008932:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008936:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800893a:	6038      	str	r0, [r7, #0]
 800893c:	6918      	ldr	r0, [r3, #16]
 800893e:	f7ff fcb5 	bl	80082ac <__hi0bits>
 8008942:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008946:	6031      	str	r1, [r6, #0]
 8008948:	e7e1      	b.n	800890e <__d2b+0x72>
 800894a:	bf00      	nop
 800894c:	08009da8 	.word	0x08009da8
 8008950:	08009e34 	.word	0x08009e34

08008954 <__ratio>:
 8008954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	4688      	mov	r8, r1
 800895a:	4669      	mov	r1, sp
 800895c:	4681      	mov	r9, r0
 800895e:	f7ff ff49 	bl	80087f4 <__b2d>
 8008962:	460f      	mov	r7, r1
 8008964:	4604      	mov	r4, r0
 8008966:	460d      	mov	r5, r1
 8008968:	4640      	mov	r0, r8
 800896a:	a901      	add	r1, sp, #4
 800896c:	f7ff ff42 	bl	80087f4 <__b2d>
 8008970:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008974:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008978:	468b      	mov	fp, r1
 800897a:	eba3 0c02 	sub.w	ip, r3, r2
 800897e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008982:	1a9b      	subs	r3, r3, r2
 8008984:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfd5      	itete	le
 800898c:	460a      	movle	r2, r1
 800898e:	462a      	movgt	r2, r5
 8008990:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008994:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008998:	bfd8      	it	le
 800899a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800899e:	465b      	mov	r3, fp
 80089a0:	4602      	mov	r2, r0
 80089a2:	4639      	mov	r1, r7
 80089a4:	4620      	mov	r0, r4
 80089a6:	f7f7 ff31 	bl	800080c <__aeabi_ddiv>
 80089aa:	b003      	add	sp, #12
 80089ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089b0 <__copybits>:
 80089b0:	3901      	subs	r1, #1
 80089b2:	b570      	push	{r4, r5, r6, lr}
 80089b4:	1149      	asrs	r1, r1, #5
 80089b6:	6914      	ldr	r4, [r2, #16]
 80089b8:	3101      	adds	r1, #1
 80089ba:	f102 0314 	add.w	r3, r2, #20
 80089be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089c6:	1f05      	subs	r5, r0, #4
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d30c      	bcc.n	80089e6 <__copybits+0x36>
 80089cc:	1aa3      	subs	r3, r4, r2
 80089ce:	3b11      	subs	r3, #17
 80089d0:	f023 0303 	bic.w	r3, r3, #3
 80089d4:	3211      	adds	r2, #17
 80089d6:	42a2      	cmp	r2, r4
 80089d8:	bf88      	it	hi
 80089da:	2300      	movhi	r3, #0
 80089dc:	4418      	add	r0, r3
 80089de:	2300      	movs	r3, #0
 80089e0:	4288      	cmp	r0, r1
 80089e2:	d305      	bcc.n	80089f0 <__copybits+0x40>
 80089e4:	bd70      	pop	{r4, r5, r6, pc}
 80089e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80089ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80089ee:	e7eb      	b.n	80089c8 <__copybits+0x18>
 80089f0:	f840 3b04 	str.w	r3, [r0], #4
 80089f4:	e7f4      	b.n	80089e0 <__copybits+0x30>

080089f6 <__any_on>:
 80089f6:	f100 0214 	add.w	r2, r0, #20
 80089fa:	6900      	ldr	r0, [r0, #16]
 80089fc:	114b      	asrs	r3, r1, #5
 80089fe:	4298      	cmp	r0, r3
 8008a00:	b510      	push	{r4, lr}
 8008a02:	db11      	blt.n	8008a28 <__any_on+0x32>
 8008a04:	dd0a      	ble.n	8008a1c <__any_on+0x26>
 8008a06:	f011 011f 	ands.w	r1, r1, #31
 8008a0a:	d007      	beq.n	8008a1c <__any_on+0x26>
 8008a0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a10:	fa24 f001 	lsr.w	r0, r4, r1
 8008a14:	fa00 f101 	lsl.w	r1, r0, r1
 8008a18:	428c      	cmp	r4, r1
 8008a1a:	d10b      	bne.n	8008a34 <__any_on+0x3e>
 8008a1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d803      	bhi.n	8008a2c <__any_on+0x36>
 8008a24:	2000      	movs	r0, #0
 8008a26:	bd10      	pop	{r4, pc}
 8008a28:	4603      	mov	r3, r0
 8008a2a:	e7f7      	b.n	8008a1c <__any_on+0x26>
 8008a2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a30:	2900      	cmp	r1, #0
 8008a32:	d0f5      	beq.n	8008a20 <__any_on+0x2a>
 8008a34:	2001      	movs	r0, #1
 8008a36:	e7f6      	b.n	8008a26 <__any_on+0x30>

08008a38 <_calloc_r>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	fba1 5402 	umull	r5, r4, r1, r2
 8008a3e:	b934      	cbnz	r4, 8008a4e <_calloc_r+0x16>
 8008a40:	4629      	mov	r1, r5
 8008a42:	f000 f875 	bl	8008b30 <_malloc_r>
 8008a46:	4606      	mov	r6, r0
 8008a48:	b928      	cbnz	r0, 8008a56 <_calloc_r+0x1e>
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
 8008a4e:	220c      	movs	r2, #12
 8008a50:	2600      	movs	r6, #0
 8008a52:	6002      	str	r2, [r0, #0]
 8008a54:	e7f9      	b.n	8008a4a <_calloc_r+0x12>
 8008a56:	462a      	mov	r2, r5
 8008a58:	4621      	mov	r1, r4
 8008a5a:	f7fc fc01 	bl	8005260 <memset>
 8008a5e:	e7f4      	b.n	8008a4a <_calloc_r+0x12>

08008a60 <_free_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4605      	mov	r5, r0
 8008a64:	2900      	cmp	r1, #0
 8008a66:	d040      	beq.n	8008aea <_free_r+0x8a>
 8008a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a6c:	1f0c      	subs	r4, r1, #4
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	bfb8      	it	lt
 8008a72:	18e4      	addlt	r4, r4, r3
 8008a74:	f000 faae 	bl	8008fd4 <__malloc_lock>
 8008a78:	4a1c      	ldr	r2, [pc, #112]	; (8008aec <_free_r+0x8c>)
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	b933      	cbnz	r3, 8008a8c <_free_r+0x2c>
 8008a7e:	6063      	str	r3, [r4, #4]
 8008a80:	6014      	str	r4, [r2, #0]
 8008a82:	4628      	mov	r0, r5
 8008a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a88:	f000 baaa 	b.w	8008fe0 <__malloc_unlock>
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	d908      	bls.n	8008aa2 <_free_r+0x42>
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	1821      	adds	r1, r4, r0
 8008a94:	428b      	cmp	r3, r1
 8008a96:	bf01      	itttt	eq
 8008a98:	6819      	ldreq	r1, [r3, #0]
 8008a9a:	685b      	ldreq	r3, [r3, #4]
 8008a9c:	1809      	addeq	r1, r1, r0
 8008a9e:	6021      	streq	r1, [r4, #0]
 8008aa0:	e7ed      	b.n	8008a7e <_free_r+0x1e>
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	b10b      	cbz	r3, 8008aac <_free_r+0x4c>
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	d9fa      	bls.n	8008aa2 <_free_r+0x42>
 8008aac:	6811      	ldr	r1, [r2, #0]
 8008aae:	1850      	adds	r0, r2, r1
 8008ab0:	42a0      	cmp	r0, r4
 8008ab2:	d10b      	bne.n	8008acc <_free_r+0x6c>
 8008ab4:	6820      	ldr	r0, [r4, #0]
 8008ab6:	4401      	add	r1, r0
 8008ab8:	1850      	adds	r0, r2, r1
 8008aba:	4283      	cmp	r3, r0
 8008abc:	6011      	str	r1, [r2, #0]
 8008abe:	d1e0      	bne.n	8008a82 <_free_r+0x22>
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	4401      	add	r1, r0
 8008ac6:	6011      	str	r1, [r2, #0]
 8008ac8:	6053      	str	r3, [r2, #4]
 8008aca:	e7da      	b.n	8008a82 <_free_r+0x22>
 8008acc:	d902      	bls.n	8008ad4 <_free_r+0x74>
 8008ace:	230c      	movs	r3, #12
 8008ad0:	602b      	str	r3, [r5, #0]
 8008ad2:	e7d6      	b.n	8008a82 <_free_r+0x22>
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	1821      	adds	r1, r4, r0
 8008ad8:	428b      	cmp	r3, r1
 8008ada:	bf01      	itttt	eq
 8008adc:	6819      	ldreq	r1, [r3, #0]
 8008ade:	685b      	ldreq	r3, [r3, #4]
 8008ae0:	1809      	addeq	r1, r1, r0
 8008ae2:	6021      	streq	r1, [r4, #0]
 8008ae4:	6063      	str	r3, [r4, #4]
 8008ae6:	6054      	str	r4, [r2, #4]
 8008ae8:	e7cb      	b.n	8008a82 <_free_r+0x22>
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	2000122c 	.word	0x2000122c

08008af0 <sbrk_aligned>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4e0e      	ldr	r6, [pc, #56]	; (8008b2c <sbrk_aligned+0x3c>)
 8008af4:	460c      	mov	r4, r1
 8008af6:	6831      	ldr	r1, [r6, #0]
 8008af8:	4605      	mov	r5, r0
 8008afa:	b911      	cbnz	r1, 8008b02 <sbrk_aligned+0x12>
 8008afc:	f000 f9ee 	bl	8008edc <_sbrk_r>
 8008b00:	6030      	str	r0, [r6, #0]
 8008b02:	4621      	mov	r1, r4
 8008b04:	4628      	mov	r0, r5
 8008b06:	f000 f9e9 	bl	8008edc <_sbrk_r>
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	d00a      	beq.n	8008b24 <sbrk_aligned+0x34>
 8008b0e:	1cc4      	adds	r4, r0, #3
 8008b10:	f024 0403 	bic.w	r4, r4, #3
 8008b14:	42a0      	cmp	r0, r4
 8008b16:	d007      	beq.n	8008b28 <sbrk_aligned+0x38>
 8008b18:	1a21      	subs	r1, r4, r0
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f000 f9de 	bl	8008edc <_sbrk_r>
 8008b20:	3001      	adds	r0, #1
 8008b22:	d101      	bne.n	8008b28 <sbrk_aligned+0x38>
 8008b24:	f04f 34ff 	mov.w	r4, #4294967295
 8008b28:	4620      	mov	r0, r4
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	20001230 	.word	0x20001230

08008b30 <_malloc_r>:
 8008b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b34:	1ccd      	adds	r5, r1, #3
 8008b36:	f025 0503 	bic.w	r5, r5, #3
 8008b3a:	3508      	adds	r5, #8
 8008b3c:	2d0c      	cmp	r5, #12
 8008b3e:	bf38      	it	cc
 8008b40:	250c      	movcc	r5, #12
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	4607      	mov	r7, r0
 8008b46:	db01      	blt.n	8008b4c <_malloc_r+0x1c>
 8008b48:	42a9      	cmp	r1, r5
 8008b4a:	d905      	bls.n	8008b58 <_malloc_r+0x28>
 8008b4c:	230c      	movs	r3, #12
 8008b4e:	2600      	movs	r6, #0
 8008b50:	603b      	str	r3, [r7, #0]
 8008b52:	4630      	mov	r0, r6
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b58:	4e2e      	ldr	r6, [pc, #184]	; (8008c14 <_malloc_r+0xe4>)
 8008b5a:	f000 fa3b 	bl	8008fd4 <__malloc_lock>
 8008b5e:	6833      	ldr	r3, [r6, #0]
 8008b60:	461c      	mov	r4, r3
 8008b62:	bb34      	cbnz	r4, 8008bb2 <_malloc_r+0x82>
 8008b64:	4629      	mov	r1, r5
 8008b66:	4638      	mov	r0, r7
 8008b68:	f7ff ffc2 	bl	8008af0 <sbrk_aligned>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	4604      	mov	r4, r0
 8008b70:	d14d      	bne.n	8008c0e <_malloc_r+0xde>
 8008b72:	6834      	ldr	r4, [r6, #0]
 8008b74:	4626      	mov	r6, r4
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	d140      	bne.n	8008bfc <_malloc_r+0xcc>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4638      	mov	r0, r7
 8008b80:	eb04 0803 	add.w	r8, r4, r3
 8008b84:	f000 f9aa 	bl	8008edc <_sbrk_r>
 8008b88:	4580      	cmp	r8, r0
 8008b8a:	d13a      	bne.n	8008c02 <_malloc_r+0xd2>
 8008b8c:	6821      	ldr	r1, [r4, #0]
 8008b8e:	3503      	adds	r5, #3
 8008b90:	1a6d      	subs	r5, r5, r1
 8008b92:	f025 0503 	bic.w	r5, r5, #3
 8008b96:	3508      	adds	r5, #8
 8008b98:	2d0c      	cmp	r5, #12
 8008b9a:	bf38      	it	cc
 8008b9c:	250c      	movcc	r5, #12
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7ff ffa5 	bl	8008af0 <sbrk_aligned>
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d02b      	beq.n	8008c02 <_malloc_r+0xd2>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	442b      	add	r3, r5
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	e00e      	b.n	8008bd0 <_malloc_r+0xa0>
 8008bb2:	6822      	ldr	r2, [r4, #0]
 8008bb4:	1b52      	subs	r2, r2, r5
 8008bb6:	d41e      	bmi.n	8008bf6 <_malloc_r+0xc6>
 8008bb8:	2a0b      	cmp	r2, #11
 8008bba:	d916      	bls.n	8008bea <_malloc_r+0xba>
 8008bbc:	1961      	adds	r1, r4, r5
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	6025      	str	r5, [r4, #0]
 8008bc2:	bf18      	it	ne
 8008bc4:	6059      	strne	r1, [r3, #4]
 8008bc6:	6863      	ldr	r3, [r4, #4]
 8008bc8:	bf08      	it	eq
 8008bca:	6031      	streq	r1, [r6, #0]
 8008bcc:	5162      	str	r2, [r4, r5]
 8008bce:	604b      	str	r3, [r1, #4]
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f104 060b 	add.w	r6, r4, #11
 8008bd6:	f000 fa03 	bl	8008fe0 <__malloc_unlock>
 8008bda:	f026 0607 	bic.w	r6, r6, #7
 8008bde:	1d23      	adds	r3, r4, #4
 8008be0:	1af2      	subs	r2, r6, r3
 8008be2:	d0b6      	beq.n	8008b52 <_malloc_r+0x22>
 8008be4:	1b9b      	subs	r3, r3, r6
 8008be6:	50a3      	str	r3, [r4, r2]
 8008be8:	e7b3      	b.n	8008b52 <_malloc_r+0x22>
 8008bea:	6862      	ldr	r2, [r4, #4]
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	bf0c      	ite	eq
 8008bf0:	6032      	streq	r2, [r6, #0]
 8008bf2:	605a      	strne	r2, [r3, #4]
 8008bf4:	e7ec      	b.n	8008bd0 <_malloc_r+0xa0>
 8008bf6:	4623      	mov	r3, r4
 8008bf8:	6864      	ldr	r4, [r4, #4]
 8008bfa:	e7b2      	b.n	8008b62 <_malloc_r+0x32>
 8008bfc:	4634      	mov	r4, r6
 8008bfe:	6876      	ldr	r6, [r6, #4]
 8008c00:	e7b9      	b.n	8008b76 <_malloc_r+0x46>
 8008c02:	230c      	movs	r3, #12
 8008c04:	4638      	mov	r0, r7
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	f000 f9ea 	bl	8008fe0 <__malloc_unlock>
 8008c0c:	e7a1      	b.n	8008b52 <_malloc_r+0x22>
 8008c0e:	6025      	str	r5, [r4, #0]
 8008c10:	e7de      	b.n	8008bd0 <_malloc_r+0xa0>
 8008c12:	bf00      	nop
 8008c14:	2000122c 	.word	0x2000122c

08008c18 <__ssputs_r>:
 8008c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	688e      	ldr	r6, [r1, #8]
 8008c1e:	4682      	mov	sl, r0
 8008c20:	429e      	cmp	r6, r3
 8008c22:	460c      	mov	r4, r1
 8008c24:	4690      	mov	r8, r2
 8008c26:	461f      	mov	r7, r3
 8008c28:	d838      	bhi.n	8008c9c <__ssputs_r+0x84>
 8008c2a:	898a      	ldrh	r2, [r1, #12]
 8008c2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c30:	d032      	beq.n	8008c98 <__ssputs_r+0x80>
 8008c32:	6825      	ldr	r5, [r4, #0]
 8008c34:	6909      	ldr	r1, [r1, #16]
 8008c36:	3301      	adds	r3, #1
 8008c38:	eba5 0901 	sub.w	r9, r5, r1
 8008c3c:	6965      	ldr	r5, [r4, #20]
 8008c3e:	444b      	add	r3, r9
 8008c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c48:	106d      	asrs	r5, r5, #1
 8008c4a:	429d      	cmp	r5, r3
 8008c4c:	bf38      	it	cc
 8008c4e:	461d      	movcc	r5, r3
 8008c50:	0553      	lsls	r3, r2, #21
 8008c52:	d531      	bpl.n	8008cb8 <__ssputs_r+0xa0>
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7ff ff6b 	bl	8008b30 <_malloc_r>
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	b950      	cbnz	r0, 8008c74 <__ssputs_r+0x5c>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	f8ca 3000 	str.w	r3, [sl]
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c74:	464a      	mov	r2, r9
 8008c76:	6921      	ldr	r1, [r4, #16]
 8008c78:	f7fc fae4 	bl	8005244 <memcpy>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	6126      	str	r6, [r4, #16]
 8008c8a:	444e      	add	r6, r9
 8008c8c:	6026      	str	r6, [r4, #0]
 8008c8e:	463e      	mov	r6, r7
 8008c90:	6165      	str	r5, [r4, #20]
 8008c92:	eba5 0509 	sub.w	r5, r5, r9
 8008c96:	60a5      	str	r5, [r4, #8]
 8008c98:	42be      	cmp	r6, r7
 8008c9a:	d900      	bls.n	8008c9e <__ssputs_r+0x86>
 8008c9c:	463e      	mov	r6, r7
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	f000 f97c 	bl	8008fa0 <memmove>
 8008ca8:	68a3      	ldr	r3, [r4, #8]
 8008caa:	2000      	movs	r0, #0
 8008cac:	1b9b      	subs	r3, r3, r6
 8008cae:	60a3      	str	r3, [r4, #8]
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	4433      	add	r3, r6
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	e7db      	b.n	8008c70 <__ssputs_r+0x58>
 8008cb8:	462a      	mov	r2, r5
 8008cba:	f000 f997 	bl	8008fec <_realloc_r>
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d1e1      	bne.n	8008c88 <__ssputs_r+0x70>
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	6921      	ldr	r1, [r4, #16]
 8008cc8:	f7ff feca 	bl	8008a60 <_free_r>
 8008ccc:	e7c7      	b.n	8008c5e <__ssputs_r+0x46>
	...

08008cd0 <_svfiprintf_r>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	4698      	mov	r8, r3
 8008cd6:	898b      	ldrh	r3, [r1, #12]
 8008cd8:	4607      	mov	r7, r0
 8008cda:	061b      	lsls	r3, r3, #24
 8008cdc:	460d      	mov	r5, r1
 8008cde:	4614      	mov	r4, r2
 8008ce0:	b09d      	sub	sp, #116	; 0x74
 8008ce2:	d50e      	bpl.n	8008d02 <_svfiprintf_r+0x32>
 8008ce4:	690b      	ldr	r3, [r1, #16]
 8008ce6:	b963      	cbnz	r3, 8008d02 <_svfiprintf_r+0x32>
 8008ce8:	2140      	movs	r1, #64	; 0x40
 8008cea:	f7ff ff21 	bl	8008b30 <_malloc_r>
 8008cee:	6028      	str	r0, [r5, #0]
 8008cf0:	6128      	str	r0, [r5, #16]
 8008cf2:	b920      	cbnz	r0, 8008cfe <_svfiprintf_r+0x2e>
 8008cf4:	230c      	movs	r3, #12
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	e0d1      	b.n	8008ea2 <_svfiprintf_r+0x1d2>
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	616b      	str	r3, [r5, #20]
 8008d02:	2300      	movs	r3, #0
 8008d04:	9309      	str	r3, [sp, #36]	; 0x24
 8008d06:	2320      	movs	r3, #32
 8008d08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d0c:	2330      	movs	r3, #48	; 0x30
 8008d0e:	f04f 0901 	mov.w	r9, #1
 8008d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ebc <_svfiprintf_r+0x1ec>
 8008d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d1e:	4623      	mov	r3, r4
 8008d20:	469a      	mov	sl, r3
 8008d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d26:	b10a      	cbz	r2, 8008d2c <_svfiprintf_r+0x5c>
 8008d28:	2a25      	cmp	r2, #37	; 0x25
 8008d2a:	d1f9      	bne.n	8008d20 <_svfiprintf_r+0x50>
 8008d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d30:	d00b      	beq.n	8008d4a <_svfiprintf_r+0x7a>
 8008d32:	465b      	mov	r3, fp
 8008d34:	4622      	mov	r2, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ff6d 	bl	8008c18 <__ssputs_r>
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f000 80aa 	beq.w	8008e98 <_svfiprintf_r+0x1c8>
 8008d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d46:	445a      	add	r2, fp
 8008d48:	9209      	str	r2, [sp, #36]	; 0x24
 8008d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 80a2 	beq.w	8008e98 <_svfiprintf_r+0x1c8>
 8008d54:	2300      	movs	r3, #0
 8008d56:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d5e:	f10a 0a01 	add.w	sl, sl, #1
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	9307      	str	r3, [sp, #28]
 8008d66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d6c:	4654      	mov	r4, sl
 8008d6e:	2205      	movs	r2, #5
 8008d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d74:	4851      	ldr	r0, [pc, #324]	; (8008ebc <_svfiprintf_r+0x1ec>)
 8008d76:	f7ff f999 	bl	80080ac <memchr>
 8008d7a:	9a04      	ldr	r2, [sp, #16]
 8008d7c:	b9d8      	cbnz	r0, 8008db6 <_svfiprintf_r+0xe6>
 8008d7e:	06d0      	lsls	r0, r2, #27
 8008d80:	bf44      	itt	mi
 8008d82:	2320      	movmi	r3, #32
 8008d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d88:	0711      	lsls	r1, r2, #28
 8008d8a:	bf44      	itt	mi
 8008d8c:	232b      	movmi	r3, #43	; 0x2b
 8008d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d92:	f89a 3000 	ldrb.w	r3, [sl]
 8008d96:	2b2a      	cmp	r3, #42	; 0x2a
 8008d98:	d015      	beq.n	8008dc6 <_svfiprintf_r+0xf6>
 8008d9a:	4654      	mov	r4, sl
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f04f 0c0a 	mov.w	ip, #10
 8008da2:	9a07      	ldr	r2, [sp, #28]
 8008da4:	4621      	mov	r1, r4
 8008da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008daa:	3b30      	subs	r3, #48	; 0x30
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	d94e      	bls.n	8008e4e <_svfiprintf_r+0x17e>
 8008db0:	b1b0      	cbz	r0, 8008de0 <_svfiprintf_r+0x110>
 8008db2:	9207      	str	r2, [sp, #28]
 8008db4:	e014      	b.n	8008de0 <_svfiprintf_r+0x110>
 8008db6:	eba0 0308 	sub.w	r3, r0, r8
 8008dba:	fa09 f303 	lsl.w	r3, r9, r3
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	46a2      	mov	sl, r4
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	e7d2      	b.n	8008d6c <_svfiprintf_r+0x9c>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	1d19      	adds	r1, r3, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	9103      	str	r1, [sp, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfbb      	ittet	lt
 8008dd2:	425b      	neglt	r3, r3
 8008dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd8:	9307      	strge	r3, [sp, #28]
 8008dda:	9307      	strlt	r3, [sp, #28]
 8008ddc:	bfb8      	it	lt
 8008dde:	9204      	strlt	r2, [sp, #16]
 8008de0:	7823      	ldrb	r3, [r4, #0]
 8008de2:	2b2e      	cmp	r3, #46	; 0x2e
 8008de4:	d10c      	bne.n	8008e00 <_svfiprintf_r+0x130>
 8008de6:	7863      	ldrb	r3, [r4, #1]
 8008de8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dea:	d135      	bne.n	8008e58 <_svfiprintf_r+0x188>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	3402      	adds	r4, #2
 8008df0:	1d1a      	adds	r2, r3, #4
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	9203      	str	r2, [sp, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bfb8      	it	lt
 8008dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008ec0 <_svfiprintf_r+0x1f0>
 8008e04:	2203      	movs	r2, #3
 8008e06:	4650      	mov	r0, sl
 8008e08:	7821      	ldrb	r1, [r4, #0]
 8008e0a:	f7ff f94f 	bl	80080ac <memchr>
 8008e0e:	b140      	cbz	r0, 8008e22 <_svfiprintf_r+0x152>
 8008e10:	2340      	movs	r3, #64	; 0x40
 8008e12:	eba0 000a 	sub.w	r0, r0, sl
 8008e16:	fa03 f000 	lsl.w	r0, r3, r0
 8008e1a:	9b04      	ldr	r3, [sp, #16]
 8008e1c:	3401      	adds	r4, #1
 8008e1e:	4303      	orrs	r3, r0
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e26:	2206      	movs	r2, #6
 8008e28:	4826      	ldr	r0, [pc, #152]	; (8008ec4 <_svfiprintf_r+0x1f4>)
 8008e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e2e:	f7ff f93d 	bl	80080ac <memchr>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d038      	beq.n	8008ea8 <_svfiprintf_r+0x1d8>
 8008e36:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <_svfiprintf_r+0x1f8>)
 8008e38:	bb1b      	cbnz	r3, 8008e82 <_svfiprintf_r+0x1b2>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	3307      	adds	r3, #7
 8008e3e:	f023 0307 	bic.w	r3, r3, #7
 8008e42:	3308      	adds	r3, #8
 8008e44:	9303      	str	r3, [sp, #12]
 8008e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e48:	4433      	add	r3, r6
 8008e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4c:	e767      	b.n	8008d1e <_svfiprintf_r+0x4e>
 8008e4e:	460c      	mov	r4, r1
 8008e50:	2001      	movs	r0, #1
 8008e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e56:	e7a5      	b.n	8008da4 <_svfiprintf_r+0xd4>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f04f 0c0a 	mov.w	ip, #10
 8008e5e:	4619      	mov	r1, r3
 8008e60:	3401      	adds	r4, #1
 8008e62:	9305      	str	r3, [sp, #20]
 8008e64:	4620      	mov	r0, r4
 8008e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e6a:	3a30      	subs	r2, #48	; 0x30
 8008e6c:	2a09      	cmp	r2, #9
 8008e6e:	d903      	bls.n	8008e78 <_svfiprintf_r+0x1a8>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0c5      	beq.n	8008e00 <_svfiprintf_r+0x130>
 8008e74:	9105      	str	r1, [sp, #20]
 8008e76:	e7c3      	b.n	8008e00 <_svfiprintf_r+0x130>
 8008e78:	4604      	mov	r4, r0
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e80:	e7f0      	b.n	8008e64 <_svfiprintf_r+0x194>
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	462a      	mov	r2, r5
 8008e88:	4638      	mov	r0, r7
 8008e8a:	4b10      	ldr	r3, [pc, #64]	; (8008ecc <_svfiprintf_r+0x1fc>)
 8008e8c:	a904      	add	r1, sp, #16
 8008e8e:	f7fc fa8d 	bl	80053ac <_printf_float>
 8008e92:	1c42      	adds	r2, r0, #1
 8008e94:	4606      	mov	r6, r0
 8008e96:	d1d6      	bne.n	8008e46 <_svfiprintf_r+0x176>
 8008e98:	89ab      	ldrh	r3, [r5, #12]
 8008e9a:	065b      	lsls	r3, r3, #25
 8008e9c:	f53f af2c 	bmi.w	8008cf8 <_svfiprintf_r+0x28>
 8008ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ea2:	b01d      	add	sp, #116	; 0x74
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	ab03      	add	r3, sp, #12
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	462a      	mov	r2, r5
 8008eae:	4638      	mov	r0, r7
 8008eb0:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <_svfiprintf_r+0x1fc>)
 8008eb2:	a904      	add	r1, sp, #16
 8008eb4:	f7fc fd16 	bl	80058e4 <_printf_i>
 8008eb8:	e7eb      	b.n	8008e92 <_svfiprintf_r+0x1c2>
 8008eba:	bf00      	nop
 8008ebc:	08009f8c 	.word	0x08009f8c
 8008ec0:	08009f92 	.word	0x08009f92
 8008ec4:	08009f96 	.word	0x08009f96
 8008ec8:	080053ad 	.word	0x080053ad
 8008ecc:	08008c19 	.word	0x08008c19

08008ed0 <nan>:
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	4901      	ldr	r1, [pc, #4]	; (8008ed8 <nan+0x8>)
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	7ff80000 	.word	0x7ff80000

08008edc <_sbrk_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	2300      	movs	r3, #0
 8008ee0:	4d05      	ldr	r5, [pc, #20]	; (8008ef8 <_sbrk_r+0x1c>)
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	602b      	str	r3, [r5, #0]
 8008ee8:	f7f8 faca 	bl	8001480 <_sbrk>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_sbrk_r+0x1a>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_sbrk_r+0x1a>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	20001234 	.word	0x20001234

08008efc <strncmp>:
 8008efc:	4603      	mov	r3, r0
 8008efe:	b510      	push	{r4, lr}
 8008f00:	b172      	cbz	r2, 8008f20 <strncmp+0x24>
 8008f02:	3901      	subs	r1, #1
 8008f04:	1884      	adds	r4, r0, r2
 8008f06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008f0e:	4290      	cmp	r0, r2
 8008f10:	d101      	bne.n	8008f16 <strncmp+0x1a>
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	d101      	bne.n	8008f1a <strncmp+0x1e>
 8008f16:	1a80      	subs	r0, r0, r2
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d1f3      	bne.n	8008f06 <strncmp+0xa>
 8008f1e:	e7fa      	b.n	8008f16 <strncmp+0x1a>
 8008f20:	4610      	mov	r0, r2
 8008f22:	e7f9      	b.n	8008f18 <strncmp+0x1c>

08008f24 <__ascii_wctomb>:
 8008f24:	4603      	mov	r3, r0
 8008f26:	4608      	mov	r0, r1
 8008f28:	b141      	cbz	r1, 8008f3c <__ascii_wctomb+0x18>
 8008f2a:	2aff      	cmp	r2, #255	; 0xff
 8008f2c:	d904      	bls.n	8008f38 <__ascii_wctomb+0x14>
 8008f2e:	228a      	movs	r2, #138	; 0x8a
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	4770      	bx	lr
 8008f38:	2001      	movs	r0, #1
 8008f3a:	700a      	strb	r2, [r1, #0]
 8008f3c:	4770      	bx	lr
	...

08008f40 <__assert_func>:
 8008f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f42:	4614      	mov	r4, r2
 8008f44:	461a      	mov	r2, r3
 8008f46:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <__assert_func+0x2c>)
 8008f48:	4605      	mov	r5, r0
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68d8      	ldr	r0, [r3, #12]
 8008f4e:	b14c      	cbz	r4, 8008f64 <__assert_func+0x24>
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <__assert_func+0x30>)
 8008f52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f56:	9100      	str	r1, [sp, #0]
 8008f58:	462b      	mov	r3, r5
 8008f5a:	4906      	ldr	r1, [pc, #24]	; (8008f74 <__assert_func+0x34>)
 8008f5c:	f000 f80e 	bl	8008f7c <fiprintf>
 8008f60:	f000 fa8a 	bl	8009478 <abort>
 8008f64:	4b04      	ldr	r3, [pc, #16]	; (8008f78 <__assert_func+0x38>)
 8008f66:	461c      	mov	r4, r3
 8008f68:	e7f3      	b.n	8008f52 <__assert_func+0x12>
 8008f6a:	bf00      	nop
 8008f6c:	20000010 	.word	0x20000010
 8008f70:	08009f9d 	.word	0x08009f9d
 8008f74:	08009faa 	.word	0x08009faa
 8008f78:	08009fd8 	.word	0x08009fd8

08008f7c <fiprintf>:
 8008f7c:	b40e      	push	{r1, r2, r3}
 8008f7e:	b503      	push	{r0, r1, lr}
 8008f80:	4601      	mov	r1, r0
 8008f82:	ab03      	add	r3, sp, #12
 8008f84:	4805      	ldr	r0, [pc, #20]	; (8008f9c <fiprintf+0x20>)
 8008f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f8a:	6800      	ldr	r0, [r0, #0]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	f000 f883 	bl	8009098 <_vfiprintf_r>
 8008f92:	b002      	add	sp, #8
 8008f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f98:	b003      	add	sp, #12
 8008f9a:	4770      	bx	lr
 8008f9c:	20000010 	.word	0x20000010

08008fa0 <memmove>:
 8008fa0:	4288      	cmp	r0, r1
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	eb01 0402 	add.w	r4, r1, r2
 8008fa8:	d902      	bls.n	8008fb0 <memmove+0x10>
 8008faa:	4284      	cmp	r4, r0
 8008fac:	4623      	mov	r3, r4
 8008fae:	d807      	bhi.n	8008fc0 <memmove+0x20>
 8008fb0:	1e43      	subs	r3, r0, #1
 8008fb2:	42a1      	cmp	r1, r4
 8008fb4:	d008      	beq.n	8008fc8 <memmove+0x28>
 8008fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fbe:	e7f8      	b.n	8008fb2 <memmove+0x12>
 8008fc0:	4601      	mov	r1, r0
 8008fc2:	4402      	add	r2, r0
 8008fc4:	428a      	cmp	r2, r1
 8008fc6:	d100      	bne.n	8008fca <memmove+0x2a>
 8008fc8:	bd10      	pop	{r4, pc}
 8008fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fd2:	e7f7      	b.n	8008fc4 <memmove+0x24>

08008fd4 <__malloc_lock>:
 8008fd4:	4801      	ldr	r0, [pc, #4]	; (8008fdc <__malloc_lock+0x8>)
 8008fd6:	f000 bc0b 	b.w	80097f0 <__retarget_lock_acquire_recursive>
 8008fda:	bf00      	nop
 8008fdc:	20001238 	.word	0x20001238

08008fe0 <__malloc_unlock>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	; (8008fe8 <__malloc_unlock+0x8>)
 8008fe2:	f000 bc06 	b.w	80097f2 <__retarget_lock_release_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	20001238 	.word	0x20001238

08008fec <_realloc_r>:
 8008fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff0:	4680      	mov	r8, r0
 8008ff2:	4614      	mov	r4, r2
 8008ff4:	460e      	mov	r6, r1
 8008ff6:	b921      	cbnz	r1, 8009002 <_realloc_r+0x16>
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffe:	f7ff bd97 	b.w	8008b30 <_malloc_r>
 8009002:	b92a      	cbnz	r2, 8009010 <_realloc_r+0x24>
 8009004:	f7ff fd2c 	bl	8008a60 <_free_r>
 8009008:	4625      	mov	r5, r4
 800900a:	4628      	mov	r0, r5
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009010:	f000 fc56 	bl	80098c0 <_malloc_usable_size_r>
 8009014:	4284      	cmp	r4, r0
 8009016:	4607      	mov	r7, r0
 8009018:	d802      	bhi.n	8009020 <_realloc_r+0x34>
 800901a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800901e:	d812      	bhi.n	8009046 <_realloc_r+0x5a>
 8009020:	4621      	mov	r1, r4
 8009022:	4640      	mov	r0, r8
 8009024:	f7ff fd84 	bl	8008b30 <_malloc_r>
 8009028:	4605      	mov	r5, r0
 800902a:	2800      	cmp	r0, #0
 800902c:	d0ed      	beq.n	800900a <_realloc_r+0x1e>
 800902e:	42bc      	cmp	r4, r7
 8009030:	4622      	mov	r2, r4
 8009032:	4631      	mov	r1, r6
 8009034:	bf28      	it	cs
 8009036:	463a      	movcs	r2, r7
 8009038:	f7fc f904 	bl	8005244 <memcpy>
 800903c:	4631      	mov	r1, r6
 800903e:	4640      	mov	r0, r8
 8009040:	f7ff fd0e 	bl	8008a60 <_free_r>
 8009044:	e7e1      	b.n	800900a <_realloc_r+0x1e>
 8009046:	4635      	mov	r5, r6
 8009048:	e7df      	b.n	800900a <_realloc_r+0x1e>

0800904a <__sfputc_r>:
 800904a:	6893      	ldr	r3, [r2, #8]
 800904c:	b410      	push	{r4}
 800904e:	3b01      	subs	r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	6093      	str	r3, [r2, #8]
 8009054:	da07      	bge.n	8009066 <__sfputc_r+0x1c>
 8009056:	6994      	ldr	r4, [r2, #24]
 8009058:	42a3      	cmp	r3, r4
 800905a:	db01      	blt.n	8009060 <__sfputc_r+0x16>
 800905c:	290a      	cmp	r1, #10
 800905e:	d102      	bne.n	8009066 <__sfputc_r+0x1c>
 8009060:	bc10      	pop	{r4}
 8009062:	f000 b949 	b.w	80092f8 <__swbuf_r>
 8009066:	6813      	ldr	r3, [r2, #0]
 8009068:	1c58      	adds	r0, r3, #1
 800906a:	6010      	str	r0, [r2, #0]
 800906c:	7019      	strb	r1, [r3, #0]
 800906e:	4608      	mov	r0, r1
 8009070:	bc10      	pop	{r4}
 8009072:	4770      	bx	lr

08009074 <__sfputs_r>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	4606      	mov	r6, r0
 8009078:	460f      	mov	r7, r1
 800907a:	4614      	mov	r4, r2
 800907c:	18d5      	adds	r5, r2, r3
 800907e:	42ac      	cmp	r4, r5
 8009080:	d101      	bne.n	8009086 <__sfputs_r+0x12>
 8009082:	2000      	movs	r0, #0
 8009084:	e007      	b.n	8009096 <__sfputs_r+0x22>
 8009086:	463a      	mov	r2, r7
 8009088:	4630      	mov	r0, r6
 800908a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908e:	f7ff ffdc 	bl	800904a <__sfputc_r>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	d1f3      	bne.n	800907e <__sfputs_r+0xa>
 8009096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009098 <_vfiprintf_r>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	460d      	mov	r5, r1
 800909e:	4614      	mov	r4, r2
 80090a0:	4698      	mov	r8, r3
 80090a2:	4606      	mov	r6, r0
 80090a4:	b09d      	sub	sp, #116	; 0x74
 80090a6:	b118      	cbz	r0, 80090b0 <_vfiprintf_r+0x18>
 80090a8:	6983      	ldr	r3, [r0, #24]
 80090aa:	b90b      	cbnz	r3, 80090b0 <_vfiprintf_r+0x18>
 80090ac:	f000 fb02 	bl	80096b4 <__sinit>
 80090b0:	4b89      	ldr	r3, [pc, #548]	; (80092d8 <_vfiprintf_r+0x240>)
 80090b2:	429d      	cmp	r5, r3
 80090b4:	d11b      	bne.n	80090ee <_vfiprintf_r+0x56>
 80090b6:	6875      	ldr	r5, [r6, #4]
 80090b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ba:	07d9      	lsls	r1, r3, #31
 80090bc:	d405      	bmi.n	80090ca <_vfiprintf_r+0x32>
 80090be:	89ab      	ldrh	r3, [r5, #12]
 80090c0:	059a      	lsls	r2, r3, #22
 80090c2:	d402      	bmi.n	80090ca <_vfiprintf_r+0x32>
 80090c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c6:	f000 fb93 	bl	80097f0 <__retarget_lock_acquire_recursive>
 80090ca:	89ab      	ldrh	r3, [r5, #12]
 80090cc:	071b      	lsls	r3, r3, #28
 80090ce:	d501      	bpl.n	80090d4 <_vfiprintf_r+0x3c>
 80090d0:	692b      	ldr	r3, [r5, #16]
 80090d2:	b9eb      	cbnz	r3, 8009110 <_vfiprintf_r+0x78>
 80090d4:	4629      	mov	r1, r5
 80090d6:	4630      	mov	r0, r6
 80090d8:	f000 f960 	bl	800939c <__swsetup_r>
 80090dc:	b1c0      	cbz	r0, 8009110 <_vfiprintf_r+0x78>
 80090de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090e0:	07dc      	lsls	r4, r3, #31
 80090e2:	d50e      	bpl.n	8009102 <_vfiprintf_r+0x6a>
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	b01d      	add	sp, #116	; 0x74
 80090ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ee:	4b7b      	ldr	r3, [pc, #492]	; (80092dc <_vfiprintf_r+0x244>)
 80090f0:	429d      	cmp	r5, r3
 80090f2:	d101      	bne.n	80090f8 <_vfiprintf_r+0x60>
 80090f4:	68b5      	ldr	r5, [r6, #8]
 80090f6:	e7df      	b.n	80090b8 <_vfiprintf_r+0x20>
 80090f8:	4b79      	ldr	r3, [pc, #484]	; (80092e0 <_vfiprintf_r+0x248>)
 80090fa:	429d      	cmp	r5, r3
 80090fc:	bf08      	it	eq
 80090fe:	68f5      	ldreq	r5, [r6, #12]
 8009100:	e7da      	b.n	80090b8 <_vfiprintf_r+0x20>
 8009102:	89ab      	ldrh	r3, [r5, #12]
 8009104:	0598      	lsls	r0, r3, #22
 8009106:	d4ed      	bmi.n	80090e4 <_vfiprintf_r+0x4c>
 8009108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800910a:	f000 fb72 	bl	80097f2 <__retarget_lock_release_recursive>
 800910e:	e7e9      	b.n	80090e4 <_vfiprintf_r+0x4c>
 8009110:	2300      	movs	r3, #0
 8009112:	9309      	str	r3, [sp, #36]	; 0x24
 8009114:	2320      	movs	r3, #32
 8009116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800911a:	2330      	movs	r3, #48	; 0x30
 800911c:	f04f 0901 	mov.w	r9, #1
 8009120:	f8cd 800c 	str.w	r8, [sp, #12]
 8009124:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80092e4 <_vfiprintf_r+0x24c>
 8009128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800912c:	4623      	mov	r3, r4
 800912e:	469a      	mov	sl, r3
 8009130:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009134:	b10a      	cbz	r2, 800913a <_vfiprintf_r+0xa2>
 8009136:	2a25      	cmp	r2, #37	; 0x25
 8009138:	d1f9      	bne.n	800912e <_vfiprintf_r+0x96>
 800913a:	ebba 0b04 	subs.w	fp, sl, r4
 800913e:	d00b      	beq.n	8009158 <_vfiprintf_r+0xc0>
 8009140:	465b      	mov	r3, fp
 8009142:	4622      	mov	r2, r4
 8009144:	4629      	mov	r1, r5
 8009146:	4630      	mov	r0, r6
 8009148:	f7ff ff94 	bl	8009074 <__sfputs_r>
 800914c:	3001      	adds	r0, #1
 800914e:	f000 80aa 	beq.w	80092a6 <_vfiprintf_r+0x20e>
 8009152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009154:	445a      	add	r2, fp
 8009156:	9209      	str	r2, [sp, #36]	; 0x24
 8009158:	f89a 3000 	ldrb.w	r3, [sl]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 80a2 	beq.w	80092a6 <_vfiprintf_r+0x20e>
 8009162:	2300      	movs	r3, #0
 8009164:	f04f 32ff 	mov.w	r2, #4294967295
 8009168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800916c:	f10a 0a01 	add.w	sl, sl, #1
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	9307      	str	r3, [sp, #28]
 8009174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009178:	931a      	str	r3, [sp, #104]	; 0x68
 800917a:	4654      	mov	r4, sl
 800917c:	2205      	movs	r2, #5
 800917e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009182:	4858      	ldr	r0, [pc, #352]	; (80092e4 <_vfiprintf_r+0x24c>)
 8009184:	f7fe ff92 	bl	80080ac <memchr>
 8009188:	9a04      	ldr	r2, [sp, #16]
 800918a:	b9d8      	cbnz	r0, 80091c4 <_vfiprintf_r+0x12c>
 800918c:	06d1      	lsls	r1, r2, #27
 800918e:	bf44      	itt	mi
 8009190:	2320      	movmi	r3, #32
 8009192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009196:	0713      	lsls	r3, r2, #28
 8009198:	bf44      	itt	mi
 800919a:	232b      	movmi	r3, #43	; 0x2b
 800919c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a0:	f89a 3000 	ldrb.w	r3, [sl]
 80091a4:	2b2a      	cmp	r3, #42	; 0x2a
 80091a6:	d015      	beq.n	80091d4 <_vfiprintf_r+0x13c>
 80091a8:	4654      	mov	r4, sl
 80091aa:	2000      	movs	r0, #0
 80091ac:	f04f 0c0a 	mov.w	ip, #10
 80091b0:	9a07      	ldr	r2, [sp, #28]
 80091b2:	4621      	mov	r1, r4
 80091b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091b8:	3b30      	subs	r3, #48	; 0x30
 80091ba:	2b09      	cmp	r3, #9
 80091bc:	d94e      	bls.n	800925c <_vfiprintf_r+0x1c4>
 80091be:	b1b0      	cbz	r0, 80091ee <_vfiprintf_r+0x156>
 80091c0:	9207      	str	r2, [sp, #28]
 80091c2:	e014      	b.n	80091ee <_vfiprintf_r+0x156>
 80091c4:	eba0 0308 	sub.w	r3, r0, r8
 80091c8:	fa09 f303 	lsl.w	r3, r9, r3
 80091cc:	4313      	orrs	r3, r2
 80091ce:	46a2      	mov	sl, r4
 80091d0:	9304      	str	r3, [sp, #16]
 80091d2:	e7d2      	b.n	800917a <_vfiprintf_r+0xe2>
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	1d19      	adds	r1, r3, #4
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	9103      	str	r1, [sp, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bfbb      	ittet	lt
 80091e0:	425b      	neglt	r3, r3
 80091e2:	f042 0202 	orrlt.w	r2, r2, #2
 80091e6:	9307      	strge	r3, [sp, #28]
 80091e8:	9307      	strlt	r3, [sp, #28]
 80091ea:	bfb8      	it	lt
 80091ec:	9204      	strlt	r2, [sp, #16]
 80091ee:	7823      	ldrb	r3, [r4, #0]
 80091f0:	2b2e      	cmp	r3, #46	; 0x2e
 80091f2:	d10c      	bne.n	800920e <_vfiprintf_r+0x176>
 80091f4:	7863      	ldrb	r3, [r4, #1]
 80091f6:	2b2a      	cmp	r3, #42	; 0x2a
 80091f8:	d135      	bne.n	8009266 <_vfiprintf_r+0x1ce>
 80091fa:	9b03      	ldr	r3, [sp, #12]
 80091fc:	3402      	adds	r4, #2
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	9203      	str	r2, [sp, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfb8      	it	lt
 8009208:	f04f 33ff 	movlt.w	r3, #4294967295
 800920c:	9305      	str	r3, [sp, #20]
 800920e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80092e8 <_vfiprintf_r+0x250>
 8009212:	2203      	movs	r2, #3
 8009214:	4650      	mov	r0, sl
 8009216:	7821      	ldrb	r1, [r4, #0]
 8009218:	f7fe ff48 	bl	80080ac <memchr>
 800921c:	b140      	cbz	r0, 8009230 <_vfiprintf_r+0x198>
 800921e:	2340      	movs	r3, #64	; 0x40
 8009220:	eba0 000a 	sub.w	r0, r0, sl
 8009224:	fa03 f000 	lsl.w	r0, r3, r0
 8009228:	9b04      	ldr	r3, [sp, #16]
 800922a:	3401      	adds	r4, #1
 800922c:	4303      	orrs	r3, r0
 800922e:	9304      	str	r3, [sp, #16]
 8009230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009234:	2206      	movs	r2, #6
 8009236:	482d      	ldr	r0, [pc, #180]	; (80092ec <_vfiprintf_r+0x254>)
 8009238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800923c:	f7fe ff36 	bl	80080ac <memchr>
 8009240:	2800      	cmp	r0, #0
 8009242:	d03f      	beq.n	80092c4 <_vfiprintf_r+0x22c>
 8009244:	4b2a      	ldr	r3, [pc, #168]	; (80092f0 <_vfiprintf_r+0x258>)
 8009246:	bb1b      	cbnz	r3, 8009290 <_vfiprintf_r+0x1f8>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	3307      	adds	r3, #7
 800924c:	f023 0307 	bic.w	r3, r3, #7
 8009250:	3308      	adds	r3, #8
 8009252:	9303      	str	r3, [sp, #12]
 8009254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009256:	443b      	add	r3, r7
 8009258:	9309      	str	r3, [sp, #36]	; 0x24
 800925a:	e767      	b.n	800912c <_vfiprintf_r+0x94>
 800925c:	460c      	mov	r4, r1
 800925e:	2001      	movs	r0, #1
 8009260:	fb0c 3202 	mla	r2, ip, r2, r3
 8009264:	e7a5      	b.n	80091b2 <_vfiprintf_r+0x11a>
 8009266:	2300      	movs	r3, #0
 8009268:	f04f 0c0a 	mov.w	ip, #10
 800926c:	4619      	mov	r1, r3
 800926e:	3401      	adds	r4, #1
 8009270:	9305      	str	r3, [sp, #20]
 8009272:	4620      	mov	r0, r4
 8009274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009278:	3a30      	subs	r2, #48	; 0x30
 800927a:	2a09      	cmp	r2, #9
 800927c:	d903      	bls.n	8009286 <_vfiprintf_r+0x1ee>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0c5      	beq.n	800920e <_vfiprintf_r+0x176>
 8009282:	9105      	str	r1, [sp, #20]
 8009284:	e7c3      	b.n	800920e <_vfiprintf_r+0x176>
 8009286:	4604      	mov	r4, r0
 8009288:	2301      	movs	r3, #1
 800928a:	fb0c 2101 	mla	r1, ip, r1, r2
 800928e:	e7f0      	b.n	8009272 <_vfiprintf_r+0x1da>
 8009290:	ab03      	add	r3, sp, #12
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	462a      	mov	r2, r5
 8009296:	4630      	mov	r0, r6
 8009298:	4b16      	ldr	r3, [pc, #88]	; (80092f4 <_vfiprintf_r+0x25c>)
 800929a:	a904      	add	r1, sp, #16
 800929c:	f7fc f886 	bl	80053ac <_printf_float>
 80092a0:	4607      	mov	r7, r0
 80092a2:	1c78      	adds	r0, r7, #1
 80092a4:	d1d6      	bne.n	8009254 <_vfiprintf_r+0x1bc>
 80092a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092a8:	07d9      	lsls	r1, r3, #31
 80092aa:	d405      	bmi.n	80092b8 <_vfiprintf_r+0x220>
 80092ac:	89ab      	ldrh	r3, [r5, #12]
 80092ae:	059a      	lsls	r2, r3, #22
 80092b0:	d402      	bmi.n	80092b8 <_vfiprintf_r+0x220>
 80092b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092b4:	f000 fa9d 	bl	80097f2 <__retarget_lock_release_recursive>
 80092b8:	89ab      	ldrh	r3, [r5, #12]
 80092ba:	065b      	lsls	r3, r3, #25
 80092bc:	f53f af12 	bmi.w	80090e4 <_vfiprintf_r+0x4c>
 80092c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092c2:	e711      	b.n	80090e8 <_vfiprintf_r+0x50>
 80092c4:	ab03      	add	r3, sp, #12
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	462a      	mov	r2, r5
 80092ca:	4630      	mov	r0, r6
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <_vfiprintf_r+0x25c>)
 80092ce:	a904      	add	r1, sp, #16
 80092d0:	f7fc fb08 	bl	80058e4 <_printf_i>
 80092d4:	e7e4      	b.n	80092a0 <_vfiprintf_r+0x208>
 80092d6:	bf00      	nop
 80092d8:	08009ffc 	.word	0x08009ffc
 80092dc:	0800a01c 	.word	0x0800a01c
 80092e0:	08009fdc 	.word	0x08009fdc
 80092e4:	08009f8c 	.word	0x08009f8c
 80092e8:	08009f92 	.word	0x08009f92
 80092ec:	08009f96 	.word	0x08009f96
 80092f0:	080053ad 	.word	0x080053ad
 80092f4:	08009075 	.word	0x08009075

080092f8 <__swbuf_r>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	460e      	mov	r6, r1
 80092fc:	4614      	mov	r4, r2
 80092fe:	4605      	mov	r5, r0
 8009300:	b118      	cbz	r0, 800930a <__swbuf_r+0x12>
 8009302:	6983      	ldr	r3, [r0, #24]
 8009304:	b90b      	cbnz	r3, 800930a <__swbuf_r+0x12>
 8009306:	f000 f9d5 	bl	80096b4 <__sinit>
 800930a:	4b21      	ldr	r3, [pc, #132]	; (8009390 <__swbuf_r+0x98>)
 800930c:	429c      	cmp	r4, r3
 800930e:	d12b      	bne.n	8009368 <__swbuf_r+0x70>
 8009310:	686c      	ldr	r4, [r5, #4]
 8009312:	69a3      	ldr	r3, [r4, #24]
 8009314:	60a3      	str	r3, [r4, #8]
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	071a      	lsls	r2, r3, #28
 800931a:	d52f      	bpl.n	800937c <__swbuf_r+0x84>
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	b36b      	cbz	r3, 800937c <__swbuf_r+0x84>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	6820      	ldr	r0, [r4, #0]
 8009324:	b2f6      	uxtb	r6, r6
 8009326:	1ac0      	subs	r0, r0, r3
 8009328:	6963      	ldr	r3, [r4, #20]
 800932a:	4637      	mov	r7, r6
 800932c:	4283      	cmp	r3, r0
 800932e:	dc04      	bgt.n	800933a <__swbuf_r+0x42>
 8009330:	4621      	mov	r1, r4
 8009332:	4628      	mov	r0, r5
 8009334:	f000 f92a 	bl	800958c <_fflush_r>
 8009338:	bb30      	cbnz	r0, 8009388 <__swbuf_r+0x90>
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	3001      	adds	r0, #1
 800933e:	3b01      	subs	r3, #1
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	6022      	str	r2, [r4, #0]
 8009348:	701e      	strb	r6, [r3, #0]
 800934a:	6963      	ldr	r3, [r4, #20]
 800934c:	4283      	cmp	r3, r0
 800934e:	d004      	beq.n	800935a <__swbuf_r+0x62>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	07db      	lsls	r3, r3, #31
 8009354:	d506      	bpl.n	8009364 <__swbuf_r+0x6c>
 8009356:	2e0a      	cmp	r6, #10
 8009358:	d104      	bne.n	8009364 <__swbuf_r+0x6c>
 800935a:	4621      	mov	r1, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f000 f915 	bl	800958c <_fflush_r>
 8009362:	b988      	cbnz	r0, 8009388 <__swbuf_r+0x90>
 8009364:	4638      	mov	r0, r7
 8009366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009368:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <__swbuf_r+0x9c>)
 800936a:	429c      	cmp	r4, r3
 800936c:	d101      	bne.n	8009372 <__swbuf_r+0x7a>
 800936e:	68ac      	ldr	r4, [r5, #8]
 8009370:	e7cf      	b.n	8009312 <__swbuf_r+0x1a>
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <__swbuf_r+0xa0>)
 8009374:	429c      	cmp	r4, r3
 8009376:	bf08      	it	eq
 8009378:	68ec      	ldreq	r4, [r5, #12]
 800937a:	e7ca      	b.n	8009312 <__swbuf_r+0x1a>
 800937c:	4621      	mov	r1, r4
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f80c 	bl	800939c <__swsetup_r>
 8009384:	2800      	cmp	r0, #0
 8009386:	d0cb      	beq.n	8009320 <__swbuf_r+0x28>
 8009388:	f04f 37ff 	mov.w	r7, #4294967295
 800938c:	e7ea      	b.n	8009364 <__swbuf_r+0x6c>
 800938e:	bf00      	nop
 8009390:	08009ffc 	.word	0x08009ffc
 8009394:	0800a01c 	.word	0x0800a01c
 8009398:	08009fdc 	.word	0x08009fdc

0800939c <__swsetup_r>:
 800939c:	4b32      	ldr	r3, [pc, #200]	; (8009468 <__swsetup_r+0xcc>)
 800939e:	b570      	push	{r4, r5, r6, lr}
 80093a0:	681d      	ldr	r5, [r3, #0]
 80093a2:	4606      	mov	r6, r0
 80093a4:	460c      	mov	r4, r1
 80093a6:	b125      	cbz	r5, 80093b2 <__swsetup_r+0x16>
 80093a8:	69ab      	ldr	r3, [r5, #24]
 80093aa:	b913      	cbnz	r3, 80093b2 <__swsetup_r+0x16>
 80093ac:	4628      	mov	r0, r5
 80093ae:	f000 f981 	bl	80096b4 <__sinit>
 80093b2:	4b2e      	ldr	r3, [pc, #184]	; (800946c <__swsetup_r+0xd0>)
 80093b4:	429c      	cmp	r4, r3
 80093b6:	d10f      	bne.n	80093d8 <__swsetup_r+0x3c>
 80093b8:	686c      	ldr	r4, [r5, #4]
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093c0:	0719      	lsls	r1, r3, #28
 80093c2:	d42c      	bmi.n	800941e <__swsetup_r+0x82>
 80093c4:	06dd      	lsls	r5, r3, #27
 80093c6:	d411      	bmi.n	80093ec <__swsetup_r+0x50>
 80093c8:	2309      	movs	r3, #9
 80093ca:	6033      	str	r3, [r6, #0]
 80093cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	e03e      	b.n	8009456 <__swsetup_r+0xba>
 80093d8:	4b25      	ldr	r3, [pc, #148]	; (8009470 <__swsetup_r+0xd4>)
 80093da:	429c      	cmp	r4, r3
 80093dc:	d101      	bne.n	80093e2 <__swsetup_r+0x46>
 80093de:	68ac      	ldr	r4, [r5, #8]
 80093e0:	e7eb      	b.n	80093ba <__swsetup_r+0x1e>
 80093e2:	4b24      	ldr	r3, [pc, #144]	; (8009474 <__swsetup_r+0xd8>)
 80093e4:	429c      	cmp	r4, r3
 80093e6:	bf08      	it	eq
 80093e8:	68ec      	ldreq	r4, [r5, #12]
 80093ea:	e7e6      	b.n	80093ba <__swsetup_r+0x1e>
 80093ec:	0758      	lsls	r0, r3, #29
 80093ee:	d512      	bpl.n	8009416 <__swsetup_r+0x7a>
 80093f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093f2:	b141      	cbz	r1, 8009406 <__swsetup_r+0x6a>
 80093f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093f8:	4299      	cmp	r1, r3
 80093fa:	d002      	beq.n	8009402 <__swsetup_r+0x66>
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7ff fb2f 	bl	8008a60 <_free_r>
 8009402:	2300      	movs	r3, #0
 8009404:	6363      	str	r3, [r4, #52]	; 0x34
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800940c:	81a3      	strh	r3, [r4, #12]
 800940e:	2300      	movs	r3, #0
 8009410:	6063      	str	r3, [r4, #4]
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	f043 0308 	orr.w	r3, r3, #8
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	b94b      	cbnz	r3, 8009436 <__swsetup_r+0x9a>
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800942c:	d003      	beq.n	8009436 <__swsetup_r+0x9a>
 800942e:	4621      	mov	r1, r4
 8009430:	4630      	mov	r0, r6
 8009432:	f000 fa05 	bl	8009840 <__smakebuf_r>
 8009436:	89a0      	ldrh	r0, [r4, #12]
 8009438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800943c:	f010 0301 	ands.w	r3, r0, #1
 8009440:	d00a      	beq.n	8009458 <__swsetup_r+0xbc>
 8009442:	2300      	movs	r3, #0
 8009444:	60a3      	str	r3, [r4, #8]
 8009446:	6963      	ldr	r3, [r4, #20]
 8009448:	425b      	negs	r3, r3
 800944a:	61a3      	str	r3, [r4, #24]
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	b943      	cbnz	r3, 8009462 <__swsetup_r+0xc6>
 8009450:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009454:	d1ba      	bne.n	80093cc <__swsetup_r+0x30>
 8009456:	bd70      	pop	{r4, r5, r6, pc}
 8009458:	0781      	lsls	r1, r0, #30
 800945a:	bf58      	it	pl
 800945c:	6963      	ldrpl	r3, [r4, #20]
 800945e:	60a3      	str	r3, [r4, #8]
 8009460:	e7f4      	b.n	800944c <__swsetup_r+0xb0>
 8009462:	2000      	movs	r0, #0
 8009464:	e7f7      	b.n	8009456 <__swsetup_r+0xba>
 8009466:	bf00      	nop
 8009468:	20000010 	.word	0x20000010
 800946c:	08009ffc 	.word	0x08009ffc
 8009470:	0800a01c 	.word	0x0800a01c
 8009474:	08009fdc 	.word	0x08009fdc

08009478 <abort>:
 8009478:	2006      	movs	r0, #6
 800947a:	b508      	push	{r3, lr}
 800947c:	f000 fa50 	bl	8009920 <raise>
 8009480:	2001      	movs	r0, #1
 8009482:	f7f7 ff8a 	bl	800139a <_exit>
	...

08009488 <__sflush_r>:
 8009488:	898a      	ldrh	r2, [r1, #12]
 800948a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948c:	4605      	mov	r5, r0
 800948e:	0710      	lsls	r0, r2, #28
 8009490:	460c      	mov	r4, r1
 8009492:	d457      	bmi.n	8009544 <__sflush_r+0xbc>
 8009494:	684b      	ldr	r3, [r1, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	dc04      	bgt.n	80094a4 <__sflush_r+0x1c>
 800949a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	dc01      	bgt.n	80094a4 <__sflush_r+0x1c>
 80094a0:	2000      	movs	r0, #0
 80094a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094a6:	2e00      	cmp	r6, #0
 80094a8:	d0fa      	beq.n	80094a0 <__sflush_r+0x18>
 80094aa:	2300      	movs	r3, #0
 80094ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094b0:	682f      	ldr	r7, [r5, #0]
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	d032      	beq.n	800951c <__sflush_r+0x94>
 80094b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	075a      	lsls	r2, r3, #29
 80094bc:	d505      	bpl.n	80094ca <__sflush_r+0x42>
 80094be:	6863      	ldr	r3, [r4, #4]
 80094c0:	1ac0      	subs	r0, r0, r3
 80094c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094c4:	b10b      	cbz	r3, 80094ca <__sflush_r+0x42>
 80094c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094c8:	1ac0      	subs	r0, r0, r3
 80094ca:	2300      	movs	r3, #0
 80094cc:	4602      	mov	r2, r0
 80094ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094d0:	4628      	mov	r0, r5
 80094d2:	6a21      	ldr	r1, [r4, #32]
 80094d4:	47b0      	blx	r6
 80094d6:	1c43      	adds	r3, r0, #1
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	d106      	bne.n	80094ea <__sflush_r+0x62>
 80094dc:	6829      	ldr	r1, [r5, #0]
 80094de:	291d      	cmp	r1, #29
 80094e0:	d82c      	bhi.n	800953c <__sflush_r+0xb4>
 80094e2:	4a29      	ldr	r2, [pc, #164]	; (8009588 <__sflush_r+0x100>)
 80094e4:	40ca      	lsrs	r2, r1
 80094e6:	07d6      	lsls	r6, r2, #31
 80094e8:	d528      	bpl.n	800953c <__sflush_r+0xb4>
 80094ea:	2200      	movs	r2, #0
 80094ec:	6062      	str	r2, [r4, #4]
 80094ee:	6922      	ldr	r2, [r4, #16]
 80094f0:	04d9      	lsls	r1, r3, #19
 80094f2:	6022      	str	r2, [r4, #0]
 80094f4:	d504      	bpl.n	8009500 <__sflush_r+0x78>
 80094f6:	1c42      	adds	r2, r0, #1
 80094f8:	d101      	bne.n	80094fe <__sflush_r+0x76>
 80094fa:	682b      	ldr	r3, [r5, #0]
 80094fc:	b903      	cbnz	r3, 8009500 <__sflush_r+0x78>
 80094fe:	6560      	str	r0, [r4, #84]	; 0x54
 8009500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009502:	602f      	str	r7, [r5, #0]
 8009504:	2900      	cmp	r1, #0
 8009506:	d0cb      	beq.n	80094a0 <__sflush_r+0x18>
 8009508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800950c:	4299      	cmp	r1, r3
 800950e:	d002      	beq.n	8009516 <__sflush_r+0x8e>
 8009510:	4628      	mov	r0, r5
 8009512:	f7ff faa5 	bl	8008a60 <_free_r>
 8009516:	2000      	movs	r0, #0
 8009518:	6360      	str	r0, [r4, #52]	; 0x34
 800951a:	e7c2      	b.n	80094a2 <__sflush_r+0x1a>
 800951c:	6a21      	ldr	r1, [r4, #32]
 800951e:	2301      	movs	r3, #1
 8009520:	4628      	mov	r0, r5
 8009522:	47b0      	blx	r6
 8009524:	1c41      	adds	r1, r0, #1
 8009526:	d1c7      	bne.n	80094b8 <__sflush_r+0x30>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0c4      	beq.n	80094b8 <__sflush_r+0x30>
 800952e:	2b1d      	cmp	r3, #29
 8009530:	d001      	beq.n	8009536 <__sflush_r+0xae>
 8009532:	2b16      	cmp	r3, #22
 8009534:	d101      	bne.n	800953a <__sflush_r+0xb2>
 8009536:	602f      	str	r7, [r5, #0]
 8009538:	e7b2      	b.n	80094a0 <__sflush_r+0x18>
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009540:	81a3      	strh	r3, [r4, #12]
 8009542:	e7ae      	b.n	80094a2 <__sflush_r+0x1a>
 8009544:	690f      	ldr	r7, [r1, #16]
 8009546:	2f00      	cmp	r7, #0
 8009548:	d0aa      	beq.n	80094a0 <__sflush_r+0x18>
 800954a:	0793      	lsls	r3, r2, #30
 800954c:	bf18      	it	ne
 800954e:	2300      	movne	r3, #0
 8009550:	680e      	ldr	r6, [r1, #0]
 8009552:	bf08      	it	eq
 8009554:	694b      	ldreq	r3, [r1, #20]
 8009556:	1bf6      	subs	r6, r6, r7
 8009558:	600f      	str	r7, [r1, #0]
 800955a:	608b      	str	r3, [r1, #8]
 800955c:	2e00      	cmp	r6, #0
 800955e:	dd9f      	ble.n	80094a0 <__sflush_r+0x18>
 8009560:	4633      	mov	r3, r6
 8009562:	463a      	mov	r2, r7
 8009564:	4628      	mov	r0, r5
 8009566:	6a21      	ldr	r1, [r4, #32]
 8009568:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800956c:	47e0      	blx	ip
 800956e:	2800      	cmp	r0, #0
 8009570:	dc06      	bgt.n	8009580 <__sflush_r+0xf8>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	f04f 30ff 	mov.w	r0, #4294967295
 8009578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	e790      	b.n	80094a2 <__sflush_r+0x1a>
 8009580:	4407      	add	r7, r0
 8009582:	1a36      	subs	r6, r6, r0
 8009584:	e7ea      	b.n	800955c <__sflush_r+0xd4>
 8009586:	bf00      	nop
 8009588:	20400001 	.word	0x20400001

0800958c <_fflush_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	690b      	ldr	r3, [r1, #16]
 8009590:	4605      	mov	r5, r0
 8009592:	460c      	mov	r4, r1
 8009594:	b913      	cbnz	r3, 800959c <_fflush_r+0x10>
 8009596:	2500      	movs	r5, #0
 8009598:	4628      	mov	r0, r5
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	b118      	cbz	r0, 80095a6 <_fflush_r+0x1a>
 800959e:	6983      	ldr	r3, [r0, #24]
 80095a0:	b90b      	cbnz	r3, 80095a6 <_fflush_r+0x1a>
 80095a2:	f000 f887 	bl	80096b4 <__sinit>
 80095a6:	4b14      	ldr	r3, [pc, #80]	; (80095f8 <_fflush_r+0x6c>)
 80095a8:	429c      	cmp	r4, r3
 80095aa:	d11b      	bne.n	80095e4 <_fflush_r+0x58>
 80095ac:	686c      	ldr	r4, [r5, #4]
 80095ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0ef      	beq.n	8009596 <_fflush_r+0xa>
 80095b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095b8:	07d0      	lsls	r0, r2, #31
 80095ba:	d404      	bmi.n	80095c6 <_fflush_r+0x3a>
 80095bc:	0599      	lsls	r1, r3, #22
 80095be:	d402      	bmi.n	80095c6 <_fflush_r+0x3a>
 80095c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095c2:	f000 f915 	bl	80097f0 <__retarget_lock_acquire_recursive>
 80095c6:	4628      	mov	r0, r5
 80095c8:	4621      	mov	r1, r4
 80095ca:	f7ff ff5d 	bl	8009488 <__sflush_r>
 80095ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095d0:	4605      	mov	r5, r0
 80095d2:	07da      	lsls	r2, r3, #31
 80095d4:	d4e0      	bmi.n	8009598 <_fflush_r+0xc>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	059b      	lsls	r3, r3, #22
 80095da:	d4dd      	bmi.n	8009598 <_fflush_r+0xc>
 80095dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095de:	f000 f908 	bl	80097f2 <__retarget_lock_release_recursive>
 80095e2:	e7d9      	b.n	8009598 <_fflush_r+0xc>
 80095e4:	4b05      	ldr	r3, [pc, #20]	; (80095fc <_fflush_r+0x70>)
 80095e6:	429c      	cmp	r4, r3
 80095e8:	d101      	bne.n	80095ee <_fflush_r+0x62>
 80095ea:	68ac      	ldr	r4, [r5, #8]
 80095ec:	e7df      	b.n	80095ae <_fflush_r+0x22>
 80095ee:	4b04      	ldr	r3, [pc, #16]	; (8009600 <_fflush_r+0x74>)
 80095f0:	429c      	cmp	r4, r3
 80095f2:	bf08      	it	eq
 80095f4:	68ec      	ldreq	r4, [r5, #12]
 80095f6:	e7da      	b.n	80095ae <_fflush_r+0x22>
 80095f8:	08009ffc 	.word	0x08009ffc
 80095fc:	0800a01c 	.word	0x0800a01c
 8009600:	08009fdc 	.word	0x08009fdc

08009604 <std>:
 8009604:	2300      	movs	r3, #0
 8009606:	b510      	push	{r4, lr}
 8009608:	4604      	mov	r4, r0
 800960a:	e9c0 3300 	strd	r3, r3, [r0]
 800960e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009612:	6083      	str	r3, [r0, #8]
 8009614:	8181      	strh	r1, [r0, #12]
 8009616:	6643      	str	r3, [r0, #100]	; 0x64
 8009618:	81c2      	strh	r2, [r0, #14]
 800961a:	6183      	str	r3, [r0, #24]
 800961c:	4619      	mov	r1, r3
 800961e:	2208      	movs	r2, #8
 8009620:	305c      	adds	r0, #92	; 0x5c
 8009622:	f7fb fe1d 	bl	8005260 <memset>
 8009626:	4b05      	ldr	r3, [pc, #20]	; (800963c <std+0x38>)
 8009628:	6224      	str	r4, [r4, #32]
 800962a:	6263      	str	r3, [r4, #36]	; 0x24
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <std+0x3c>)
 800962e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <std+0x40>)
 8009632:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009634:	4b04      	ldr	r3, [pc, #16]	; (8009648 <std+0x44>)
 8009636:	6323      	str	r3, [r4, #48]	; 0x30
 8009638:	bd10      	pop	{r4, pc}
 800963a:	bf00      	nop
 800963c:	08009959 	.word	0x08009959
 8009640:	0800997b 	.word	0x0800997b
 8009644:	080099b3 	.word	0x080099b3
 8009648:	080099d7 	.word	0x080099d7

0800964c <_cleanup_r>:
 800964c:	4901      	ldr	r1, [pc, #4]	; (8009654 <_cleanup_r+0x8>)
 800964e:	f000 b8af 	b.w	80097b0 <_fwalk_reent>
 8009652:	bf00      	nop
 8009654:	0800958d 	.word	0x0800958d

08009658 <__sfmoreglue>:
 8009658:	2268      	movs	r2, #104	; 0x68
 800965a:	b570      	push	{r4, r5, r6, lr}
 800965c:	1e4d      	subs	r5, r1, #1
 800965e:	4355      	muls	r5, r2
 8009660:	460e      	mov	r6, r1
 8009662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009666:	f7ff fa63 	bl	8008b30 <_malloc_r>
 800966a:	4604      	mov	r4, r0
 800966c:	b140      	cbz	r0, 8009680 <__sfmoreglue+0x28>
 800966e:	2100      	movs	r1, #0
 8009670:	e9c0 1600 	strd	r1, r6, [r0]
 8009674:	300c      	adds	r0, #12
 8009676:	60a0      	str	r0, [r4, #8]
 8009678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800967c:	f7fb fdf0 	bl	8005260 <memset>
 8009680:	4620      	mov	r0, r4
 8009682:	bd70      	pop	{r4, r5, r6, pc}

08009684 <__sfp_lock_acquire>:
 8009684:	4801      	ldr	r0, [pc, #4]	; (800968c <__sfp_lock_acquire+0x8>)
 8009686:	f000 b8b3 	b.w	80097f0 <__retarget_lock_acquire_recursive>
 800968a:	bf00      	nop
 800968c:	20001239 	.word	0x20001239

08009690 <__sfp_lock_release>:
 8009690:	4801      	ldr	r0, [pc, #4]	; (8009698 <__sfp_lock_release+0x8>)
 8009692:	f000 b8ae 	b.w	80097f2 <__retarget_lock_release_recursive>
 8009696:	bf00      	nop
 8009698:	20001239 	.word	0x20001239

0800969c <__sinit_lock_acquire>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__sinit_lock_acquire+0x8>)
 800969e:	f000 b8a7 	b.w	80097f0 <__retarget_lock_acquire_recursive>
 80096a2:	bf00      	nop
 80096a4:	2000123a 	.word	0x2000123a

080096a8 <__sinit_lock_release>:
 80096a8:	4801      	ldr	r0, [pc, #4]	; (80096b0 <__sinit_lock_release+0x8>)
 80096aa:	f000 b8a2 	b.w	80097f2 <__retarget_lock_release_recursive>
 80096ae:	bf00      	nop
 80096b0:	2000123a 	.word	0x2000123a

080096b4 <__sinit>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	4604      	mov	r4, r0
 80096b8:	f7ff fff0 	bl	800969c <__sinit_lock_acquire>
 80096bc:	69a3      	ldr	r3, [r4, #24]
 80096be:	b11b      	cbz	r3, 80096c8 <__sinit+0x14>
 80096c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c4:	f7ff bff0 	b.w	80096a8 <__sinit_lock_release>
 80096c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096cc:	6523      	str	r3, [r4, #80]	; 0x50
 80096ce:	4b13      	ldr	r3, [pc, #76]	; (800971c <__sinit+0x68>)
 80096d0:	4a13      	ldr	r2, [pc, #76]	; (8009720 <__sinit+0x6c>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80096d6:	42a3      	cmp	r3, r4
 80096d8:	bf08      	it	eq
 80096da:	2301      	moveq	r3, #1
 80096dc:	4620      	mov	r0, r4
 80096de:	bf08      	it	eq
 80096e0:	61a3      	streq	r3, [r4, #24]
 80096e2:	f000 f81f 	bl	8009724 <__sfp>
 80096e6:	6060      	str	r0, [r4, #4]
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 f81b 	bl	8009724 <__sfp>
 80096ee:	60a0      	str	r0, [r4, #8]
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 f817 	bl	8009724 <__sfp>
 80096f6:	2200      	movs	r2, #0
 80096f8:	2104      	movs	r1, #4
 80096fa:	60e0      	str	r0, [r4, #12]
 80096fc:	6860      	ldr	r0, [r4, #4]
 80096fe:	f7ff ff81 	bl	8009604 <std>
 8009702:	2201      	movs	r2, #1
 8009704:	2109      	movs	r1, #9
 8009706:	68a0      	ldr	r0, [r4, #8]
 8009708:	f7ff ff7c 	bl	8009604 <std>
 800970c:	2202      	movs	r2, #2
 800970e:	2112      	movs	r1, #18
 8009710:	68e0      	ldr	r0, [r4, #12]
 8009712:	f7ff ff77 	bl	8009604 <std>
 8009716:	2301      	movs	r3, #1
 8009718:	61a3      	str	r3, [r4, #24]
 800971a:	e7d1      	b.n	80096c0 <__sinit+0xc>
 800971c:	08009b94 	.word	0x08009b94
 8009720:	0800964d 	.word	0x0800964d

08009724 <__sfp>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	4607      	mov	r7, r0
 8009728:	f7ff ffac 	bl	8009684 <__sfp_lock_acquire>
 800972c:	4b1e      	ldr	r3, [pc, #120]	; (80097a8 <__sfp+0x84>)
 800972e:	681e      	ldr	r6, [r3, #0]
 8009730:	69b3      	ldr	r3, [r6, #24]
 8009732:	b913      	cbnz	r3, 800973a <__sfp+0x16>
 8009734:	4630      	mov	r0, r6
 8009736:	f7ff ffbd 	bl	80096b4 <__sinit>
 800973a:	3648      	adds	r6, #72	; 0x48
 800973c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009740:	3b01      	subs	r3, #1
 8009742:	d503      	bpl.n	800974c <__sfp+0x28>
 8009744:	6833      	ldr	r3, [r6, #0]
 8009746:	b30b      	cbz	r3, 800978c <__sfp+0x68>
 8009748:	6836      	ldr	r6, [r6, #0]
 800974a:	e7f7      	b.n	800973c <__sfp+0x18>
 800974c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009750:	b9d5      	cbnz	r5, 8009788 <__sfp+0x64>
 8009752:	4b16      	ldr	r3, [pc, #88]	; (80097ac <__sfp+0x88>)
 8009754:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009758:	60e3      	str	r3, [r4, #12]
 800975a:	6665      	str	r5, [r4, #100]	; 0x64
 800975c:	f000 f847 	bl	80097ee <__retarget_lock_init_recursive>
 8009760:	f7ff ff96 	bl	8009690 <__sfp_lock_release>
 8009764:	2208      	movs	r2, #8
 8009766:	4629      	mov	r1, r5
 8009768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800976c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009770:	6025      	str	r5, [r4, #0]
 8009772:	61a5      	str	r5, [r4, #24]
 8009774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009778:	f7fb fd72 	bl	8005260 <memset>
 800977c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009780:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009784:	4620      	mov	r0, r4
 8009786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009788:	3468      	adds	r4, #104	; 0x68
 800978a:	e7d9      	b.n	8009740 <__sfp+0x1c>
 800978c:	2104      	movs	r1, #4
 800978e:	4638      	mov	r0, r7
 8009790:	f7ff ff62 	bl	8009658 <__sfmoreglue>
 8009794:	4604      	mov	r4, r0
 8009796:	6030      	str	r0, [r6, #0]
 8009798:	2800      	cmp	r0, #0
 800979a:	d1d5      	bne.n	8009748 <__sfp+0x24>
 800979c:	f7ff ff78 	bl	8009690 <__sfp_lock_release>
 80097a0:	230c      	movs	r3, #12
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	e7ee      	b.n	8009784 <__sfp+0x60>
 80097a6:	bf00      	nop
 80097a8:	08009b94 	.word	0x08009b94
 80097ac:	ffff0001 	.word	0xffff0001

080097b0 <_fwalk_reent>:
 80097b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b4:	4606      	mov	r6, r0
 80097b6:	4688      	mov	r8, r1
 80097b8:	2700      	movs	r7, #0
 80097ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097c2:	f1b9 0901 	subs.w	r9, r9, #1
 80097c6:	d505      	bpl.n	80097d4 <_fwalk_reent+0x24>
 80097c8:	6824      	ldr	r4, [r4, #0]
 80097ca:	2c00      	cmp	r4, #0
 80097cc:	d1f7      	bne.n	80097be <_fwalk_reent+0xe>
 80097ce:	4638      	mov	r0, r7
 80097d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d4:	89ab      	ldrh	r3, [r5, #12]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d907      	bls.n	80097ea <_fwalk_reent+0x3a>
 80097da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097de:	3301      	adds	r3, #1
 80097e0:	d003      	beq.n	80097ea <_fwalk_reent+0x3a>
 80097e2:	4629      	mov	r1, r5
 80097e4:	4630      	mov	r0, r6
 80097e6:	47c0      	blx	r8
 80097e8:	4307      	orrs	r7, r0
 80097ea:	3568      	adds	r5, #104	; 0x68
 80097ec:	e7e9      	b.n	80097c2 <_fwalk_reent+0x12>

080097ee <__retarget_lock_init_recursive>:
 80097ee:	4770      	bx	lr

080097f0 <__retarget_lock_acquire_recursive>:
 80097f0:	4770      	bx	lr

080097f2 <__retarget_lock_release_recursive>:
 80097f2:	4770      	bx	lr

080097f4 <__swhatbuf_r>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	460e      	mov	r6, r1
 80097f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fc:	4614      	mov	r4, r2
 80097fe:	2900      	cmp	r1, #0
 8009800:	461d      	mov	r5, r3
 8009802:	b096      	sub	sp, #88	; 0x58
 8009804:	da08      	bge.n	8009818 <__swhatbuf_r+0x24>
 8009806:	2200      	movs	r2, #0
 8009808:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800980c:	602a      	str	r2, [r5, #0]
 800980e:	061a      	lsls	r2, r3, #24
 8009810:	d410      	bmi.n	8009834 <__swhatbuf_r+0x40>
 8009812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009816:	e00e      	b.n	8009836 <__swhatbuf_r+0x42>
 8009818:	466a      	mov	r2, sp
 800981a:	f000 f903 	bl	8009a24 <_fstat_r>
 800981e:	2800      	cmp	r0, #0
 8009820:	dbf1      	blt.n	8009806 <__swhatbuf_r+0x12>
 8009822:	9a01      	ldr	r2, [sp, #4]
 8009824:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009828:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800982c:	425a      	negs	r2, r3
 800982e:	415a      	adcs	r2, r3
 8009830:	602a      	str	r2, [r5, #0]
 8009832:	e7ee      	b.n	8009812 <__swhatbuf_r+0x1e>
 8009834:	2340      	movs	r3, #64	; 0x40
 8009836:	2000      	movs	r0, #0
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	b016      	add	sp, #88	; 0x58
 800983c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009840 <__smakebuf_r>:
 8009840:	898b      	ldrh	r3, [r1, #12]
 8009842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009844:	079d      	lsls	r5, r3, #30
 8009846:	4606      	mov	r6, r0
 8009848:	460c      	mov	r4, r1
 800984a:	d507      	bpl.n	800985c <__smakebuf_r+0x1c>
 800984c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	2301      	movs	r3, #1
 8009856:	6163      	str	r3, [r4, #20]
 8009858:	b002      	add	sp, #8
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	466a      	mov	r2, sp
 800985e:	ab01      	add	r3, sp, #4
 8009860:	f7ff ffc8 	bl	80097f4 <__swhatbuf_r>
 8009864:	9900      	ldr	r1, [sp, #0]
 8009866:	4605      	mov	r5, r0
 8009868:	4630      	mov	r0, r6
 800986a:	f7ff f961 	bl	8008b30 <_malloc_r>
 800986e:	b948      	cbnz	r0, 8009884 <__smakebuf_r+0x44>
 8009870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009874:	059a      	lsls	r2, r3, #22
 8009876:	d4ef      	bmi.n	8009858 <__smakebuf_r+0x18>
 8009878:	f023 0303 	bic.w	r3, r3, #3
 800987c:	f043 0302 	orr.w	r3, r3, #2
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	e7e3      	b.n	800984c <__smakebuf_r+0xc>
 8009884:	4b0d      	ldr	r3, [pc, #52]	; (80098bc <__smakebuf_r+0x7c>)
 8009886:	62b3      	str	r3, [r6, #40]	; 0x28
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	6020      	str	r0, [r4, #0]
 800988c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009890:	81a3      	strh	r3, [r4, #12]
 8009892:	9b00      	ldr	r3, [sp, #0]
 8009894:	6120      	str	r0, [r4, #16]
 8009896:	6163      	str	r3, [r4, #20]
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	b15b      	cbz	r3, 80098b4 <__smakebuf_r+0x74>
 800989c:	4630      	mov	r0, r6
 800989e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098a2:	f000 f8d1 	bl	8009a48 <_isatty_r>
 80098a6:	b128      	cbz	r0, 80098b4 <__smakebuf_r+0x74>
 80098a8:	89a3      	ldrh	r3, [r4, #12]
 80098aa:	f023 0303 	bic.w	r3, r3, #3
 80098ae:	f043 0301 	orr.w	r3, r3, #1
 80098b2:	81a3      	strh	r3, [r4, #12]
 80098b4:	89a0      	ldrh	r0, [r4, #12]
 80098b6:	4305      	orrs	r5, r0
 80098b8:	81a5      	strh	r5, [r4, #12]
 80098ba:	e7cd      	b.n	8009858 <__smakebuf_r+0x18>
 80098bc:	0800964d 	.word	0x0800964d

080098c0 <_malloc_usable_size_r>:
 80098c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098c4:	1f18      	subs	r0, r3, #4
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	bfbc      	itt	lt
 80098ca:	580b      	ldrlt	r3, [r1, r0]
 80098cc:	18c0      	addlt	r0, r0, r3
 80098ce:	4770      	bx	lr

080098d0 <_raise_r>:
 80098d0:	291f      	cmp	r1, #31
 80098d2:	b538      	push	{r3, r4, r5, lr}
 80098d4:	4604      	mov	r4, r0
 80098d6:	460d      	mov	r5, r1
 80098d8:	d904      	bls.n	80098e4 <_raise_r+0x14>
 80098da:	2316      	movs	r3, #22
 80098dc:	6003      	str	r3, [r0, #0]
 80098de:	f04f 30ff 	mov.w	r0, #4294967295
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098e6:	b112      	cbz	r2, 80098ee <_raise_r+0x1e>
 80098e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098ec:	b94b      	cbnz	r3, 8009902 <_raise_r+0x32>
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 f830 	bl	8009954 <_getpid_r>
 80098f4:	462a      	mov	r2, r5
 80098f6:	4601      	mov	r1, r0
 80098f8:	4620      	mov	r0, r4
 80098fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098fe:	f000 b817 	b.w	8009930 <_kill_r>
 8009902:	2b01      	cmp	r3, #1
 8009904:	d00a      	beq.n	800991c <_raise_r+0x4c>
 8009906:	1c59      	adds	r1, r3, #1
 8009908:	d103      	bne.n	8009912 <_raise_r+0x42>
 800990a:	2316      	movs	r3, #22
 800990c:	6003      	str	r3, [r0, #0]
 800990e:	2001      	movs	r0, #1
 8009910:	e7e7      	b.n	80098e2 <_raise_r+0x12>
 8009912:	2400      	movs	r4, #0
 8009914:	4628      	mov	r0, r5
 8009916:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800991a:	4798      	blx	r3
 800991c:	2000      	movs	r0, #0
 800991e:	e7e0      	b.n	80098e2 <_raise_r+0x12>

08009920 <raise>:
 8009920:	4b02      	ldr	r3, [pc, #8]	; (800992c <raise+0xc>)
 8009922:	4601      	mov	r1, r0
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	f7ff bfd3 	b.w	80098d0 <_raise_r>
 800992a:	bf00      	nop
 800992c:	20000010 	.word	0x20000010

08009930 <_kill_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	2300      	movs	r3, #0
 8009934:	4d06      	ldr	r5, [pc, #24]	; (8009950 <_kill_r+0x20>)
 8009936:	4604      	mov	r4, r0
 8009938:	4608      	mov	r0, r1
 800993a:	4611      	mov	r1, r2
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	f7f7 fd1c 	bl	800137a <_kill>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	d102      	bne.n	800994c <_kill_r+0x1c>
 8009946:	682b      	ldr	r3, [r5, #0]
 8009948:	b103      	cbz	r3, 800994c <_kill_r+0x1c>
 800994a:	6023      	str	r3, [r4, #0]
 800994c:	bd38      	pop	{r3, r4, r5, pc}
 800994e:	bf00      	nop
 8009950:	20001234 	.word	0x20001234

08009954 <_getpid_r>:
 8009954:	f7f7 bd0a 	b.w	800136c <_getpid>

08009958 <__sread>:
 8009958:	b510      	push	{r4, lr}
 800995a:	460c      	mov	r4, r1
 800995c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009960:	f000 f894 	bl	8009a8c <_read_r>
 8009964:	2800      	cmp	r0, #0
 8009966:	bfab      	itete	ge
 8009968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800996a:	89a3      	ldrhlt	r3, [r4, #12]
 800996c:	181b      	addge	r3, r3, r0
 800996e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009972:	bfac      	ite	ge
 8009974:	6563      	strge	r3, [r4, #84]	; 0x54
 8009976:	81a3      	strhlt	r3, [r4, #12]
 8009978:	bd10      	pop	{r4, pc}

0800997a <__swrite>:
 800997a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997e:	461f      	mov	r7, r3
 8009980:	898b      	ldrh	r3, [r1, #12]
 8009982:	4605      	mov	r5, r0
 8009984:	05db      	lsls	r3, r3, #23
 8009986:	460c      	mov	r4, r1
 8009988:	4616      	mov	r6, r2
 800998a:	d505      	bpl.n	8009998 <__swrite+0x1e>
 800998c:	2302      	movs	r3, #2
 800998e:	2200      	movs	r2, #0
 8009990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009994:	f000 f868 	bl	8009a68 <_lseek_r>
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	4632      	mov	r2, r6
 800999c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	4628      	mov	r0, r5
 80099a4:	463b      	mov	r3, r7
 80099a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ae:	f000 b817 	b.w	80099e0 <_write_r>

080099b2 <__sseek>:
 80099b2:	b510      	push	{r4, lr}
 80099b4:	460c      	mov	r4, r1
 80099b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ba:	f000 f855 	bl	8009a68 <_lseek_r>
 80099be:	1c43      	adds	r3, r0, #1
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	bf15      	itete	ne
 80099c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80099c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099ce:	81a3      	strheq	r3, [r4, #12]
 80099d0:	bf18      	it	ne
 80099d2:	81a3      	strhne	r3, [r4, #12]
 80099d4:	bd10      	pop	{r4, pc}

080099d6 <__sclose>:
 80099d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099da:	f000 b813 	b.w	8009a04 <_close_r>
	...

080099e0 <_write_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	2200      	movs	r2, #0
 80099ea:	4d05      	ldr	r5, [pc, #20]	; (8009a00 <_write_r+0x20>)
 80099ec:	602a      	str	r2, [r5, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f7f7 fcfa 	bl	80013e8 <_write>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_write_r+0x1e>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_write_r+0x1e>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	20001234 	.word	0x20001234

08009a04 <_close_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	2300      	movs	r3, #0
 8009a08:	4d05      	ldr	r5, [pc, #20]	; (8009a20 <_close_r+0x1c>)
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	602b      	str	r3, [r5, #0]
 8009a10:	f7f7 fd06 	bl	8001420 <_close>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_close_r+0x1a>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_close_r+0x1a>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	20001234 	.word	0x20001234

08009a24 <_fstat_r>:
 8009a24:	b538      	push	{r3, r4, r5, lr}
 8009a26:	2300      	movs	r3, #0
 8009a28:	4d06      	ldr	r5, [pc, #24]	; (8009a44 <_fstat_r+0x20>)
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	4611      	mov	r1, r2
 8009a30:	602b      	str	r3, [r5, #0]
 8009a32:	f7f7 fd00 	bl	8001436 <_fstat>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	d102      	bne.n	8009a40 <_fstat_r+0x1c>
 8009a3a:	682b      	ldr	r3, [r5, #0]
 8009a3c:	b103      	cbz	r3, 8009a40 <_fstat_r+0x1c>
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	bd38      	pop	{r3, r4, r5, pc}
 8009a42:	bf00      	nop
 8009a44:	20001234 	.word	0x20001234

08009a48 <_isatty_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	4d05      	ldr	r5, [pc, #20]	; (8009a64 <_isatty_r+0x1c>)
 8009a4e:	4604      	mov	r4, r0
 8009a50:	4608      	mov	r0, r1
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	f7f7 fcfe 	bl	8001454 <_isatty>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d102      	bne.n	8009a62 <_isatty_r+0x1a>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	b103      	cbz	r3, 8009a62 <_isatty_r+0x1a>
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	20001234 	.word	0x20001234

08009a68 <_lseek_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	4611      	mov	r1, r2
 8009a70:	2200      	movs	r2, #0
 8009a72:	4d05      	ldr	r5, [pc, #20]	; (8009a88 <_lseek_r+0x20>)
 8009a74:	602a      	str	r2, [r5, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f7f7 fcf6 	bl	8001468 <_lseek>
 8009a7c:	1c43      	adds	r3, r0, #1
 8009a7e:	d102      	bne.n	8009a86 <_lseek_r+0x1e>
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	b103      	cbz	r3, 8009a86 <_lseek_r+0x1e>
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	bd38      	pop	{r3, r4, r5, pc}
 8009a88:	20001234 	.word	0x20001234

08009a8c <_read_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	4611      	mov	r1, r2
 8009a94:	2200      	movs	r2, #0
 8009a96:	4d05      	ldr	r5, [pc, #20]	; (8009aac <_read_r+0x20>)
 8009a98:	602a      	str	r2, [r5, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f7f7 fc87 	bl	80013ae <_read>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_read_r+0x1e>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_read_r+0x1e>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	20001234 	.word	0x20001234

08009ab0 <_init>:
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab2:	bf00      	nop
 8009ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab6:	bc08      	pop	{r3}
 8009ab8:	469e      	mov	lr, r3
 8009aba:	4770      	bx	lr

08009abc <_fini>:
 8009abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009abe:	bf00      	nop
 8009ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac2:	bc08      	pop	{r3}
 8009ac4:	469e      	mov	lr, r3
 8009ac6:	4770      	bx	lr
